"use strict";var Tc=Object.defineProperty;var Pc=(r,e,t)=>e in r?Tc(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var Ee=(r,e,t)=>(Pc(r,typeof e!="symbol"?e+"":e,t),t);Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const Be=require("obsidian"),Oc=require("electron"),xc=require("stream");function Ze(){}function ft(r,e){for(const t in e)r[t]=e[t];return r}function fo(r){return r()}function $s(){return Object.create(null)}function It(r){r.forEach(fo)}function Wt(r){return typeof r=="function"}function At(r,e){return r!=r?e==e:r!==e||r&&typeof r=="object"||typeof r=="function"}function Sc(r){return Object.keys(r).length===0}function Cc(r,...e){if(r==null){for(const n of e)n(void 0);return Ze}const t=r.subscribe(...e);return t.unsubscribe?()=>t.unsubscribe():t}function Di(r,e,t){r.$$.on_destroy.push(Cc(e,t))}function kc(r,e,t,n){if(r){const i=ho(r,e,t,n);return r[0](i)}}function ho(r,e,t,n){return r[1]&&n?ft(t.ctx.slice(),r[1](n(e))):t.ctx}function Nc(r,e,t,n){if(r[2]&&n){const i=r[2](n(t));if(e.dirty===void 0)return i;if(typeof i=="object"){const s=[],a=Math.max(e.dirty.length,i.length);for(let o=0;o<a;o+=1)s[o]=e.dirty[o]|i[o];return s}return e.dirty|i}return e.dirty}function Rc(r,e,t,n,i,s){if(i){const a=ho(e,t,n,s);r.p(a,i)}}function Dc(r){if(r.ctx.length>32){const e=[],t=r.ctx.length/32;for(let n=0;n<t;n++)e[n]=-1;return e}return-1}function er(r){const e={};for(const t in r)t[0]!=="$"&&(e[t]=r[t]);return e}function jc(r){return r&&Wt(r.destroy)?r.destroy:Ze}function Ne(r,e){r.appendChild(e)}function tt(r,e,t){r.insertBefore(e,t||null)}function Ge(r){r.parentNode&&r.parentNode.removeChild(r)}function We(r){return document.createElement(r)}function Rr(r){return document.createElementNS("http://www.w3.org/2000/svg",r)}function Qi(r){return document.createTextNode(r)}function Lt(){return Qi(" ")}function ji(){return Qi("")}function Gt(r,e,t,n){return r.addEventListener(e,t,n),()=>r.removeEventListener(e,t,n)}function Li(r){return function(e){return e.preventDefault(),r.call(this,e)}}function Ae(r,e,t){t==null?r.removeAttribute(e):r.getAttribute(e)!==t&&r.setAttribute(e,t)}function Lc(r){return Array.from(r.childNodes)}function Uc(r,e){e=""+e,r.data!==e&&(r.data=e)}function zs(r,e){r.value=e??""}function Jr(r,e,t,n){t==null?r.style.removeProperty(e):r.style.setProperty(e,t,n?"important":"")}let es;function Tr(r){es=r}const Ft=[],Bs=[];let Yt=[];const Zs=[],Mc=Promise.resolve();let Ui=!1;function $c(){Ui||(Ui=!0,Mc.then(po))}function Mi(r){Yt.push(r)}const fi=new Set;let zt=0;function po(){if(zt!==0)return;const r=es;do{try{for(;zt<Ft.length;){const e=Ft[zt];zt++,Tr(e),zc(e.$$)}}catch(e){throw Ft.length=0,zt=0,e}for(Tr(null),Ft.length=0,zt=0;Bs.length;)Bs.pop()();for(let e=0;e<Yt.length;e+=1){const t=Yt[e];fi.has(t)||(fi.add(t),t())}Yt.length=0}while(Ft.length);for(;Zs.length;)Zs.pop()();Ui=!1,fi.clear(),Tr(r)}function zc(r){if(r.fragment!==null){r.update(),It(r.before_update);const e=r.dirty;r.dirty=[-1],r.fragment&&r.fragment.p(r.ctx,e),r.after_update.forEach(Mi)}}function Bc(r){const e=[],t=[];Yt.forEach(n=>r.indexOf(n)===-1?e.push(n):t.push(n)),t.forEach(n=>n()),Yt=e}const Xr=new Set;let Rt;function mo(){Rt={r:0,c:[],p:Rt}}function go(){Rt.r||It(Rt.c),Rt=Rt.p}function He(r,e){r&&r.i&&(Xr.delete(r),r.i(e))}function Ye(r,e,t,n){if(r&&r.o){if(Xr.has(r))return;Xr.add(r),Rt.c.push(()=>{Xr.delete(r),n&&(t&&r.d(1),n())}),r.o(e)}else n&&n()}function Vs(r){return(r==null?void 0:r.length)!==void 0?r:Array.from(r)}function Zc(r,e){Ye(r,1,1,()=>{e.delete(r.key)})}function Vc(r,e,t,n,i,s,a,o,u,c,d,f){let m=r.length,b=s.length,g=m;const _={};for(;g--;)_[r[g].key]=g;const h=[],T=new Map,j=new Map,S=[];for(g=b;g--;){const C=f(i,s,g),v=t(C);let A=a.get(v);A?n&&S.push(()=>A.p(C,e)):(A=c(v,C),A.c()),T.set(v,h[g]=A),v in _&&j.set(v,Math.abs(g-_[v]))}const R=new Set,M=new Set;function O(C){He(C,1),C.m(o,d),a.set(C.key,C),d=C.first,b--}for(;m&&b;){const C=h[b-1],v=r[m-1],A=C.key,I=v.key;C===v?(d=C.first,m--,b--):T.has(I)?!a.has(A)||R.has(A)?O(C):M.has(I)?m--:j.get(A)>j.get(I)?(M.add(A),O(C)):(R.add(I),m--):(u(v,a),m--)}for(;m--;){const C=r[m];T.has(C.key)||u(C,a)}for(;b;)O(h[b-1]);return It(S),h}function ts(r,e){const t={},n={},i={$$scope:1};let s=r.length;for(;s--;){const a=r[s],o=e[s];if(o){for(const u in a)u in o||(n[u]=1);for(const u in o)i[u]||(t[u]=o[u],i[u]=1);r[s]=o}else for(const u in a)i[u]=1}for(const a in n)a in t||(t[a]=void 0);return t}function rs(r){return typeof r=="object"&&r!==null?r:{}}function wt(r){r&&r.c()}function mt(r,e,t){const{fragment:n,after_update:i}=r.$$;n&&n.m(e,t),Mi(()=>{const s=r.$$.on_mount.map(fo).filter(Wt);r.$$.on_destroy?r.$$.on_destroy.push(...s):It(s),r.$$.on_mount=[]}),i.forEach(Mi)}function gt(r,e){const t=r.$$;t.fragment!==null&&(Bc(t.after_update),It(t.on_destroy),t.fragment&&t.fragment.d(e),t.on_destroy=t.fragment=null,t.ctx=[])}function Fc(r,e){r.$$.dirty[0]===-1&&(Ft.push(r),$c(),r.$$.dirty.fill(0)),r.$$.dirty[e/31|0]|=1<<e%31}function Mt(r,e,t,n,i,s,a=null,o=[-1]){const u=es;Tr(r);const c=r.$$={fragment:null,ctx:[],props:s,update:Ze,not_equal:i,bound:$s(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(u?u.$$.context:[])),callbacks:$s(),dirty:o,skip_bound:!1,root:e.target||u.$$.root};a&&a(c.root);let d=!1;if(c.ctx=t?t(r,e.props||{},(f,m,...b)=>{const g=b.length?b[0]:m;return c.ctx&&i(c.ctx[f],c.ctx[f]=g)&&(!c.skip_bound&&c.bound[f]&&c.bound[f](g),d&&Fc(r,f)),m}):[],c.update(),d=!0,It(c.before_update),c.fragment=n?n(c.ctx):!1,e.target){if(e.hydrate){const f=Lc(e.target);c.fragment&&c.fragment.l(f),f.forEach(Ge)}else c.fragment&&c.fragment.c();e.intro&&He(r.$$.fragment),mt(r,e.target,e.anchor),po()}Tr(u)}class $t{constructor(){Ee(this,"$$");Ee(this,"$$set")}$destroy(){gt(this,1),this.$destroy=Ze}$on(e,t){if(!Wt(t))return Ze;const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const i=n.indexOf(t);i!==-1&&n.splice(i,1)}}$set(e){this.$$set&&!Sc(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const Kc="4";typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(Kc);function Fs(r){let e,t;return{c(){e=Rr("title"),t=Qi(r[0])},m(n,i){tt(n,e,i),Ne(e,t)},p(n,i){i&1&&Uc(t,n[0])},d(n){n&&Ge(e)}}}function qc(r){let e,t,n,i=r[0]&&Fs(r);const s=r[3].default,a=kc(s,r,r[2],null);return{c(){e=Rr("svg"),i&&i.c(),t=ji(),a&&a.c(),Ae(e,"xmlns","http://www.w3.org/2000/svg"),Ae(e,"viewBox",r[1]),Ae(e,"class","svelte-c8tyih")},m(o,u){tt(o,e,u),i&&i.m(e,null),Ne(e,t),a&&a.m(e,null),n=!0},p(o,[u]){o[0]?i?i.p(o,u):(i=Fs(o),i.c(),i.m(e,t)):i&&(i.d(1),i=null),a&&a.p&&(!n||u&4)&&Rc(a,s,o,o[2],n?Nc(s,o[2],u,null):Dc(o[2]),null),(!n||u&2)&&Ae(e,"viewBox",o[1])},i(o){n||(He(a,o),n=!0)},o(o){Ye(a,o),n=!1},d(o){o&&Ge(e),i&&i.d(),a&&a.d(o)}}}function Hc(r,e,t){let{$$slots:n={},$$scope:i}=e,{title:s=null}=e,{viewBox:a}=e;return r.$$set=o=>{"title"in o&&t(0,s=o.title),"viewBox"in o&&t(1,a=o.viewBox),"$$scope"in o&&t(2,i=o.$$scope)},[s,a,i,n]}class ns extends $t{constructor(e){super(),Mt(this,e,Hc,qc,At,{title:0,viewBox:1})}}function Wc(r){let e;return{c(){e=Rr("path"),Ae(e,"d","M2.01 21L23 12 2.01 3 2 10l15 2-15 2z")},m(t,n){tt(t,e,n)},p:Ze,d(t){t&&Ge(e)}}}function Gc(r){let e,t;const n=[{viewBox:"0 0 24 24"},r[0]];let i={$$slots:{default:[Wc]},$$scope:{ctx:r}};for(let s=0;s<n.length;s+=1)i=ft(i,n[s]);return e=new ns({props:i}),{c(){wt(e.$$.fragment)},m(s,a){mt(e,s,a),t=!0},p(s,[a]){const o=a&1?ts(n,[n[0],rs(s[0])]):{};a&2&&(o.$$scope={dirty:a,ctx:s}),e.$set(o)},i(s){t||(He(e.$$.fragment,s),t=!0)},o(s){Ye(e.$$.fragment,s),t=!1},d(s){gt(e,s)}}}function Yc(r,e,t){return r.$$set=n=>{t(0,e=ft(ft({},e),er(n)))},e=er(e),[e]}class Jc extends $t{constructor(e){super(),Mt(this,e,Yc,Gc,At,{})}}const Bt=[];function is(r,e=Ze){let t;const n=new Set;function i(o){if(At(r,o)&&(r=o,t)){const u=!Bt.length;for(const c of n)c[1](),Bt.push(c,r);if(u){for(let c=0;c<Bt.length;c+=2)Bt[c][0](Bt[c+1]);Bt.length=0}}}function s(o){i(o(r))}function a(o,u=Ze){const c=[o,u];return n.add(c),n.size===1&&(t=e(i,s)||Ze),o(r),()=>{n.delete(c),n.size===0&&t&&(t(),t=null)}}return{set:i,update:s,subscribe:a}}var Ie=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Dn(r){return r&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r}var jn={exports:{}},yo={};function rt(r,e){typeof e=="boolean"&&(e={forever:e}),this._originalTimeouts=JSON.parse(JSON.stringify(r)),this._timeouts=r,this._options=e||{},this._maxRetryTime=e&&e.maxRetryTime||1/0,this._fn=null,this._errors=[],this._attempts=1,this._operationTimeout=null,this._operationTimeoutCb=null,this._timeout=null,this._operationStart=null,this._timer=null,this._options.forever&&(this._cachedTimeouts=this._timeouts.slice(0))}var Xc=rt;rt.prototype.reset=function(){this._attempts=1,this._timeouts=this._originalTimeouts.slice(0)};rt.prototype.stop=function(){this._timeout&&clearTimeout(this._timeout),this._timer&&clearTimeout(this._timer),this._timeouts=[],this._cachedTimeouts=null};rt.prototype.retry=function(r){if(this._timeout&&clearTimeout(this._timeout),!r)return!1;var e=new Date().getTime();if(r&&e-this._operationStart>=this._maxRetryTime)return this._errors.push(r),this._errors.unshift(new Error("RetryOperation timeout occurred")),!1;this._errors.push(r);var t=this._timeouts.shift();if(t===void 0)if(this._cachedTimeouts)this._errors.splice(0,this._errors.length-1),t=this._cachedTimeouts.slice(-1);else return!1;var n=this;return this._timer=setTimeout(function(){n._attempts++,n._operationTimeoutCb&&(n._timeout=setTimeout(function(){n._operationTimeoutCb(n._attempts)},n._operationTimeout),n._options.unref&&n._timeout.unref()),n._fn(n._attempts)},t),this._options.unref&&this._timer.unref(),!0};rt.prototype.attempt=function(r,e){this._fn=r,e&&(e.timeout&&(this._operationTimeout=e.timeout),e.cb&&(this._operationTimeoutCb=e.cb));var t=this;this._operationTimeoutCb&&(this._timeout=setTimeout(function(){t._operationTimeoutCb()},t._operationTimeout)),this._operationStart=new Date().getTime(),this._fn(this._attempts)};rt.prototype.try=function(r){console.log("Using RetryOperation.try() is deprecated"),this.attempt(r)};rt.prototype.start=function(r){console.log("Using RetryOperation.start() is deprecated"),this.attempt(r)};rt.prototype.start=rt.prototype.try;rt.prototype.errors=function(){return this._errors};rt.prototype.attempts=function(){return this._attempts};rt.prototype.mainError=function(){if(this._errors.length===0)return null;for(var r={},e=null,t=0,n=0;n<this._errors.length;n++){var i=this._errors[n],s=i.message,a=(r[s]||0)+1;r[s]=a,a>=t&&(e=i,t=a)}return e};(function(r){var e=Xc;r.operation=function(t){var n=r.timeouts(t);return new e(n,{forever:t&&(t.forever||t.retries===1/0),unref:t&&t.unref,maxRetryTime:t&&t.maxRetryTime})},r.timeouts=function(t){if(t instanceof Array)return[].concat(t);var n={retries:10,factor:2,minTimeout:1*1e3,maxTimeout:1/0,randomize:!1};for(var i in t)n[i]=t[i];if(n.minTimeout>n.maxTimeout)throw new Error("minTimeout is greater than maxTimeout");for(var s=[],a=0;a<n.retries;a++)s.push(this.createTimeout(a,n));return t&&t.forever&&!s.length&&s.push(this.createTimeout(a,n)),s.sort(function(o,u){return o-u}),s},r.createTimeout=function(t,n){var i=n.randomize?Math.random()+1:1,s=Math.round(i*Math.max(n.minTimeout,1)*Math.pow(n.factor,t));return s=Math.min(s,n.maxTimeout),s},r.wrap=function(t,n,i){if(n instanceof Array&&(i=n,n=null),!i){i=[];for(var s in t)typeof t[s]=="function"&&i.push(s)}for(var a=0;a<i.length;a++){var o=i[a],u=t[o];t[o]=(function(d){var f=r.operation(n),m=Array.prototype.slice.call(arguments,1),b=m.pop();m.push(function(g){f.retry(g)||(g&&(arguments[0]=f.mainError()),b.apply(this,arguments))}),f.attempt(function(){d.apply(t,m)})}).bind(t,u),t[o].options=n}}})(yo);var Qc=yo;const el=Qc,tl=["Failed to fetch","NetworkError when attempting to fetch resource.","The Internet connection appears to be offline.","Network request failed"];class bo extends Error{constructor(e){super(),e instanceof Error?(this.originalError=e,{message:e}=e):(this.originalError=new Error(e),this.originalError.stack=this.stack),this.name="AbortError",this.message=e}}const rl=(r,e,t)=>{const n=t.retries-(e-1);return r.attemptNumber=e,r.retriesLeft=n,r},nl=r=>tl.includes(r),vo=(r,e)=>new Promise((t,n)=>{e={onFailedAttempt:()=>{},retries:10,...e};const i=el.operation(e);i.attempt(async s=>{try{t(await r(s))}catch(a){if(!(a instanceof Error)){n(new TypeError(`Non-error was thrown: "${a}". You should only throw errors.`));return}if(a instanceof bo)i.stop(),n(a.originalError);else if(a instanceof TypeError&&!nl(a.message))i.stop(),n(a);else{rl(a,s,e);try{await e.onFailedAttempt(a)}catch(o){n(o);return}i.retry(a)||n(i.mainError())}}})});jn.exports=vo;jn.exports.default=vo;jn.exports.AbortError=bo;var il=jn.exports;const tn=Dn(il);let Zr;const sl=new Uint8Array(16);function al(){if(!Zr&&(Zr=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!Zr))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Zr(sl)}const ke=[];for(let r=0;r<256;++r)ke.push((r+256).toString(16).slice(1));function ol(r,e=0){return ke[r[e+0]]+ke[r[e+1]]+ke[r[e+2]]+ke[r[e+3]]+"-"+ke[r[e+4]]+ke[r[e+5]]+"-"+ke[r[e+6]]+ke[r[e+7]]+"-"+ke[r[e+8]]+ke[r[e+9]]+"-"+ke[r[e+10]]+ke[r[e+11]]+ke[r[e+12]]+ke[r[e+13]]+ke[r[e+14]]+ke[r[e+15]]}const ul=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),Ks={randomUUID:ul};function ht(r,e,t){if(Ks.randomUUID&&!e&&!r)return Ks.randomUUID();r=r||{};const n=r.random||(r.rng||al)();if(n[6]=n[6]&15|64,n[8]=n[8]&63|128,e){t=t||0;for(let i=0;i<16;++i)e[t+i]=n[i];return e}return ol(n)}var cl=function(r,e){if(typeof r!="string")throw new TypeError("Expected a string");return e=typeof e>"u"?"_":e,r.replace(/([a-z\d])([A-Z])/g,"$1"+e+"$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g,"$1"+e+"$2").toLowerCase()};const ll=Dn(cl);var wo={exports:{}};const dl=/[\p{Lu}]/u,fl=/[\p{Ll}]/u,qs=/^[\p{Lu}](?![\p{Lu}])/gu,_o=/([\p{Alpha}\p{N}_]|$)/u,Io=/[_.\- ]+/,hl=new RegExp("^"+Io.source),Hs=new RegExp(Io.source+_o.source,"gu"),Ws=new RegExp("\\d+"+_o.source,"gu"),pl=(r,e,t)=>{let n=!1,i=!1,s=!1;for(let a=0;a<r.length;a++){const o=r[a];n&&dl.test(o)?(r=r.slice(0,a)+"-"+r.slice(a),n=!1,s=i,i=!0,a++):i&&s&&fl.test(o)?(r=r.slice(0,a-1)+"-"+r.slice(a-1),s=i,i=!1,n=!0):(n=e(o)===o&&t(o)!==o,s=i,i=t(o)===o&&e(o)!==o)}return r},ml=(r,e)=>(qs.lastIndex=0,r.replace(qs,t=>e(t))),gl=(r,e)=>(Hs.lastIndex=0,Ws.lastIndex=0,r.replace(Hs,(t,n)=>e(n)).replace(Ws,t=>e(t))),Ao=(r,e)=>{if(!(typeof r=="string"||Array.isArray(r)))throw new TypeError("Expected the input to be `string | string[]`");if(e={pascalCase:!1,preserveConsecutiveUppercase:!1,...e},Array.isArray(r)?r=r.map(s=>s.trim()).filter(s=>s.length).join("-"):r=r.trim(),r.length===0)return"";const t=e.locale===!1?s=>s.toLowerCase():s=>s.toLocaleLowerCase(e.locale),n=e.locale===!1?s=>s.toUpperCase():s=>s.toLocaleUpperCase(e.locale);return r.length===1?e.pascalCase?n(r):t(r):(r!==t(r)&&(r=pl(r,t,n)),r=r.replace(hl,""),e.preserveConsecutiveUppercase?r=ml(r,t):r=t(r),e.pascalCase&&(r=n(r.charAt(0))+r.slice(1)),gl(r,n))};wo.exports=Ao;wo.exports.default=Ao;function yl(r,e){return(e==null?void 0:e[r])||ll(r)}function bl(r,e,t){const n={};for(const i in r)Object.hasOwn(r,i)&&(n[e(i,t)]=r[i]);return n}function Gs(r){return Array.isArray(r)?[...r]:{...r}}function vl(r,e){const t=Gs(r);for(const[n,i]of Object.entries(e)){const[s,...a]=n.split(".").reverse();let o=t;for(const u of a.reverse()){if(o[u]===void 0)break;o[u]=Gs(o[u]),o=o[u]}o[s]!==void 0&&(o[s]={lc:1,type:"secret",id:[i]})}return t}function Eo(r){const e=Object.getPrototypeOf(r);return typeof r.lc_name=="function"&&(typeof e.lc_name!="function"||r.lc_name()!==e.lc_name())?r.lc_name():r.name}class _t{static lc_name(){return this.name}get lc_id(){return[...this.lc_namespace,Eo(this.constructor)]}get lc_secrets(){}get lc_attributes(){}get lc_aliases(){}constructor(e,...t){Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"lc_kwargs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.lc_kwargs=e||{}}toJSON(){if(!this.lc_serializable)return this.toJSONNotImplemented();if(this.lc_kwargs instanceof _t||typeof this.lc_kwargs!="object"||Array.isArray(this.lc_kwargs))return this.toJSONNotImplemented();const e={},t={},n=Object.keys(this.lc_kwargs).reduce((i,s)=>(i[s]=s in this?this[s]:this.lc_kwargs[s],i),{});for(let i=Object.getPrototypeOf(this);i;i=Object.getPrototypeOf(i))Object.assign(e,Reflect.get(i,"lc_aliases",this)),Object.assign(t,Reflect.get(i,"lc_secrets",this)),Object.assign(n,Reflect.get(i,"lc_attributes",this));return Object.keys(t).forEach(i=>{let s=this,a=n;const[o,...u]=i.split(".").reverse();for(const c of u.reverse()){if(!(c in s)||s[c]===void 0)return;(!(c in a)||a[c]===void 0)&&(typeof s[c]=="object"&&s[c]!=null?a[c]={}:Array.isArray(s[c])&&(a[c]=[])),s=s[c],a=a[c]}o in s&&s[o]!==void 0&&(a[o]=a[o]||s[o])}),{lc:1,type:"constructor",id:this.lc_id,kwargs:bl(Object.keys(t).length?vl(n,t):n,yl,e)}}toJSONNotImplemented(){return{lc:1,type:"not_implemented",id:this.lc_id}}}class wl{}class Dr extends wl{get lc_namespace(){return["langchain","callbacks",this.name]}get lc_secrets(){}get lc_attributes(){}get lc_aliases(){}static lc_name(){return this.name}get lc_id(){return[...this.lc_namespace,Eo(this.constructor)]}constructor(e){var t;super(),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"lc_kwargs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"ignoreLLM",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"ignoreChain",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"ignoreAgent",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"ignoreRetriever",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"awaitHandlers",{enumerable:!0,configurable:!0,writable:!0,value:typeof process<"u"?((t=process.env)==null?void 0:t.LANGCHAIN_CALLBACKS_BACKGROUND)!=="true":!0}),this.lc_kwargs=e||{},e&&(this.ignoreLLM=e.ignoreLLM??this.ignoreLLM,this.ignoreChain=e.ignoreChain??this.ignoreChain,this.ignoreAgent=e.ignoreAgent??this.ignoreAgent,this.ignoreRetriever=e.ignoreRetriever??this.ignoreRetriever)}copy(){return new this.constructor(this)}toJSON(){return _t.prototype.toJSON.call(this)}toJSONNotImplemented(){return _t.prototype.toJSONNotImplemented.call(this)}static fromMethods(e){class t extends Dr{constructor(){super(),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:ht()}),Object.assign(this,e)}}return new t}}var ss={exports:{}};ss.exports;(function(r){const t=(s=0)=>a=>`\x1B[${38+s};5;${a}m`,n=(s=0)=>(a,o,u)=>`\x1B[${38+s};2;${a};${o};${u}m`;function i(){const s=new Map,a={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};a.color.gray=a.color.blackBright,a.bgColor.bgGray=a.bgColor.bgBlackBright,a.color.grey=a.color.blackBright,a.bgColor.bgGrey=a.bgColor.bgBlackBright;for(const[o,u]of Object.entries(a)){for(const[c,d]of Object.entries(u))a[c]={open:`\x1B[${d[0]}m`,close:`\x1B[${d[1]}m`},u[c]=a[c],s.set(d[0],d[1]);Object.defineProperty(a,o,{value:u,enumerable:!1})}return Object.defineProperty(a,"codes",{value:s,enumerable:!1}),a.color.close="\x1B[39m",a.bgColor.close="\x1B[49m",a.color.ansi256=t(),a.color.ansi16m=n(),a.bgColor.ansi256=t(10),a.bgColor.ansi16m=n(10),Object.defineProperties(a,{rgbToAnsi256:{value:(o,u,c)=>o===u&&u===c?o<8?16:o>248?231:Math.round((o-8)/247*24)+232:16+36*Math.round(o/255*5)+6*Math.round(u/255*5)+Math.round(c/255*5),enumerable:!1},hexToRgb:{value:o=>{const u=/(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(o.toString(16));if(!u)return[0,0,0];let{colorString:c}=u.groups;c.length===3&&(c=c.split("").map(f=>f+f).join(""));const d=Number.parseInt(c,16);return[d>>16&255,d>>8&255,d&255]},enumerable:!1},hexToAnsi256:{value:o=>a.rgbToAnsi256(...a.hexToRgb(o)),enumerable:!1}}),a}Object.defineProperty(r,"exports",{enumerable:!0,get:i})})(ss);var _l=ss.exports;const To=Dn(_l);function hi(r,e){return r&&!Array.isArray(r)&&typeof r=="object"?r:{[e]:r}}class Ln extends Dr{constructor(e){super(...arguments),Object.defineProperty(this,"runMap",{enumerable:!0,configurable:!0,writable:!0,value:new Map})}copy(){return this}_addChildRun(e,t){e.child_runs.push(t)}async _startTrace(e){var t;if(e.parent_run_id!==void 0){const n=this.runMap.get(e.parent_run_id);n&&(this._addChildRun(n,e),n.child_execution_order=Math.max(n.child_execution_order,e.child_execution_order))}this.runMap.set(e.id,e),await((t=this.onRunCreate)==null?void 0:t.call(this,e))}async _endTrace(e){var n;const t=e.parent_run_id!==void 0&&this.runMap.get(e.parent_run_id);t?t.child_execution_order=Math.max(t.child_execution_order,e.child_execution_order):await this.persistRun(e),this.runMap.delete(e.id),await((n=this.onRunUpdate)==null?void 0:n.call(this,e))}_getExecutionOrder(e){const t=e!==void 0&&this.runMap.get(e);return t?t.child_execution_order+1:1}async handleLLMStart(e,t,n,i,s,a,o,u){var b;const c=this._getExecutionOrder(i),d=Date.now(),f=o?{...s,metadata:o}:s,m={id:n,name:u??e.id[e.id.length-1],parent_run_id:i,start_time:d,serialized:e,events:[{name:"start",time:new Date(d).toISOString()}],inputs:{prompts:t},execution_order:c,child_runs:[],child_execution_order:c,run_type:"llm",extra:f??{},tags:a||[]};return await this._startTrace(m),await((b=this.onLLMStart)==null?void 0:b.call(this,m)),m}async handleChatModelStart(e,t,n,i,s,a,o,u){var b;const c=this._getExecutionOrder(i),d=Date.now(),f=o?{...s,metadata:o}:s,m={id:n,name:u??e.id[e.id.length-1],parent_run_id:i,start_time:d,serialized:e,events:[{name:"start",time:new Date(d).toISOString()}],inputs:{messages:t},execution_order:c,child_runs:[],child_execution_order:c,run_type:"llm",extra:f??{},tags:a||[]};return await this._startTrace(m),await((b=this.onLLMStart)==null?void 0:b.call(this,m)),m}async handleLLMEnd(e,t){var i;const n=this.runMap.get(t);if(!n||(n==null?void 0:n.run_type)!=="llm")throw new Error("No LLM run to end.");return n.end_time=Date.now(),n.outputs=e,n.events.push({name:"end",time:new Date(n.end_time).toISOString()}),await((i=this.onLLMEnd)==null?void 0:i.call(this,n)),await this._endTrace(n),n}async handleLLMError(e,t){var i;const n=this.runMap.get(t);if(!n||(n==null?void 0:n.run_type)!=="llm")throw new Error("No LLM run to end.");return n.end_time=Date.now(),n.error=e.message,n.events.push({name:"error",time:new Date(n.end_time).toISOString()}),await((i=this.onLLMError)==null?void 0:i.call(this,n)),await this._endTrace(n),n}async handleChainStart(e,t,n,i,s,a,o,u){var m;const c=this._getExecutionOrder(i),d=Date.now(),f={id:n,name:u??e.id[e.id.length-1],parent_run_id:i,start_time:d,serialized:e,events:[{name:"start",time:new Date(d).toISOString()}],inputs:t,execution_order:c,child_execution_order:c,run_type:o??"chain",child_runs:[],extra:a?{metadata:a}:{},tags:s||[]};return await this._startTrace(f),await((m=this.onChainStart)==null?void 0:m.call(this,f)),f}async handleChainEnd(e,t,n,i,s){var o;const a=this.runMap.get(t);if(!a)throw new Error("No chain run to end.");return a.end_time=Date.now(),a.outputs=hi(e,"output"),a.events.push({name:"end",time:new Date(a.end_time).toISOString()}),(s==null?void 0:s.inputs)!==void 0&&(a.inputs=hi(s.inputs,"input")),await((o=this.onChainEnd)==null?void 0:o.call(this,a)),await this._endTrace(a),a}async handleChainError(e,t,n,i,s){var o;const a=this.runMap.get(t);if(!a)throw new Error("No chain run to end.");return a.end_time=Date.now(),a.error=e.message,a.events.push({name:"error",time:new Date(a.end_time).toISOString()}),(s==null?void 0:s.inputs)!==void 0&&(a.inputs=hi(s.inputs,"input")),await((o=this.onChainError)==null?void 0:o.call(this,a)),await this._endTrace(a),a}async handleToolStart(e,t,n,i,s,a,o){var f;const u=this._getExecutionOrder(i),c=Date.now(),d={id:n,name:o??e.id[e.id.length-1],parent_run_id:i,start_time:c,serialized:e,events:[{name:"start",time:new Date(c).toISOString()}],inputs:{input:t},execution_order:u,child_execution_order:u,run_type:"tool",child_runs:[],extra:a?{metadata:a}:{},tags:s||[]};return await this._startTrace(d),await((f=this.onToolStart)==null?void 0:f.call(this,d)),d}async handleToolEnd(e,t){var i;const n=this.runMap.get(t);if(!n||(n==null?void 0:n.run_type)!=="tool")throw new Error("No tool run to end");return n.end_time=Date.now(),n.outputs={output:e},n.events.push({name:"end",time:new Date(n.end_time).toISOString()}),await((i=this.onToolEnd)==null?void 0:i.call(this,n)),await this._endTrace(n),n}async handleToolError(e,t){var i;const n=this.runMap.get(t);if(!n||(n==null?void 0:n.run_type)!=="tool")throw new Error("No tool run to end");return n.end_time=Date.now(),n.error=e.message,n.events.push({name:"error",time:new Date(n.end_time).toISOString()}),await((i=this.onToolError)==null?void 0:i.call(this,n)),await this._endTrace(n),n}async handleAgentAction(e,t){var s;const n=this.runMap.get(t);if(!n||(n==null?void 0:n.run_type)!=="chain")return;const i=n;i.actions=i.actions||[],i.actions.push(e),i.events.push({name:"agent_action",time:new Date().toISOString(),kwargs:{action:e}}),await((s=this.onAgentAction)==null?void 0:s.call(this,n))}async handleAgentEnd(e,t){var i;const n=this.runMap.get(t);!n||(n==null?void 0:n.run_type)!=="chain"||(n.events.push({name:"agent_end",time:new Date().toISOString(),kwargs:{action:e}}),await((i=this.onAgentEnd)==null?void 0:i.call(this,n)))}async handleRetrieverStart(e,t,n,i,s,a,o){var f;const u=this._getExecutionOrder(i),c=Date.now(),d={id:n,name:o??e.id[e.id.length-1],parent_run_id:i,start_time:c,serialized:e,events:[{name:"start",time:new Date(c).toISOString()}],inputs:{query:t},execution_order:u,child_execution_order:u,run_type:"retriever",child_runs:[],extra:a?{metadata:a}:{},tags:s||[]};return await this._startTrace(d),await((f=this.onRetrieverStart)==null?void 0:f.call(this,d)),d}async handleRetrieverEnd(e,t){var i;const n=this.runMap.get(t);if(!n||(n==null?void 0:n.run_type)!=="retriever")throw new Error("No retriever run to end");return n.end_time=Date.now(),n.outputs={documents:e},n.events.push({name:"end",time:new Date(n.end_time).toISOString()}),await((i=this.onRetrieverEnd)==null?void 0:i.call(this,n)),await this._endTrace(n),n}async handleRetrieverError(e,t){var i;const n=this.runMap.get(t);if(!n||(n==null?void 0:n.run_type)!=="retriever")throw new Error("No retriever run to end");return n.end_time=Date.now(),n.error=e.message,n.events.push({name:"error",time:new Date(n.end_time).toISOString()}),await((i=this.onRetrieverError)==null?void 0:i.call(this,n)),await this._endTrace(n),n}async handleText(e,t){var i;const n=this.runMap.get(t);!n||(n==null?void 0:n.run_type)!=="chain"||(n.events.push({name:"text",time:new Date().toISOString(),kwargs:{text:e}}),await((i=this.onText)==null?void 0:i.call(this,n)))}async handleLLMNewToken(e,t,n,i,s,a){var u;const o=this.runMap.get(n);if(!o||(o==null?void 0:o.run_type)!=="llm")throw new Error('Invalid "runId" provided to "handleLLMNewToken" callback.');return o.events.push({name:"new_token",time:new Date().toISOString(),kwargs:{token:e,idx:t,chunk:a==null?void 0:a.chunk}}),await((u=this.onLLMNewToken)==null?void 0:u.call(this,o,e)),o}}function ze(r,e){return`${r.open}${e}${r.close}`}function nt(r,e){try{return JSON.stringify(r,null,2)}catch{return e}}function yt(r){if(!r.end_time)return"";const e=r.end_time-r.start_time;return e<1e3?`${e}ms`:`${(e/1e3).toFixed(2)}s`}const{color:qe}=To;class Ys extends Ln{constructor(){super(...arguments),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"console_callback_handler"})}persistRun(e){return Promise.resolve()}getParents(e){const t=[];let n=e;for(;n.parent_run_id;){const i=this.runMap.get(n.parent_run_id);if(i)t.push(i),n=i;else break}return t}getBreadcrumbs(e){const n=[...this.getParents(e).reverse(),e].map((i,s,a)=>{const o=`${i.execution_order}:${i.run_type}:${i.name}`;return s===a.length-1?ze(To.bold,o):o}).join(" > ");return ze(qe.grey,n)}onChainStart(e){const t=this.getBreadcrumbs(e);console.log(`${ze(qe.green,"[chain/start]")} [${t}] Entering Chain run with input: ${nt(e.inputs,"[inputs]")}`)}onChainEnd(e){const t=this.getBreadcrumbs(e);console.log(`${ze(qe.cyan,"[chain/end]")} [${t}] [${yt(e)}] Exiting Chain run with output: ${nt(e.outputs,"[outputs]")}`)}onChainError(e){const t=this.getBreadcrumbs(e);console.log(`${ze(qe.red,"[chain/error]")} [${t}] [${yt(e)}] Chain run errored with error: ${nt(e.error,"[error]")}`)}onLLMStart(e){const t=this.getBreadcrumbs(e),n="prompts"in e.inputs?{prompts:e.inputs.prompts.map(i=>i.trim())}:e.inputs;console.log(`${ze(qe.green,"[llm/start]")} [${t}] Entering LLM run with input: ${nt(n,"[inputs]")}`)}onLLMEnd(e){const t=this.getBreadcrumbs(e);console.log(`${ze(qe.cyan,"[llm/end]")} [${t}] [${yt(e)}] Exiting LLM run with output: ${nt(e.outputs,"[response]")}`)}onLLMError(e){const t=this.getBreadcrumbs(e);console.log(`${ze(qe.red,"[llm/error]")} [${t}] [${yt(e)}] LLM run errored with error: ${nt(e.error,"[error]")}`)}onToolStart(e){var n;const t=this.getBreadcrumbs(e);console.log(`${ze(qe.green,"[tool/start]")} [${t}] Entering Tool run with input: "${(n=e.inputs.input)==null?void 0:n.trim()}"`)}onToolEnd(e){var n,i;const t=this.getBreadcrumbs(e);console.log(`${ze(qe.cyan,"[tool/end]")} [${t}] [${yt(e)}] Exiting Tool run with output: "${(i=(n=e.outputs)==null?void 0:n.output)==null?void 0:i.trim()}"`)}onToolError(e){const t=this.getBreadcrumbs(e);console.log(`${ze(qe.red,"[tool/error]")} [${t}] [${yt(e)}] Tool run errored with error: ${nt(e.error,"[error]")}`)}onRetrieverStart(e){const t=this.getBreadcrumbs(e);console.log(`${ze(qe.green,"[retriever/start]")} [${t}] Entering Retriever run with input: ${nt(e.inputs,"[inputs]")}`)}onRetrieverEnd(e){const t=this.getBreadcrumbs(e);console.log(`${ze(qe.cyan,"[retriever/end]")} [${t}] [${yt(e)}] Exiting Retriever run with output: ${nt(e.outputs,"[outputs]")}`)}onRetrieverError(e){const t=this.getBreadcrumbs(e);console.log(`${ze(qe.red,"[retriever/error]")} [${t}] [${yt(e)}] Retriever run errored with error: ${nt(e.error,"[error]")}`)}onAgentAction(e){const t=e,n=this.getBreadcrumbs(e);console.log(`${ze(qe.blue,"[agent/action]")} [${n}] Agent selected action: ${nt(t.actions[t.actions.length-1],"[action]")}`)}}var Po={},Oo={exports:{}};(function(r){var e=Object.prototype.hasOwnProperty,t="~";function n(){}Object.create&&(n.prototype=Object.create(null),new n().__proto__||(t=!1));function i(u,c,d){this.fn=u,this.context=c,this.once=d||!1}function s(u,c,d,f,m){if(typeof d!="function")throw new TypeError("The listener must be a function");var b=new i(d,f||u,m),g=t?t+c:c;return u._events[g]?u._events[g].fn?u._events[g]=[u._events[g],b]:u._events[g].push(b):(u._events[g]=b,u._eventsCount++),u}function a(u,c){--u._eventsCount===0?u._events=new n:delete u._events[c]}function o(){this._events=new n,this._eventsCount=0}o.prototype.eventNames=function(){var c=[],d,f;if(this._eventsCount===0)return c;for(f in d=this._events)e.call(d,f)&&c.push(t?f.slice(1):f);return Object.getOwnPropertySymbols?c.concat(Object.getOwnPropertySymbols(d)):c},o.prototype.listeners=function(c){var d=t?t+c:c,f=this._events[d];if(!f)return[];if(f.fn)return[f.fn];for(var m=0,b=f.length,g=new Array(b);m<b;m++)g[m]=f[m].fn;return g},o.prototype.listenerCount=function(c){var d=t?t+c:c,f=this._events[d];return f?f.fn?1:f.length:0},o.prototype.emit=function(c,d,f,m,b,g){var _=t?t+c:c;if(!this._events[_])return!1;var h=this._events[_],T=arguments.length,j,S;if(h.fn){switch(h.once&&this.removeListener(c,h.fn,void 0,!0),T){case 1:return h.fn.call(h.context),!0;case 2:return h.fn.call(h.context,d),!0;case 3:return h.fn.call(h.context,d,f),!0;case 4:return h.fn.call(h.context,d,f,m),!0;case 5:return h.fn.call(h.context,d,f,m,b),!0;case 6:return h.fn.call(h.context,d,f,m,b,g),!0}for(S=1,j=new Array(T-1);S<T;S++)j[S-1]=arguments[S];h.fn.apply(h.context,j)}else{var R=h.length,M;for(S=0;S<R;S++)switch(h[S].once&&this.removeListener(c,h[S].fn,void 0,!0),T){case 1:h[S].fn.call(h[S].context);break;case 2:h[S].fn.call(h[S].context,d);break;case 3:h[S].fn.call(h[S].context,d,f);break;case 4:h[S].fn.call(h[S].context,d,f,m);break;default:if(!j)for(M=1,j=new Array(T-1);M<T;M++)j[M-1]=arguments[M];h[S].fn.apply(h[S].context,j)}}return!0},o.prototype.on=function(c,d,f){return s(this,c,d,f,!1)},o.prototype.once=function(c,d,f){return s(this,c,d,f,!0)},o.prototype.removeListener=function(c,d,f,m){var b=t?t+c:c;if(!this._events[b])return this;if(!d)return a(this,b),this;var g=this._events[b];if(g.fn)g.fn===d&&(!m||g.once)&&(!f||g.context===f)&&a(this,b);else{for(var _=0,h=[],T=g.length;_<T;_++)(g[_].fn!==d||m&&!g[_].once||f&&g[_].context!==f)&&h.push(g[_]);h.length?this._events[b]=h.length===1?h[0]:h:a(this,b)}return this},o.prototype.removeAllListeners=function(c){var d;return c?(d=t?t+c:c,this._events[d]&&a(this,d)):(this._events=new n,this._eventsCount=0),this},o.prototype.off=o.prototype.removeListener,o.prototype.addListener=o.prototype.on,o.prefixed=t,o.EventEmitter=o,r.exports=o})(Oo);var Il=Oo.exports,Un={exports:{}},Al=(r,e)=>(e=e||(()=>{}),r.then(t=>new Promise(n=>{n(e())}).then(()=>t),t=>new Promise(n=>{n(e())}).then(()=>{throw t})));const El=Al;class xo extends Error{constructor(e){super(e),this.name="TimeoutError"}}const So=(r,e,t)=>new Promise((n,i)=>{if(typeof e!="number"||e<0)throw new TypeError("Expected `milliseconds` to be a positive number");if(e===1/0){n(r);return}const s=setTimeout(()=>{if(typeof t=="function"){try{n(t())}catch(u){i(u)}return}const a=typeof t=="string"?t:`Promise timed out after ${e} milliseconds`,o=t instanceof Error?t:new xo(a);typeof r.cancel=="function"&&r.cancel(),i(o)},e);El(r.then(n,i),()=>{clearTimeout(s)})});Un.exports=So;Un.exports.default=So;Un.exports.TimeoutError=xo;var Tl=Un.exports,as={},os={};Object.defineProperty(os,"__esModule",{value:!0});function Pl(r,e,t){let n=0,i=r.length;for(;i>0;){const s=i/2|0;let a=n+s;t(r[a],e)<=0?(n=++a,i-=s+1):i=s}return n}os.default=Pl;Object.defineProperty(as,"__esModule",{value:!0});const Ol=os;class xl{constructor(){this._queue=[]}enqueue(e,t){t=Object.assign({priority:0},t);const n={priority:t.priority,run:e};if(this.size&&this._queue[this.size-1].priority>=t.priority){this._queue.push(n);return}const i=Ol.default(this._queue,n,(s,a)=>a.priority-s.priority);this._queue.splice(i,0,n)}dequeue(){const e=this._queue.shift();return e==null?void 0:e.run}filter(e){return this._queue.filter(t=>t.priority===e.priority).map(t=>t.run)}get size(){return this._queue.length}}as.default=xl;Object.defineProperty(Po,"__esModule",{value:!0});const Sl=Il,Co=Tl,Cl=as,Vr=()=>{},kl=new Co.TimeoutError;class Nl extends Sl{constructor(e){var t,n,i,s;if(super(),this._intervalCount=0,this._intervalEnd=0,this._pendingCount=0,this._resolveEmpty=Vr,this._resolveIdle=Vr,e=Object.assign({carryoverConcurrencyCount:!1,intervalCap:1/0,interval:0,concurrency:1/0,autoStart:!0,queueClass:Cl.default},e),!(typeof e.intervalCap=="number"&&e.intervalCap>=1))throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${(n=(t=e.intervalCap)===null||t===void 0?void 0:t.toString())!==null&&n!==void 0?n:""}\` (${typeof e.intervalCap})`);if(e.interval===void 0||!(Number.isFinite(e.interval)&&e.interval>=0))throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${(s=(i=e.interval)===null||i===void 0?void 0:i.toString())!==null&&s!==void 0?s:""}\` (${typeof e.interval})`);this._carryoverConcurrencyCount=e.carryoverConcurrencyCount,this._isIntervalIgnored=e.intervalCap===1/0||e.interval===0,this._intervalCap=e.intervalCap,this._interval=e.interval,this._queue=new e.queueClass,this._queueClass=e.queueClass,this.concurrency=e.concurrency,this._timeout=e.timeout,this._throwOnTimeout=e.throwOnTimeout===!0,this._isPaused=e.autoStart===!1}get _doesIntervalAllowAnother(){return this._isIntervalIgnored||this._intervalCount<this._intervalCap}get _doesConcurrentAllowAnother(){return this._pendingCount<this._concurrency}_next(){this._pendingCount--,this._tryToStartAnother(),this.emit("next")}_resolvePromises(){this._resolveEmpty(),this._resolveEmpty=Vr,this._pendingCount===0&&(this._resolveIdle(),this._resolveIdle=Vr,this.emit("idle"))}_onResumeInterval(){this._onInterval(),this._initializeIntervalIfNeeded(),this._timeoutId=void 0}_isIntervalPaused(){const e=Date.now();if(this._intervalId===void 0){const t=this._intervalEnd-e;if(t<0)this._intervalCount=this._carryoverConcurrencyCount?this._pendingCount:0;else return this._timeoutId===void 0&&(this._timeoutId=setTimeout(()=>{this._onResumeInterval()},t)),!0}return!1}_tryToStartAnother(){if(this._queue.size===0)return this._intervalId&&clearInterval(this._intervalId),this._intervalId=void 0,this._resolvePromises(),!1;if(!this._isPaused){const e=!this._isIntervalPaused();if(this._doesIntervalAllowAnother&&this._doesConcurrentAllowAnother){const t=this._queue.dequeue();return t?(this.emit("active"),t(),e&&this._initializeIntervalIfNeeded(),!0):!1}}return!1}_initializeIntervalIfNeeded(){this._isIntervalIgnored||this._intervalId!==void 0||(this._intervalId=setInterval(()=>{this._onInterval()},this._interval),this._intervalEnd=Date.now()+this._interval)}_onInterval(){this._intervalCount===0&&this._pendingCount===0&&this._intervalId&&(clearInterval(this._intervalId),this._intervalId=void 0),this._intervalCount=this._carryoverConcurrencyCount?this._pendingCount:0,this._processQueue()}_processQueue(){for(;this._tryToStartAnother(););}get concurrency(){return this._concurrency}set concurrency(e){if(!(typeof e=="number"&&e>=1))throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${e}\` (${typeof e})`);this._concurrency=e,this._processQueue()}async add(e,t={}){return new Promise((n,i)=>{const s=async()=>{this._pendingCount++,this._intervalCount++;try{const a=this._timeout===void 0&&t.timeout===void 0?e():Co.default(Promise.resolve(e()),t.timeout===void 0?this._timeout:t.timeout,()=>{(t.throwOnTimeout===void 0?this._throwOnTimeout:t.throwOnTimeout)&&i(kl)});n(await a)}catch(a){i(a)}this._next()};this._queue.enqueue(s,t),this._tryToStartAnother(),this.emit("add")})}async addAll(e,t){return Promise.all(e.map(async n=>this.add(n,t)))}start(){return this._isPaused?(this._isPaused=!1,this._processQueue(),this):this}pause(){this._isPaused=!0}clear(){this._queue=new this._queueClass}async onEmpty(){if(this._queue.size!==0)return new Promise(e=>{const t=this._resolveEmpty;this._resolveEmpty=()=>{t(),e()}})}async onIdle(){if(!(this._pendingCount===0&&this._queue.size===0))return new Promise(e=>{const t=this._resolveIdle;this._resolveIdle=()=>{t(),e()}})}get size(){return this._queue.size}sizeBy(e){return this._queue.filter(e).length}get pending(){return this._pendingCount}get isPaused(){return this._isPaused}get timeout(){return this._timeout}set timeout(e){this._timeout=e}}var pt=Po.default=Nl;const Rl=[400,401,403,404,405,406,407,408,409];let Dl=class{constructor(e){Object.defineProperty(this,"maxConcurrency",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"maxRetries",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"queue",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.maxConcurrency=e.maxConcurrency??1/0,this.maxRetries=e.maxRetries??6;const t="default"in pt?pt.default:pt;this.queue=new t({concurrency:this.maxConcurrency})}call(e,...t){return this.queue.add(()=>tn(()=>e(...t).catch(n=>{throw n instanceof Error?n:new Error(n)}),{onFailedAttempt(n){var s;if(n.message.startsWith("Cancel")||n.message.startsWith("TimeoutError")||n.message.startsWith("AbortError")||(n==null?void 0:n.code)==="ECONNABORTED")throw n;const i=(s=n==null?void 0:n.response)==null?void 0:s.status;if(i&&Rl.includes(+i))throw n},retries:this.maxRetries,randomize:!0}),{throwOnTimeout:!0})}callWithOptions(e,t,...n){return e.signal?Promise.race([this.call(t,...n),new Promise((i,s)=>{var a;(a=e.signal)==null||a.addEventListener("abort",()=>{s(new Error("AbortError"))})})]):this.call(t,...n)}fetch(...e){return this.call(()=>fetch(...e).then(t=>t.ok?t:Promise.reject(t)))}};function Js(r){return typeof(r==null?void 0:r._getType)=="function"}function Xs(r){const e={type:r._getType(),data:{content:r.content}};return r!=null&&r.additional_kwargs&&Object.keys(r.additional_kwargs).length>0&&(e.data.additional_kwargs={...r.additional_kwargs}),e}const jl=()=>typeof window<"u"&&typeof window.document<"u",Ll=()=>typeof globalThis=="object"&&globalThis.constructor&&globalThis.constructor.name==="DedicatedWorkerGlobalScope",Ul=()=>typeof window<"u"&&window.name==="nodejs"||typeof navigator<"u"&&(navigator.userAgent.includes("Node.js")||navigator.userAgent.includes("jsdom")),ko=()=>typeof Deno<"u",Ml=()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"&&!ko(),$l=()=>{let r;return jl()?r="browser":Ml()?r="node":Ll()?r="webworker":Ul()?r="jsdom":ko()?r="deno":r="other",r};let pi;async function zl(){if(pi===void 0){const r=$l(),e=Bl();pi={library:"langsmith",runtime:r,...e}}return pi}function Jt(r){var e;try{return typeof process<"u"?(e=process.env)==null?void 0:e[r]:void 0}catch{return}}let mi;function Bl(){if(mi!==void 0)return mi;const r=["VERCEL_GIT_COMMIT_SHA","NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA","COMMIT_REF","RENDER_GIT_COMMIT","CI_COMMIT_SHA","CIRCLE_SHA1","CF_PAGES_COMMIT_SHA","REACT_APP_GIT_SHA","SOURCE_VERSION","GITHUB_SHA","TRAVIS_COMMIT","GIT_COMMIT","BUILD_VCS_NUMBER","bamboo_planRepository_revision","Build.SourceVersion","BITBUCKET_COMMIT","DRONE_COMMIT_SHA","SEMAPHORE_GIT_SHA","BUILDKITE_COMMIT"],e={};for(const t of r){const n=Jt(t);n!==void 0&&(e[t]=n)}return mi=e,e}const Qs=r=>{const t=r.replace("http://","").replace("https://","").split("/")[0].split(":")[0];return t==="localhost"||t==="127.0.0.1"||t==="::1"},Et=async(r,e)=>{const t=await r.text();if(!r.ok)throw new Error(`Failed to ${e}: ${r.status} ${r.statusText} ${t}`)};async function Zl(r){const e=[];for await(const t of r)e.push(t);return e}function gi(r){if(r!==void 0)return r.trim().replace(/^"(.*)"$/,"$1").replace(/^'(.*)'$/,"$1")}function ea(r){return Jt("LANGCHAIN_HIDE_INPUTS")==="true"?{}:r}function ta(r){return Jt("LANGCHAIN_HIDE_OUTPUTS")==="true"?{}:r}class us{constructor(e={}){Object.defineProperty(this,"apiKey",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"apiUrl",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"webUrl",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"caller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"timeout_ms",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_tenantId",{enumerable:!0,configurable:!0,writable:!0,value:null});const t=us.getDefaultClientConfig();this.apiUrl=gi(e.apiUrl??t.apiUrl)??"",this.apiKey=gi(e.apiKey??t.apiKey),this.webUrl=gi(e.webUrl??t.webUrl),this.validateApiKeyIfHosted(),this.timeout_ms=e.timeout_ms??4e3,this.caller=new Dl(e.callerOptions??{})}static getDefaultClientConfig(){const e=Jt("LANGCHAIN_API_KEY");return{apiUrl:Jt("LANGCHAIN_ENDPOINT")??(e?"https://api.smith.langchain.com":"http://localhost:1984"),apiKey:e,webUrl:void 0}}validateApiKeyIfHosted(){if(!Qs(this.apiUrl)&&!this.apiKey)throw new Error("API key must be provided when using hosted LangSmith API")}getHostUrl(){return this.webUrl?this.webUrl:Qs(this.apiUrl)?(this.webUrl="http://localhost","http://localhost"):this.apiUrl.split(".",1)[0].includes("dev")?(this.webUrl="https://dev.smith.langchain.com","https://dev.smith.langchain.com"):(this.webUrl="https://smith.langchain.com","https://smith.langchain.com")}get headers(){const e={};return this.apiKey&&(e["x-api-key"]=`${this.apiKey}`),e}async _getResponse(e,t){const n=(t==null?void 0:t.toString())??"",i=`${this.apiUrl}${e}?${n}`,s=await this.caller.call(fetch,i,{method:"GET",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms)});if(!s.ok)throw new Error(`Failed to fetch ${e}: ${s.status} ${s.statusText}`);return s}async _get(e,t){return(await this._getResponse(e,t)).json()}async*_getPaginated(e,t=new URLSearchParams){let n=Number(t.get("offset"))||0;const i=Number(t.get("limit"))||100;for(;;){t.set("offset",String(n)),t.set("limit",String(i));const s=`${this.apiUrl}${e}?${t}`,a=await this.caller.call(fetch,s,{method:"GET",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms)});if(!a.ok)throw new Error(`Failed to fetch ${e}: ${a.status} ${a.statusText}`);const o=await a.json();if(o.length===0||(yield o,o.length<i))break;n+=o.length}}async createRun(e){const t={...this.headers,"Content-Type":"application/json"},n=e.extra??{},i=await zl(),s=e.project_name;delete e.project_name;const a={session_name:s,...e,extra:{...e.extra,runtime:{...i,...n.runtime}}};a.inputs=ea(a.inputs),a.outputs&&(a.outputs=ta(a.outputs));const o=await this.caller.call(fetch,`${this.apiUrl}/runs`,{method:"POST",headers:t,body:JSON.stringify(a),signal:AbortSignal.timeout(this.timeout_ms)});await Et(o,"create run")}async updateRun(e,t){t.inputs&&(t.inputs=ea(t.inputs)),t.outputs&&(t.outputs=ta(t.outputs));const n={...this.headers,"Content-Type":"application/json"},i=await this.caller.call(fetch,`${this.apiUrl}/runs/${e}`,{method:"PATCH",headers:n,body:JSON.stringify(t),signal:AbortSignal.timeout(this.timeout_ms)});await Et(i,"update run")}async readRun(e,{loadChildRuns:t}={loadChildRuns:!1}){let n=await this._get(`/runs/${e}`);return t&&n.child_run_ids&&(n=await this._loadChildRuns(n)),n}async getRunUrl({runId:e,run:t,projectOpts:n}){if(t!==void 0){let i;t.session_id?i=t.session_id:n!=null&&n.projectName?i=(await this.readProject({projectName:n==null?void 0:n.projectName})).id:n!=null&&n.projectId?i=n==null?void 0:n.projectId:i=(await this.readProject({projectName:Jt("LANGCHAIN_PROJECT")||"default"})).id;const s=await this._getTenantId();return`${this.getHostUrl()}/o/${s}/projects/p/${i}/r/${t.id}?poll=true`}else if(e!==void 0){const i=await this.readRun(e);if(!i.app_path)throw new Error(`Run ${e} has no app_path`);return`${this.getHostUrl()}${i.app_path}`}else throw new Error("Must provide either runId or run")}async _loadChildRuns(e){const t=await Zl(this.listRuns({id:e.child_run_ids})),n={},i={};t.sort((s,a)=>((s==null?void 0:s.dotted_order)??"").localeCompare((a==null?void 0:a.dotted_order)??""));for(const s of t){if(s.parent_run_id===null||s.parent_run_id===void 0)throw new Error(`Child run ${s.id} has no parent`);s.parent_run_id in n||(n[s.parent_run_id]=[]),n[s.parent_run_id].push(s),i[s.id]=s}e.child_runs=n[e.id]||[];for(const s in n)s!==e.id&&(i[s].child_runs=n[s]);return e}async*listRuns({projectId:e,projectName:t,parentRunId:n,referenceExampleId:i,startTime:s,executionOrder:a,runType:o,error:u,id:c,limit:d,offset:f,query:m,filter:b}){const g=new URLSearchParams;let _=e;if(t){if(e)throw new Error("Only one of projectId or projectName may be given");_=(await this.readProject({projectName:t})).id}if(_&&g.append("session",_),n&&g.append("parent_run",n),i&&g.append("reference_example",i),s&&g.append("start_time",s.toISOString()),a&&g.append("execution_order",a.toString()),o&&g.append("run_type",o),u!==void 0&&g.append("error",u.toString()),c!==void 0)for(const h of c)g.append("id",h);d!==void 0&&g.append("limit",d.toString()),f!==void 0&&g.append("offset",f.toString()),m!==void 0&&g.append("query",m),b!==void 0&&g.append("filter",b);for await(const h of this._getPaginated("/runs",g))yield*h}async shareRun(e,{shareId:t}={}){const n={run_id:e,share_token:t||ht()},s=await(await this.caller.call(fetch,`${this.apiUrl}/runs/${e}/share`,{method:"PUT",headers:this.headers,body:JSON.stringify(n),signal:AbortSignal.timeout(this.timeout_ms)})).json();if(s===null||!("share_token"in s))throw new Error("Invalid response from server");return`${this.getHostUrl()}/public/${s.share_token}/r`}async unshareRun(e){const t=await this.caller.call(fetch,`${this.apiUrl}/runs/${e}/share`,{method:"DELETE",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms)});await Et(t,"unshare run")}async readRunSharedLink(e){const n=await(await this.caller.call(fetch,`${this.apiUrl}/runs/${e}/share`,{method:"GET",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms)})).json();if(!(n===null||!("share_token"in n)))return`${this.getHostUrl()}/public/${n.share_token}/r`}async listSharedRuns(e,{runIds:t}={}){const n=new URLSearchParams({share_token:e});if(t!==void 0)for(const a of t)n.append("id",a);return await(await this.caller.call(fetch,`${this.apiUrl}/public/${e}/runs${n}`,{method:"GET",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms)})).json()}async readDatasetSharedSchema(e,t){if(!e&&!t)throw new Error("Either datasetId or datasetName must be given");e||(e=(await this.readDataset({datasetName:t})).id);const i=await(await this.caller.call(fetch,`${this.apiUrl}/datasets/${e}/share`,{method:"GET",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms)})).json();return i.url=`${this.getHostUrl()}/public/${i.share_token}/d`,i}async shareDataset(e,t){if(!e&&!t)throw new Error("Either datasetId or datasetName must be given");e||(e=(await this.readDataset({datasetName:t})).id);const n={dataset_id:e},s=await(await this.caller.call(fetch,`${this.apiUrl}/datasets/${e}/share`,{method:"PUT",headers:this.headers,body:JSON.stringify(n),signal:AbortSignal.timeout(this.timeout_ms)})).json();return s.url=`${this.getHostUrl()}/public/${s.share_token}/d`,s}async unshareDataset(e){const t=await this.caller.call(fetch,`${this.apiUrl}/datasets/${e}/share`,{method:"DELETE",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms)});await Et(t,"unshare dataset")}async readSharedDataset(e){return await(await this.caller.call(fetch,`${this.apiUrl}/public/${e}/datasets`,{method:"GET",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms)})).json()}async createProject({projectName:e,projectExtra:t,upsert:n,referenceDatasetId:i}){const s=n?"?upsert=true":"",a=`${this.apiUrl}/sessions${s}`,o={name:e};t!==void 0&&(o.extra=t),i!==void 0&&(o.reference_dataset_id=i);const u=await this.caller.call(fetch,a,{method:"POST",headers:{...this.headers,"Content-Type":"application/json"},body:JSON.stringify(o),signal:AbortSignal.timeout(this.timeout_ms)}),c=await u.json();if(!u.ok)throw new Error(`Failed to create session ${e}: ${u.status} ${u.statusText}`);return c}async readProject({projectId:e,projectName:t}){let n="/sessions";const i=new URLSearchParams;if(e!==void 0&&t!==void 0)throw new Error("Must provide either projectName or projectId, not both");if(e!==void 0)n+=`/${e}`;else if(t!==void 0)i.append("name",t);else throw new Error("Must provide projectName or projectId");const s=await this._get(n,i);let a;if(Array.isArray(s)){if(s.length===0)throw new Error(`Project[id=${e}, name=${t}] not found`);a=s[0]}else a=s;return a}async _getTenantId(){if(this._tenantId!==null)return this._tenantId;const e=new URLSearchParams({limit:"1"});for await(const t of this._getPaginated("/sessions",e))return this._tenantId=t[0].tenant_id,t[0].tenant_id;throw new Error("No projects found to resolve tenant.")}async*listProjects({projectIds:e,name:t,nameContains:n,referenceDatasetId:i,referenceDatasetName:s,referenceFree:a}={}){const o=new URLSearchParams;if(e!==void 0)for(const u of e)o.append("id",u);if(t!==void 0&&o.append("name",t),n!==void 0&&o.append("name_contains",n),i!==void 0)o.append("reference_dataset",i);else if(s!==void 0){const u=await this.readDataset({datasetName:s});o.append("reference_dataset",u.id)}a!==void 0&&o.append("reference_free",a.toString());for await(const u of this._getPaginated("/sessions",o))yield*u}async deleteProject({projectId:e,projectName:t}){let n;if(e===void 0&&t===void 0)throw new Error("Must provide projectName or projectId");if(e!==void 0&&t!==void 0)throw new Error("Must provide either projectName or projectId, not both");e===void 0?n=(await this.readProject({projectName:t})).id:n=e;const i=await this.caller.call(fetch,`${this.apiUrl}/sessions/${n}`,{method:"DELETE",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms)});await Et(i,`delete session ${n} (${t})`)}async uploadCsv({csvFile:e,fileName:t,inputKeys:n,outputKeys:i,description:s,dataType:a,name:o}){const u=`${this.apiUrl}/datasets/upload`,c=new FormData;c.append("file",e,t),n.forEach(m=>{c.append("input_keys",m)}),i.forEach(m=>{c.append("output_keys",m)}),s&&c.append("description",s),a&&c.append("data_type",a),o&&c.append("name",o);const d=await this.caller.call(fetch,u,{method:"POST",headers:this.headers,body:c,signal:AbortSignal.timeout(this.timeout_ms)});if(!d.ok){const m=await d.json();throw m.detail&&m.detail.includes("already exists")?new Error(`Dataset ${t} already exists`):new Error(`Failed to upload CSV: ${d.status} ${d.statusText}`)}return await d.json()}async createDataset(e,{description:t,dataType:n}={}){const i={name:e,description:t};n&&(i.data_type=n);const s=await this.caller.call(fetch,`${this.apiUrl}/datasets`,{method:"POST",headers:{...this.headers,"Content-Type":"application/json"},body:JSON.stringify(i),signal:AbortSignal.timeout(this.timeout_ms)});if(!s.ok){const o=await s.json();throw o.detail&&o.detail.includes("already exists")?new Error(`Dataset ${e} already exists`):new Error(`Failed to create dataset ${s.status} ${s.statusText}`)}return await s.json()}async readDataset({datasetId:e,datasetName:t}){let n="/datasets";const i=new URLSearchParams({limit:"1"});if(e!==void 0&&t!==void 0)throw new Error("Must provide either datasetName or datasetId, not both");if(e!==void 0)n+=`/${e}`;else if(t!==void 0)i.append("name",t);else throw new Error("Must provide datasetName or datasetId");const s=await this._get(n,i);let a;if(Array.isArray(s)){if(s.length===0)throw new Error(`Dataset[id=${e}, name=${t}] not found`);a=s[0]}else a=s;return a}async readDatasetOpenaiFinetuning({datasetId:e,datasetName:t}){const n="/datasets";if(e===void 0)if(t!==void 0)e=(await this.readDataset({datasetName:t})).id;else throw new Error("Must provide datasetName or datasetId");return(await(await this._getResponse(`${n}/${e}/openai_ft`)).text()).trim().split(`
`).map(o=>JSON.parse(o))}async*listDatasets({limit:e=100,offset:t=0,datasetIds:n,datasetName:i,datasetNameContains:s}={}){const a="/datasets",o=new URLSearchParams({limit:e.toString(),offset:t.toString()});if(n!==void 0)for(const u of n)o.append("id",u);i!==void 0&&o.append("name",i),s!==void 0&&o.append("name_contains",s);for await(const u of this._getPaginated(a,o))yield*u}async deleteDataset({datasetId:e,datasetName:t}){let n="/datasets",i=e;if(e!==void 0&&t!==void 0)throw new Error("Must provide either datasetName or datasetId, not both");if(t!==void 0&&(i=(await this.readDataset({datasetName:t})).id),i!==void 0)n+=`/${i}`;else throw new Error("Must provide datasetName or datasetId");const s=await this.caller.call(fetch,this.apiUrl+n,{method:"DELETE",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms)});if(!s.ok)throw new Error(`Failed to delete ${n}: ${s.status} ${s.statusText}`);await s.json()}async createExample(e,t,{datasetId:n,datasetName:i,createdAt:s,exampleId:a}){let o=n;if(o===void 0&&i===void 0)throw new Error("Must provide either datasetName or datasetId");if(o!==void 0&&i!==void 0)throw new Error("Must provide either datasetName or datasetId, not both");o===void 0&&(o=(await this.readDataset({datasetName:i})).id);const c={dataset_id:o,inputs:e,outputs:t,created_at:(s||new Date).toISOString(),id:a},d=await this.caller.call(fetch,`${this.apiUrl}/examples`,{method:"POST",headers:{...this.headers,"Content-Type":"application/json"},body:JSON.stringify(c),signal:AbortSignal.timeout(this.timeout_ms)});if(!d.ok)throw new Error(`Failed to create example: ${d.status} ${d.statusText}`);return await d.json()}async createLLMExample(e,t,n){return this.createExample({input:e},{output:t},n)}async createChatExample(e,t,n){const i=e.map(a=>Js(a)?Xs(a):a),s=Js(t)?Xs(t):t;return this.createExample({input:i},{output:s},n)}async readExample(e){const t=`/examples/${e}`;return await this._get(t)}async*listExamples({datasetId:e,datasetName:t,exampleIds:n}={}){let i;if(e!==void 0&&t!==void 0)throw new Error("Must provide either datasetName or datasetId, not both");if(e!==void 0)i=e;else if(t!==void 0)i=(await this.readDataset({datasetName:t})).id;else throw new Error("Must provide a datasetName or datasetId");const s=new URLSearchParams({dataset:i});if(n!==void 0)for(const a of n)s.append("id",a);for await(const a of this._getPaginated("/examples",s))yield*a}async deleteExample(e){const t=`/examples/${e}`,n=await this.caller.call(fetch,this.apiUrl+t,{method:"DELETE",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms)});if(!n.ok)throw new Error(`Failed to delete ${t}: ${n.status} ${n.statusText}`);await n.json()}async updateExample(e,t){const n=await this.caller.call(fetch,`${this.apiUrl}/examples/${e}`,{method:"PATCH",headers:{...this.headers,"Content-Type":"application/json"},body:JSON.stringify(t),signal:AbortSignal.timeout(this.timeout_ms)});if(!n.ok)throw new Error(`Failed to update example ${e}: ${n.status} ${n.statusText}`);return await n.json()}async evaluateRun(e,t,{sourceInfo:n,loadChildRuns:i}={loadChildRuns:!1}){let s;if(typeof e=="string")s=await this.readRun(e,{loadChildRuns:i});else if(typeof e=="object"&&"id"in e)s=e;else throw new Error(`Invalid run type: ${typeof e}`);let a;s.reference_example_id!==null&&s.reference_example_id!==void 0&&(a=await this.readExample(s.reference_example_id));const o=await t.evaluateRun(s,a);let u=n??{};return o.evaluatorInfo&&(u={...u,...o.evaluatorInfo}),await this.createFeedback(s.id,o.key,{score:o.score,value:o.value,comment:o.comment,correction:o.correction,sourceInfo:u,feedbackSourceType:"model"})}async createFeedback(e,t,{score:n,value:i,correction:s,comment:a,sourceInfo:o,feedbackSourceType:u="api",sourceRunId:c,feedbackId:d,eager:f=!1}){const m={type:u??"api",metadata:o??{}};c!==void 0&&(m==null?void 0:m.metadata)!==void 0&&!m.metadata.__run&&(m.metadata.__run={run_id:c});const b={id:d??ht(),run_id:e,key:t,score:n,value:i,correction:s,comment:a,feedback_source:m},g=`${this.apiUrl}/feedback`+(f?"/eager":""),_=await this.caller.call(fetch,g,{method:"POST",headers:{...this.headers,"Content-Type":"application/json"},body:JSON.stringify(b),signal:AbortSignal.timeout(this.timeout_ms)});return await Et(_,"create feedback"),b}async updateFeedback(e,{score:t,value:n,correction:i,comment:s}){const a={};t!=null&&(a.score=t),n!=null&&(a.value=n),i!=null&&(a.correction=i),s!=null&&(a.comment=s);const o=await this.caller.call(fetch,`${this.apiUrl}/feedback/${e}`,{method:"PATCH",headers:{...this.headers,"Content-Type":"application/json"},body:JSON.stringify(a),signal:AbortSignal.timeout(this.timeout_ms)});await Et(o,"update feedback")}async readFeedback(e){const t=`/feedback/${e}`;return await this._get(t)}async deleteFeedback(e){const t=`/feedback/${e}`,n=await this.caller.call(fetch,this.apiUrl+t,{method:"DELETE",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms)});if(!n.ok)throw new Error(`Failed to delete ${t}: ${n.status} ${n.statusText}`);await n.json()}async*listFeedback({runIds:e,feedbackKeys:t,feedbackSourceTypes:n}={}){const i=new URLSearchParams;if(e&&i.append("run",e.join(",")),t)for(const s of t)i.append("key",s);if(n)for(const s of n)i.append("source",s);for await(const s of this._getPaginated("/feedback",i))yield*s}}const Vl=()=>typeof window<"u"&&typeof window.document<"u",Fl=()=>typeof globalThis=="object"&&globalThis.constructor&&globalThis.constructor.name==="DedicatedWorkerGlobalScope",Kl=()=>typeof window<"u"&&window.name==="nodejs"||typeof navigator<"u"&&(navigator.userAgent.includes("Node.js")||navigator.userAgent.includes("jsdom")),No=()=>typeof Deno<"u",ql=()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"&&!No(),Hl=()=>{let r;return Vl()?r="browser":ql()?r="node":Fl()?r="webworker":Kl()?r="jsdom":No()?r="deno":r="other",r};let yi;async function Wl(){return yi===void 0&&(yi={library:"langchain-js",runtime:Hl()}),yi}function ce(r){var e;try{return typeof process<"u"?(e=process.env)==null?void 0:e[r]:void 0}catch{return}}class Gl extends Ln{constructor(e={}){super(e),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"langchain_tracer"}),Object.defineProperty(this,"projectName",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"exampleId",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"client",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const{exampleId:t,projectName:n,client:i}=e;this.projectName=n??ce("LANGCHAIN_PROJECT")??ce("LANGCHAIN_SESSION"),this.exampleId=t,this.client=i??new us({})}async _convertToCreate(e,t=void 0){return{...e,extra:{...e.extra,runtime:await Wl()},child_runs:void 0,session_name:this.projectName,reference_example_id:e.parent_run_id?void 0:t}}async persistRun(e){}async _persistRunSingle(e){const t=await this._convertToCreate(e,this.exampleId);await this.client.createRun(t)}async _updateRunSingle(e){const t={end_time:e.end_time,error:e.error,outputs:e.outputs,events:e.events,inputs:e.inputs};await this.client.updateRun(e.id,t)}async onRetrieverStart(e){await this._persistRunSingle(e)}async onRetrieverEnd(e){await this._updateRunSingle(e)}async onRetrieverError(e){await this._updateRunSingle(e)}async onLLMStart(e){await this._persistRunSingle(e)}async onLLMEnd(e){await this._updateRunSingle(e)}async onLLMError(e){await this._updateRunSingle(e)}async onChainStart(e){await this._persistRunSingle(e)}async onChainEnd(e){await this._updateRunSingle(e)}async onChainError(e){await this._updateRunSingle(e)}async onToolStart(e){await this._persistRunSingle(e)}async onToolEnd(e){await this._updateRunSingle(e)}async onToolError(e){await this._updateRunSingle(e)}}function Mn(r,e="Human",t="AI"){const n=[];for(const i of r){let s;if(i._getType()==="human")s=e;else if(i._getType()==="ai")s=t;else if(i._getType()==="system")s="System";else if(i._getType()==="function")s="Function";else if(i._getType()==="generic")s=i.role;else throw new Error(`Got unsupported message type: ${i}`);const a=i.name?`${i.name}, `:"";n.push(`${s}: ${a}${i.content}`)}return n.join(`
`)}class Yl extends Ln{constructor(){super(),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"langchain_tracer"}),Object.defineProperty(this,"endpoint",{enumerable:!0,configurable:!0,writable:!0,value:ce("LANGCHAIN_ENDPOINT")||"http://localhost:1984"}),Object.defineProperty(this,"headers",{enumerable:!0,configurable:!0,writable:!0,value:{"Content-Type":"application/json"}}),Object.defineProperty(this,"session",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const e=ce("LANGCHAIN_API_KEY");e&&(this.headers["x-api-key"]=e)}async newSession(e){const t={start_time:Date.now(),name:e},n=await this.persistSession(t);return this.session=n,n}async loadSession(e){const t=`${this.endpoint}/sessions?name=${e}`;return this._handleSessionResponse(t)}async loadDefaultSession(){const e=`${this.endpoint}/sessions?name=default`;return this._handleSessionResponse(e)}async convertV2RunToRun(e){var s;const t=this.session??await this.loadDefaultSession(),n=e.serialized;let i;if(e.run_type==="llm"){const a=e.inputs.prompts?e.inputs.prompts:e.inputs.messages.map(u=>Mn(u));i={uuid:e.id,start_time:e.start_time,end_time:e.end_time,execution_order:e.execution_order,child_execution_order:e.child_execution_order,serialized:n,type:e.run_type,session_id:t.id,prompts:a,response:e.outputs}}else if(e.run_type==="chain"){const a=await Promise.all(e.child_runs.map(u=>this.convertV2RunToRun(u)));i={uuid:e.id,start_time:e.start_time,end_time:e.end_time,execution_order:e.execution_order,child_execution_order:e.child_execution_order,serialized:n,type:e.run_type,session_id:t.id,inputs:e.inputs,outputs:e.outputs,child_llm_runs:a.filter(u=>u.type==="llm"),child_chain_runs:a.filter(u=>u.type==="chain"),child_tool_runs:a.filter(u=>u.type==="tool")}}else if(e.run_type==="tool"){const a=await Promise.all(e.child_runs.map(u=>this.convertV2RunToRun(u)));i={uuid:e.id,start_time:e.start_time,end_time:e.end_time,execution_order:e.execution_order,child_execution_order:e.child_execution_order,serialized:n,type:e.run_type,session_id:t.id,tool_input:e.inputs.input,output:(s=e.outputs)==null?void 0:s.output,action:JSON.stringify(n),child_llm_runs:a.filter(u=>u.type==="llm"),child_chain_runs:a.filter(u=>u.type==="chain"),child_tool_runs:a.filter(u=>u.type==="tool")}}else throw new Error(`Unknown run type: ${e.run_type}`);return i}async persistRun(e){let t,n;e.run_type!==void 0?n=await this.convertV2RunToRun(e):n=e,n.type==="llm"?t=`${this.endpoint}/llm-runs`:n.type==="chain"?t=`${this.endpoint}/chain-runs`:t=`${this.endpoint}/tool-runs`;const i=await fetch(t,{method:"POST",headers:this.headers,body:JSON.stringify(n)});i.ok||console.error(`Failed to persist run: ${i.status} ${i.statusText}`)}async persistSession(e){const t=`${this.endpoint}/sessions`,n=await fetch(t,{method:"POST",headers:this.headers,body:JSON.stringify(e)});return n.ok?{id:(await n.json()).id,...e}:(console.error(`Failed to persist session: ${n.status} ${n.statusText}, using default session.`),{id:1,...e})}async _handleSessionResponse(e){const t=await fetch(e,{method:"GET",headers:this.headers});let n;if(!t.ok)return console.error(`Failed to load session: ${t.status} ${t.statusText}`),n={id:1,start_time:Date.now()},this.session=n,n;const i=await t.json();return i.length===0?(n={id:1,start_time:Date.now()},this.session=n,n):([n]=i,this.session=n,n)}}async function Jl(r){const e=new Yl;return r?await e.loadSession(r):await e.loadDefaultSession(),e}async function Xl(){return new Gl}let bi;function Ql(){const r="default"in pt?pt.default:pt;return new r({autoStart:!0,concurrency:1})}async function Re(r,e){e===!0?await r():(typeof bi>"u"&&(bi=Ql()),bi.add(r))}function ed(r){return r?Array.isArray(r)||"name"in r?{callbacks:r}:r:{}}class td{setHandler(e){return this.setHandlers([e])}}class $n{constructor(e,t,n,i,s,a,o,u){Object.defineProperty(this,"runId",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"handlers",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,"inheritableHandlers",{enumerable:!0,configurable:!0,writable:!0,value:n}),Object.defineProperty(this,"tags",{enumerable:!0,configurable:!0,writable:!0,value:i}),Object.defineProperty(this,"inheritableTags",{enumerable:!0,configurable:!0,writable:!0,value:s}),Object.defineProperty(this,"metadata",{enumerable:!0,configurable:!0,writable:!0,value:a}),Object.defineProperty(this,"inheritableMetadata",{enumerable:!0,configurable:!0,writable:!0,value:o}),Object.defineProperty(this,"_parentRunId",{enumerable:!0,configurable:!0,writable:!0,value:u})}async handleText(e){await Promise.all(this.handlers.map(t=>Re(async()=>{var n;try{await((n=t.handleText)==null?void 0:n.call(t,e,this.runId,this._parentRunId,this.tags))}catch(i){console.error(`Error in handler ${t.constructor.name}, handleText: ${i}`)}},t.awaitHandlers)))}}class rd extends $n{getChild(e){const t=new Ve(this.runId);return t.setHandlers(this.inheritableHandlers),t.addTags(this.inheritableTags),t.addMetadata(this.inheritableMetadata),e&&t.addTags([e],!1),t}async handleRetrieverEnd(e){await Promise.all(this.handlers.map(t=>Re(async()=>{var n;if(!t.ignoreRetriever)try{await((n=t.handleRetrieverEnd)==null?void 0:n.call(t,e,this.runId,this._parentRunId,this.tags))}catch{console.error(`Error in handler ${t.constructor.name}, handleRetriever`)}},t.awaitHandlers)))}async handleRetrieverError(e){await Promise.all(this.handlers.map(t=>Re(async()=>{var n;if(!t.ignoreRetriever)try{await((n=t.handleRetrieverError)==null?void 0:n.call(t,e,this.runId,this._parentRunId,this.tags))}catch(i){console.error(`Error in handler ${t.constructor.name}, handleRetrieverError: ${i}`)}},t.awaitHandlers)))}}class ra extends $n{async handleLLMNewToken(e,t,n,i,s,a){await Promise.all(this.handlers.map(o=>Re(async()=>{var u;if(!o.ignoreLLM)try{await((u=o.handleLLMNewToken)==null?void 0:u.call(o,e,t??{prompt:0,completion:0},this.runId,this._parentRunId,this.tags,a))}catch(c){console.error(`Error in handler ${o.constructor.name}, handleLLMNewToken: ${c}`)}},o.awaitHandlers)))}async handleLLMError(e){await Promise.all(this.handlers.map(t=>Re(async()=>{var n;if(!t.ignoreLLM)try{await((n=t.handleLLMError)==null?void 0:n.call(t,e,this.runId,this._parentRunId,this.tags))}catch(i){console.error(`Error in handler ${t.constructor.name}, handleLLMError: ${i}`)}},t.awaitHandlers)))}async handleLLMEnd(e){await Promise.all(this.handlers.map(t=>Re(async()=>{var n;if(!t.ignoreLLM)try{await((n=t.handleLLMEnd)==null?void 0:n.call(t,e,this.runId,this._parentRunId,this.tags))}catch(i){console.error(`Error in handler ${t.constructor.name}, handleLLMEnd: ${i}`)}},t.awaitHandlers)))}}class nd extends $n{getChild(e){const t=new Ve(this.runId);return t.setHandlers(this.inheritableHandlers),t.addTags(this.inheritableTags),t.addMetadata(this.inheritableMetadata),e&&t.addTags([e],!1),t}async handleChainError(e,t,n,i,s){await Promise.all(this.handlers.map(a=>Re(async()=>{var o;if(!a.ignoreChain)try{await((o=a.handleChainError)==null?void 0:o.call(a,e,this.runId,this._parentRunId,this.tags,s))}catch(u){console.error(`Error in handler ${a.constructor.name}, handleChainError: ${u}`)}},a.awaitHandlers)))}async handleChainEnd(e,t,n,i,s){await Promise.all(this.handlers.map(a=>Re(async()=>{var o;if(!a.ignoreChain)try{await((o=a.handleChainEnd)==null?void 0:o.call(a,e,this.runId,this._parentRunId,this.tags,s))}catch(u){console.error(`Error in handler ${a.constructor.name}, handleChainEnd: ${u}`)}},a.awaitHandlers)))}async handleAgentAction(e){await Promise.all(this.handlers.map(t=>Re(async()=>{var n;if(!t.ignoreAgent)try{await((n=t.handleAgentAction)==null?void 0:n.call(t,e,this.runId,this._parentRunId,this.tags))}catch(i){console.error(`Error in handler ${t.constructor.name}, handleAgentAction: ${i}`)}},t.awaitHandlers)))}async handleAgentEnd(e){await Promise.all(this.handlers.map(t=>Re(async()=>{var n;if(!t.ignoreAgent)try{await((n=t.handleAgentEnd)==null?void 0:n.call(t,e,this.runId,this._parentRunId,this.tags))}catch(i){console.error(`Error in handler ${t.constructor.name}, handleAgentEnd: ${i}`)}},t.awaitHandlers)))}}class id extends $n{getChild(e){const t=new Ve(this.runId);return t.setHandlers(this.inheritableHandlers),t.addTags(this.inheritableTags),t.addMetadata(this.inheritableMetadata),e&&t.addTags([e],!1),t}async handleToolError(e){await Promise.all(this.handlers.map(t=>Re(async()=>{var n;if(!t.ignoreAgent)try{await((n=t.handleToolError)==null?void 0:n.call(t,e,this.runId,this._parentRunId,this.tags))}catch(i){console.error(`Error in handler ${t.constructor.name}, handleToolError: ${i}`)}},t.awaitHandlers)))}async handleToolEnd(e){await Promise.all(this.handlers.map(t=>Re(async()=>{var n;if(!t.ignoreAgent)try{await((n=t.handleToolEnd)==null?void 0:n.call(t,e,this.runId,this._parentRunId,this.tags))}catch(i){console.error(`Error in handler ${t.constructor.name}, handleToolEnd: ${i}`)}},t.awaitHandlers)))}}class Ve extends td{constructor(e){super(),Object.defineProperty(this,"handlers",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"inheritableHandlers",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"tags",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"inheritableTags",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"metadata",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,"inheritableMetadata",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"callback_manager"}),Object.defineProperty(this,"_parentRunId",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.handlers=[],this.inheritableHandlers=[],this._parentRunId=e}async handleLLMStart(e,t,n=void 0,i=void 0,s=void 0,a=void 0,o=void 0,u=void 0){return Promise.all(t.map(async c=>{const d=ht();return await Promise.all(this.handlers.map(f=>Re(async()=>{var m;if(!f.ignoreLLM)try{await((m=f.handleLLMStart)==null?void 0:m.call(f,e,[c],d,this._parentRunId,s,this.tags,this.metadata,u))}catch(b){console.error(`Error in handler ${f.constructor.name}, handleLLMStart: ${b}`)}},f.awaitHandlers))),new ra(d,this.handlers,this.inheritableHandlers,this.tags,this.inheritableTags,this.metadata,this.inheritableMetadata,this._parentRunId)}))}async handleChatModelStart(e,t,n=void 0,i=void 0,s=void 0,a=void 0,o=void 0,u=void 0){return Promise.all(t.map(async c=>{const d=ht();return await Promise.all(this.handlers.map(f=>Re(async()=>{var m,b;if(!f.ignoreLLM)try{if(f.handleChatModelStart)await((m=f.handleChatModelStart)==null?void 0:m.call(f,e,[c],d,this._parentRunId,s,this.tags,this.metadata,u));else if(f.handleLLMStart){const g=Mn(c);await((b=f.handleLLMStart)==null?void 0:b.call(f,e,[g],d,this._parentRunId,s,this.tags,this.metadata,u))}}catch(g){console.error(`Error in handler ${f.constructor.name}, handleLLMStart: ${g}`)}},f.awaitHandlers))),new ra(d,this.handlers,this.inheritableHandlers,this.tags,this.inheritableTags,this.metadata,this.inheritableMetadata,this._parentRunId)}))}async handleChainStart(e,t,n=ht(),i=void 0,s=void 0,a=void 0,o=void 0){return await Promise.all(this.handlers.map(u=>Re(async()=>{var c;if(!u.ignoreChain)try{await((c=u.handleChainStart)==null?void 0:c.call(u,e,t,n,this._parentRunId,this.tags,this.metadata,i,o))}catch(d){console.error(`Error in handler ${u.constructor.name}, handleChainStart: ${d}`)}},u.awaitHandlers))),new nd(n,this.handlers,this.inheritableHandlers,this.tags,this.inheritableTags,this.metadata,this.inheritableMetadata,this._parentRunId)}async handleToolStart(e,t,n=ht(),i=void 0,s=void 0,a=void 0,o=void 0){return await Promise.all(this.handlers.map(u=>Re(async()=>{var c;if(!u.ignoreAgent)try{await((c=u.handleToolStart)==null?void 0:c.call(u,e,t,n,this._parentRunId,this.tags,this.metadata,o))}catch(d){console.error(`Error in handler ${u.constructor.name}, handleToolStart: ${d}`)}},u.awaitHandlers))),new id(n,this.handlers,this.inheritableHandlers,this.tags,this.inheritableTags,this.metadata,this.inheritableMetadata,this._parentRunId)}async handleRetrieverStart(e,t,n=ht(),i=void 0,s=void 0,a=void 0,o=void 0){return await Promise.all(this.handlers.map(u=>Re(async()=>{var c;if(!u.ignoreRetriever)try{await((c=u.handleRetrieverStart)==null?void 0:c.call(u,e,t,n,this._parentRunId,this.tags,this.metadata,o))}catch(d){console.error(`Error in handler ${u.constructor.name}, handleRetrieverStart: ${d}`)}},u.awaitHandlers))),new rd(n,this.handlers,this.inheritableHandlers,this.tags,this.inheritableTags,this.metadata,this.inheritableMetadata,this._parentRunId)}addHandler(e,t=!0){this.handlers.push(e),t&&this.inheritableHandlers.push(e)}removeHandler(e){this.handlers=this.handlers.filter(t=>t!==e),this.inheritableHandlers=this.inheritableHandlers.filter(t=>t!==e)}setHandlers(e,t=!0){this.handlers=[],this.inheritableHandlers=[];for(const n of e)this.addHandler(n,t)}addTags(e,t=!0){this.removeTags(e),this.tags.push(...e),t&&this.inheritableTags.push(...e)}removeTags(e){this.tags=this.tags.filter(t=>!e.includes(t)),this.inheritableTags=this.inheritableTags.filter(t=>!e.includes(t))}addMetadata(e,t=!0){this.metadata={...this.metadata,...e},t&&(this.inheritableMetadata={...this.inheritableMetadata,...e})}removeMetadata(e){for(const t of Object.keys(e))delete this.metadata[t],delete this.inheritableMetadata[t]}copy(e=[],t=!0){const n=new Ve(this._parentRunId);for(const i of this.handlers){const s=this.inheritableHandlers.includes(i);n.addHandler(i,s)}for(const i of this.tags){const s=this.inheritableTags.includes(i);n.addTags([i],s)}for(const i of Object.keys(this.metadata)){const s=Object.keys(this.inheritableMetadata).includes(i);n.addMetadata({[i]:this.metadata[i]},s)}for(const i of e)n.handlers.filter(s=>s.name==="console_callback_handler").some(s=>s.name===i.name)||n.addHandler(i,t);return n}static fromHandlers(e){class t extends Dr{constructor(){super(),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:ht()}),Object.assign(this,e)}}const n=new this;return n.addHandler(new t),n}static async configure(e,t,n,i,s,a,o){let u;(e||t)&&(Array.isArray(e)||!e?(u=new Ve,u.setHandlers((e==null?void 0:e.map(na))??[],!0)):u=e,u=u.copy(Array.isArray(t)?t.map(na):t==null?void 0:t.handlers,!1));const c=ce("LANGCHAIN_VERBOSE")||(o==null?void 0:o.verbose),d=ce("LANGCHAIN_TRACING_V2")==="true",f=d||(ce("LANGCHAIN_TRACING")??!1);if(c||f){if(u||(u=new Ve),c&&!u.handlers.some(m=>m.name===Ys.prototype.name)){const m=new Ys;u.addHandler(m,!0)}if(f&&!u.handlers.some(m=>m.name==="langchain_tracer"))if(d)u.addHandler(await Xl(),!0);else{const m=ce("LANGCHAIN_PROJECT")&&ce("LANGCHAIN_SESSION");u.addHandler(await Jl(m),!0)}}return(n||i)&&u&&(u.addTags(n??[]),u.addTags(i??[],!1)),(s||a)&&u&&(u.addMetadata(s??{}),u.addMetadata(a??{},!1)),u}}function na(r){return"name"in r?r:Dr.fromMethods(r)}/*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2017-2022 Joachim Wester
 * MIT licensed
 */const sd=Object.prototype.hasOwnProperty;function ad(r,e){return sd.call(r,e)}function od(r){if(Array.isArray(r)){const t=new Array(r.length);for(let n=0;n<t.length;n++)t[n]=""+n;return t}if(Object.keys)return Object.keys(r);let e=[];for(let t in r)ad(r,t)&&e.push(t);return e}function tr(r){switch(typeof r){case"object":return JSON.parse(JSON.stringify(r));case"undefined":return null;default:return r}}function $i(r){let e=0;const t=r.length;let n;for(;e<t;){if(n=r.charCodeAt(e),n>=48&&n<=57){e++;continue}return!1}return!0}function ud(r){return r.replace(/~1/g,"/").replace(/~0/g,"~")}function zi(r){if(r===void 0)return!0;if(r){if(Array.isArray(r)){for(let t=0,n=r.length;t<n;t++)if(zi(r[t]))return!0}else if(typeof r=="object"){const t=od(r),n=t.length;for(var e=0;e<n;e++)if(zi(r[t[e]]))return!0}}return!1}function ia(r,e){const t=[r];for(const n in e){const i=typeof e[n]=="object"?JSON.stringify(e[n],null,2):e[n];typeof i<"u"&&t.push(`${n}: ${i}`)}return t.join(`
`)}class cd extends Error{constructor(e,t,n,i,s){super(ia(e,{name:t,index:n,operation:i,tree:s})),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,"index",{enumerable:!0,configurable:!0,writable:!0,value:n}),Object.defineProperty(this,"operation",{enumerable:!0,configurable:!0,writable:!0,value:i}),Object.defineProperty(this,"tree",{enumerable:!0,configurable:!0,writable:!0,value:s}),Object.setPrototypeOf(this,new.target.prototype),this.message=ia(e,{name:t,index:n,operation:i,tree:s})}}const Te=cd,qt={add:function(r,e,t){return r[e]=this.value,{newDocument:t}},remove:function(r,e,t){var n=r[e];return delete r[e],{newDocument:t,removed:n}},replace:function(r,e,t){var n=r[e];return r[e]=this.value,{newDocument:t,removed:n}},move:function(r,e,t){let n=Bi(t,this.path);n&&(n=tr(n));const i=Pr(t,{op:"remove",path:this.from}).removed;return Pr(t,{op:"add",path:this.path,value:i}),{newDocument:t,removed:n}},copy:function(r,e,t){const n=Bi(t,this.from);return Pr(t,{op:"add",path:this.path,value:tr(n)}),{newDocument:t}},test:function(r,e,t){return{newDocument:t,test:rn(r[e],this.value)}},_get:function(r,e,t){return this.value=r[e],{newDocument:t}}};var ld={add:function(r,e,t){return $i(e)?r.splice(e,0,this.value):r[e]=this.value,{newDocument:t,index:e}},remove:function(r,e,t){var n=r.splice(e,1);return{newDocument:t,removed:n[0]}},replace:function(r,e,t){var n=r[e];return r[e]=this.value,{newDocument:t,removed:n}},move:qt.move,copy:qt.copy,test:qt.test,_get:qt._get};function Bi(r,e){if(e=="")return r;var t={op:"_get",path:e};return Pr(r,t),t.value}function Pr(r,e,t=!1,n=!0,i=!0,s=0){if(t&&(typeof t=="function"?t(e,0,r,e.path):Zi(e,0)),e.path===""){let a={newDocument:r};if(e.op==="add")return a.newDocument=e.value,a;if(e.op==="replace")return a.newDocument=e.value,a.removed=r,a;if(e.op==="move"||e.op==="copy")return a.newDocument=Bi(r,e.from),e.op==="move"&&(a.removed=r),a;if(e.op==="test"){if(a.test=rn(r,e.value),a.test===!1)throw new Te("Test operation failed","TEST_OPERATION_FAILED",s,e,r);return a.newDocument=r,a}else{if(e.op==="remove")return a.removed=r,a.newDocument=null,a;if(e.op==="_get")return e.value=r,a;if(t)throw new Te("Operation `op` property is not one of operations defined in RFC-6902","OPERATION_OP_INVALID",s,e,r);return a}}else{n||(r=tr(r));const o=(e.path||"").split("/");let u=r,c=1,d=o.length,f,m,b;for(typeof t=="function"?b=t:b=Zi;;){if(m=o[c],m&&m.indexOf("~")!=-1&&(m=ud(m)),i&&(m=="__proto__"||m=="prototype"&&c>0&&o[c-1]=="constructor"))throw new TypeError("JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README");if(t&&f===void 0&&(u[m]===void 0?f=o.slice(0,c).join("/"):c==d-1&&(f=e.path),f!==void 0&&b(e,0,r,f)),c++,Array.isArray(u)){if(m==="-")m=u.length;else{if(t&&!$i(m))throw new Te("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index","OPERATION_PATH_ILLEGAL_ARRAY_INDEX",s,e,r);$i(m)&&(m=~~m)}if(c>=d){if(t&&e.op==="add"&&m>u.length)throw new Te("The specified index MUST NOT be greater than the number of elements in the array","OPERATION_VALUE_OUT_OF_BOUNDS",s,e,r);const g=ld[e.op].call(e,u,m,r);if(g.test===!1)throw new Te("Test operation failed","TEST_OPERATION_FAILED",s,e,r);return g}}else if(c>=d){const g=qt[e.op].call(e,u,m,r);if(g.test===!1)throw new Te("Test operation failed","TEST_OPERATION_FAILED",s,e,r);return g}if(u=u[m],t&&c<d&&(!u||typeof u!="object"))throw new Te("Cannot perform operation at the desired path","OPERATION_PATH_UNRESOLVABLE",s,e,r)}}}function cs(r,e,t,n=!0,i=!0){if(t&&!Array.isArray(e))throw new Te("Patch sequence must be an array","SEQUENCE_NOT_AN_ARRAY");n||(r=tr(r));const s=new Array(e.length);for(let a=0,o=e.length;a<o;a++)s[a]=Pr(r,e[a],t,!0,i,a),r=s[a].newDocument;return s.newDocument=r,s}function Zi(r,e,t,n){if(typeof r!="object"||r===null||Array.isArray(r))throw new Te("Operation is not an object","OPERATION_NOT_AN_OBJECT",e,r,t);if(qt[r.op]){if(typeof r.path!="string")throw new Te("Operation `path` property is not a string","OPERATION_PATH_INVALID",e,r,t);if(r.path.indexOf("/")!==0&&r.path.length>0)throw new Te('Operation `path` property must start with "/"',"OPERATION_PATH_INVALID",e,r,t);if((r.op==="move"||r.op==="copy")&&typeof r.from!="string")throw new Te("Operation `from` property is not present (applicable in `move` and `copy` operations)","OPERATION_FROM_REQUIRED",e,r,t);if((r.op==="add"||r.op==="replace"||r.op==="test")&&r.value===void 0)throw new Te("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)","OPERATION_VALUE_REQUIRED",e,r,t);if((r.op==="add"||r.op==="replace"||r.op==="test")&&zi(r.value))throw new Te("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)","OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED",e,r,t);if(t){if(r.op=="add"){var i=r.path.split("/").length,s=n.split("/").length;if(i!==s+1&&i!==s)throw new Te("Cannot perform an `add` operation at the desired path","OPERATION_PATH_CANNOT_ADD",e,r,t)}else if(r.op==="replace"||r.op==="remove"||r.op==="_get"){if(r.path!==n)throw new Te("Cannot perform the operation at a path that does not exist","OPERATION_PATH_UNRESOLVABLE",e,r,t)}else if(r.op==="move"||r.op==="copy"){var a={op:"_get",path:r.from,value:void 0},o=dd([a],t);if(o&&o.name==="OPERATION_PATH_UNRESOLVABLE")throw new Te("Cannot perform the operation from a path that does not exist","OPERATION_FROM_UNRESOLVABLE",e,r,t)}}}else throw new Te("Operation `op` property is not one of operations defined in RFC-6902","OPERATION_OP_INVALID",e,r,t)}function dd(r,e,t){try{if(!Array.isArray(r))throw new Te("Patch sequence must be an array","SEQUENCE_NOT_AN_ARRAY");if(e)cs(tr(e),tr(r),t||!0);else{t=t||Zi;for(var n=0;n<r.length;n++)t(r[n],n,e,void 0)}}catch(i){if(i instanceof Te)return i;throw i}}function rn(r,e){if(r===e)return!0;if(r&&e&&typeof r=="object"&&typeof e=="object"){var t=Array.isArray(r),n=Array.isArray(e),i,s,a;if(t&&n){if(s=r.length,s!=e.length)return!1;for(i=s;i--!==0;)if(!rn(r[i],e[i]))return!1;return!0}if(t!=n)return!1;var o=Object.keys(r);if(s=o.length,s!==Object.keys(e).length)return!1;for(i=s;i--!==0;)if(!e.hasOwnProperty(o[i]))return!1;for(i=s;i--!==0;)if(a=o[i],!rn(r[a],e[a]))return!1;return!0}return r!==r&&e!==e}class xr extends ReadableStream{constructor(){super(...arguments),Object.defineProperty(this,"reader",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}ensureReader(){this.reader||(this.reader=this.getReader())}async next(){this.ensureReader();try{const e=await this.reader.read();return e.done&&this.reader.releaseLock(),e}catch(e){throw this.reader.releaseLock(),e}}async return(){this.ensureReader();const e=this.reader.cancel();return this.reader.releaseLock(),await e,{done:!0,value:void 0}}[Symbol.asyncIterator](){return this}static fromReadableStream(e){const t=e.getReader();return new xr({start(n){return i();function i(){return t.read().then(({done:s,value:a})=>{if(s){n.close();return}return n.enqueue(a),i()})}}})}static fromAsyncGenerator(e){return new xr({async pull(t){const{value:n,done:i}=await e.next();i&&t.close(),t.enqueue(n)}})}}class Ct{constructor(e){Object.defineProperty(this,"ops",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.ops=e.ops}concat(e){const t=this.ops.concat(e.ops),n=cs({},t);return new ls({ops:t,state:n[n.length-1].newDocument})}}class ls extends Ct{constructor(e){super(e),Object.defineProperty(this,"state",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.state=e.state}concat(e){const t=this.ops.concat(e.ops),n=cs(this.state,e.ops);return new ls({ops:t,state:n[n.length-1].newDocument})}}class fd extends Ln{constructor(e){super(e),Object.defineProperty(this,"autoClose",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"includeNames",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"includeTypes",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"includeTags",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"excludeNames",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"excludeTypes",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"excludeTags",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"keyMapByRunId",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,"counterMapByRunName",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,"transformStream",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"writer",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"receiveStream",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"log_stream_tracer"}),this.autoClose=(e==null?void 0:e.autoClose)??!0,this.includeNames=e==null?void 0:e.includeNames,this.includeTypes=e==null?void 0:e.includeTypes,this.includeTags=e==null?void 0:e.includeTags,this.excludeNames=e==null?void 0:e.excludeNames,this.excludeTypes=e==null?void 0:e.excludeTypes,this.excludeTags=e==null?void 0:e.excludeTags,this.transformStream=new TransformStream,this.writer=this.transformStream.writable.getWriter(),this.receiveStream=xr.fromReadableStream(this.transformStream.readable)}[Symbol.asyncIterator](){return this.receiveStream}async persistRun(e){}_includeRun(e){if(e.parent_run_id===void 0)return!1;const t=e.tags??[];let n=this.includeNames===void 0&&this.includeTags===void 0&&this.includeTypes===void 0;return this.includeNames!==void 0&&(n=n||this.includeNames.includes(e.name)),this.includeTypes!==void 0&&(n=n||this.includeTypes.includes(e.run_type)),this.includeTags!==void 0&&(n=n||t.find(i=>{var s;return(s=this.includeTags)==null?void 0:s.includes(i)})!==void 0),this.excludeNames!==void 0&&(n=n&&!this.excludeNames.includes(e.name)),this.excludeTypes!==void 0&&(n=n&&!this.excludeTypes.includes(e.run_type)),this.excludeTags!==void 0&&(n=n&&t.every(i=>{var s;return!((s=this.excludeTags)!=null&&s.includes(i))})),n}async onRunCreate(e){var i;if(e.parent_run_id===void 0&&await this.writer.write(new Ct({ops:[{op:"replace",path:"",value:{id:e.id,streamed_output:[],final_output:void 0,logs:{}}}]})),!this._includeRun(e))return;this.counterMapByRunName[e.name]===void 0&&(this.counterMapByRunName[e.name]=0),this.counterMapByRunName[e.name]+=1;const t=this.counterMapByRunName[e.name];this.keyMapByRunId[e.id]=t===1?e.name:`${e.name}:${t}`;const n={id:e.id,name:e.name,type:e.run_type,tags:e.tags??[],metadata:((i=e.extra)==null?void 0:i.metadata)??{},start_time:new Date(e.start_time).toISOString(),streamed_output_str:[],final_output:void 0,end_time:void 0};await this.writer.write(new Ct({ops:[{op:"add",path:`/logs/${this.keyMapByRunId[e.id]}`,value:n}]}))}async onRunUpdate(e){try{const t=this.keyMapByRunId[e.id];if(t===void 0)return;const n=[{op:"add",path:`/logs/${t}/final_output`,value:e.outputs}];e.end_time!==void 0&&n.push({op:"add",path:`/logs/${t}/end_time`,value:new Date(e.end_time).toISOString()});const i=new Ct({ops:n});await this.writer.write(i)}finally{if(e.parent_run_id===void 0){const t=new Ct({ops:[{op:"replace",path:"/final_output",value:e.outputs}]});await this.writer.write(t),this.autoClose&&await this.writer.close()}}}async onLLMNewToken(e,t){const n=this.keyMapByRunId[e.id];if(n===void 0)return;const i=new Ct({ops:[{op:"add",path:`/logs/${n}/streamed_output_str/-`,value:t}]});await this.writer.write(i)}}async function Ut(r){return Ve.configure(r==null?void 0:r.callbacks,void 0,r==null?void 0:r.tags,void 0,r==null?void 0:r.metadata)}const hd=[400,401,402,403,404,405,406,407,408,409],pd=r=>{var t,n;if(r.message.startsWith("Cancel")||r.message.startsWith("TimeoutError")||r.name==="TimeoutError"||r.message.startsWith("AbortError")||r.name==="AbortError"||(r==null?void 0:r.code)==="ECONNABORTED")throw r;const e=((t=r==null?void 0:r.response)==null?void 0:t.status)??(r==null?void 0:r.status);if(e&&hd.includes(+e))throw r;if(((n=r==null?void 0:r.error)==null?void 0:n.code)==="insufficient_quota"){const i=new Error(r==null?void 0:r.message);throw i.name="InsufficientQuotaError",i}};class zn{constructor(e){Object.defineProperty(this,"maxConcurrency",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"maxRetries",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onFailedAttempt",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"queue",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.maxConcurrency=e.maxConcurrency??1/0,this.maxRetries=e.maxRetries??6,this.onFailedAttempt=e.onFailedAttempt??pd;const t="default"in pt?pt.default:pt;this.queue=new t({concurrency:this.maxConcurrency})}call(e,...t){return this.queue.add(()=>tn(()=>e(...t).catch(n=>{throw n instanceof Error?n:new Error(n)}),{onFailedAttempt:this.onFailedAttempt,retries:this.maxRetries,randomize:!0}),{throwOnTimeout:!0})}callWithOptions(e,t,...n){return e.signal?Promise.race([this.call(t,...n),new Promise((i,s)=>{var a;(a=e.signal)==null||a.addEventListener("abort",()=>{s(new Error("AbortError"))})})]):this.call(t,...n)}fetch(...e){return this.call(()=>fetch(...e).then(t=>t.ok?t:Promise.reject(t)))}}function $e(r,e){return r&&!Array.isArray(r)&&typeof r=="object"?r:{[e]:r}}class Se extends _t{constructor(){super(...arguments),Object.defineProperty(this,"lc_runnable",{enumerable:!0,configurable:!0,writable:!0,value:!0})}bind(e){return new nn({bound:this,kwargs:e,config:{}})}map(){return new ds({bound:this})}withRetry(e){return new md({bound:this,kwargs:{},config:{},maxAttemptNumber:e==null?void 0:e.stopAfterAttempt,...e})}withConfig(e){return new nn({bound:this,config:e,kwargs:{}})}withFallbacks(e){return new gd({runnable:this,fallbacks:e.fallbacks})}_getOptionsList(e,t=0){if(Array.isArray(e)){if(e.length!==t)throw new Error(`Passed "options" must be an array with the same length as the inputs, but got ${e.length} options for ${t} inputs`);return e}return Array.from({length:t},()=>e)}async batch(e,t,n){const i=this._getOptionsList(t??{},e.length),s=new zn({maxConcurrency:n==null?void 0:n.maxConcurrency,onFailedAttempt:o=>{throw o}}),a=e.map((o,u)=>s.call(async()=>{try{return await this.invoke(o,i[u])}catch(c){if(n!=null&&n.returnExceptions)return c;throw c}}));return Promise.all(a)}async*_streamIterator(e,t){yield this.invoke(e,t)}async stream(e,t){return xr.fromAsyncGenerator(this._streamIterator(e,t))}_separateRunnableConfigFromCallOptions(e={}){const t={callbacks:e.callbacks,tags:e.tags,metadata:e.metadata,runName:e.runName},n={...e};return delete n.callbacks,delete n.tags,delete n.metadata,delete n.runName,[t,n]}async _callWithConfig(e,t,n){const i=await Ut(n),s=await(i==null?void 0:i.handleChainStart(this.toJSON(),$e(t,"input"),void 0,n==null?void 0:n.runType,void 0,void 0,n==null?void 0:n.runName));let a;try{a=await e.bind(this)(t,n,s)}catch(o){throw await(s==null?void 0:s.handleChainError(o)),o}return await(s==null?void 0:s.handleChainEnd($e(a,"output"))),a}async _batchWithConfig(e,t,n,i){const s=this._getOptionsList(n??{},t.length),a=await Promise.all(s.map(Ut)),o=await Promise.all(a.map((c,d)=>c==null?void 0:c.handleChainStart(this.toJSON(),$e(t[d],"input"),void 0,s[d].runType,void 0,void 0,s[d].runName)));let u;try{u=await e(t,s,o,i)}catch(c){throw await Promise.all(o.map(d=>d==null?void 0:d.handleChainError(c))),c}return await Promise.all(o.map(c=>c==null?void 0:c.handleChainEnd($e(u,"output")))),u}async*_transformStreamWithConfig(e,t,n){let i,s=!0,a,o=!0;const u=await Ut(n);let c;const d=this.toJSON();async function*f(){for await(const b of e){if(c||(c=await(u==null?void 0:u.handleChainStart(d,{input:""},void 0,n==null?void 0:n.runType,void 0,void 0,n==null?void 0:n.runName))),s)if(i===void 0)i=b;else try{i=i.concat(b)}catch{i=void 0,s=!1}yield b}}const m=f();try{const b=t(m,c,n);for await(const g of b)if(yield g,o)if(a===void 0)a=g;else try{a=a.concat(g)}catch{a=void 0,o=!1}}catch(b){throw await(c==null?void 0:c.handleChainError(b,void 0,void 0,void 0,{inputs:$e(i,"input")})),b}await(c==null?void 0:c.handleChainEnd(a??{},void 0,void 0,void 0,{inputs:$e(i,"input")}))}_patchConfig(e={},t=void 0){const n={...e};return t!==void 0?(delete n.runName,{...n,callbacks:t}):n}pipe(e){return new Dt({first:this,last:jt(e)})}async*transform(e,t){let n;for await(const i of e)n===void 0?n=i:n=n.concat(i);yield*this._streamIterator(n,t)}async*streamLog(e,t,n){const i=new fd({...n,autoClose:!1}),s=t??{},{callbacks:a}=s;if(a===void 0)s.callbacks=[i];else if(Array.isArray(a))s.callbacks=a.concat([i]);else{const d=a.copy();d.inheritableHandlers.push(i),s.callbacks=d}const o=await this.stream(e,s);async function u(){try{for await(const d of o){const f=new Ct({ops:[{op:"add",path:"/streamed_output/-",value:d}]});await i.writer.write(f)}}finally{await i.writer.close()}}const c=u();try{for await(const d of i)yield d}finally{await c}}static isRunnable(e){return e?e.lc_runnable:!1}}class nn extends Se{static lc_name(){return"RunnableBinding"}constructor(e){super(e),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","schema","runnable"]}),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"bound",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"config",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"kwargs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.bound=e.bound,this.kwargs=e.kwargs,this.config=e.config}_mergeConfig(e){const t={...this.config};if(e)for(const n of Object.keys(e))n==="metadata"?t[n]={...t[n],...e[n]}:n==="tags"?t[n]=(t[n]??[]).concat(e[n]??[]):t[n]=e[n]??t[n];return t}bind(e){return this.constructor({bound:this.bound,kwargs:{...this.kwargs,...e},config:this.config})}withConfig(e){return this.constructor({bound:this.bound,kwargs:this.kwargs,config:{...this.config,...e}})}withRetry(e){return this.constructor({bound:this.bound.withRetry(e),kwargs:this.kwargs,config:this.config})}async invoke(e,t){return this.bound.invoke(e,this._mergeConfig({...t,...this.kwargs}))}async batch(e,t,n){const i=Array.isArray(t)?t.map(s=>this._mergeConfig({...s,...this.kwargs})):this._mergeConfig({...t,...this.kwargs});return this.bound.batch(e,i,n)}async*_streamIterator(e,t){yield*this.bound._streamIterator(e,this._mergeConfig({...t,...this.kwargs}))}async stream(e,t){return this.bound.stream(e,this._mergeConfig({...t,...this.kwargs}))}async*transform(e,t){yield*this.bound.transform(e,this._mergeConfig({...t,...this.kwargs}))}static isRunnableBinding(e){return e.bound&&Se.isRunnable(e.bound)}}class ds extends Se{static lc_name(){return"RunnableEach"}constructor(e){super(e),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","schema","runnable"]}),Object.defineProperty(this,"bound",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.bound=e.bound}bind(e){return new ds({bound:this.bound.bind(e)})}async invoke(e,t){return this._callWithConfig(this._invoke,e,t)}async _invoke(e,t,n){return this.bound.batch(e,this._patchConfig(t,n==null?void 0:n.getChild()))}}class md extends nn{static lc_name(){return"RunnableRetry"}constructor(e){super(e),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","schema","runnable"]}),Object.defineProperty(this,"maxAttemptNumber",{enumerable:!0,configurable:!0,writable:!0,value:3}),Object.defineProperty(this,"onFailedAttempt",{enumerable:!0,configurable:!0,writable:!0,value:()=>{}}),this.maxAttemptNumber=e.maxAttemptNumber??this.maxAttemptNumber,this.onFailedAttempt=e.onFailedAttempt??this.onFailedAttempt}_patchConfigForRetry(e,t,n){const i=e>1?`retry:attempt:${e}`:void 0;return this._patchConfig(t,n==null?void 0:n.getChild(i))}async _invoke(e,t,n){return tn(i=>super.invoke(e,this._patchConfigForRetry(i,t,n)),{onFailedAttempt:this.onFailedAttempt,retries:Math.max(this.maxAttemptNumber-1,0),randomize:!0})}async invoke(e,t){return this._callWithConfig(this._invoke,e,t)}async _batch(e,t,n,i){const s={};try{await tn(async a=>{const o=e.map((m,b)=>b).filter(m=>s[m.toString()]===void 0||s[m.toString()]instanceof Error),u=o.map(m=>e[m]),c=o.map(m=>this._patchConfigForRetry(a,t==null?void 0:t[m],n==null?void 0:n[m])),d=await super.batch(u,c,{...i,returnExceptions:!0});let f;for(let m=0;m<d.length;m+=1){const b=d[m],g=o[m];b instanceof Error&&f===void 0&&(f=b),s[g.toString()]=b}if(f)throw f;return d},{onFailedAttempt:this.onFailedAttempt,retries:Math.max(this.maxAttemptNumber-1,0),randomize:!0})}catch(a){if((i==null?void 0:i.returnExceptions)!==!0)throw a}return Object.keys(s).sort((a,o)=>parseInt(a,10)-parseInt(o,10)).map(a=>s[parseInt(a,10)])}async batch(e,t,n){return this._batchWithConfig(this._batch.bind(this),e,t,n)}}class Dt extends Se{static lc_name(){return"RunnableSequence"}constructor(e){super(e),Object.defineProperty(this,"first",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"middle",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"last",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","schema","runnable"]}),this.first=e.first,this.middle=e.middle??this.middle,this.last=e.last}get steps(){return[this.first,...this.middle,this.last]}async invoke(e,t){const n=await Ut(t),i=await(n==null?void 0:n.handleChainStart(this.toJSON(),$e(e,"input"),void 0,void 0,void 0,void 0,t==null?void 0:t.runName));let s=e,a;try{const o=[this.first,...this.middle];for(let u=0;u<o.length;u+=1)s=await o[u].invoke(s,this._patchConfig(t,i==null?void 0:i.getChild(`seq:step:${u+1}`)));a=await this.last.invoke(s,this._patchConfig(t,i==null?void 0:i.getChild(`seq:step:${this.steps.length}`)))}catch(o){throw await(i==null?void 0:i.handleChainError(o)),o}return await(i==null?void 0:i.handleChainEnd($e(a,"output"))),a}async batch(e,t,n){const i=this._getOptionsList(t??{},e.length),s=await Promise.all(i.map(Ut)),a=await Promise.all(s.map((c,d)=>c==null?void 0:c.handleChainStart(this.toJSON(),$e(e[d],"input"),void 0,void 0,void 0,void 0,i[d].runName)));let o=e,u;try{const c=[this.first,...this.middle];for(let d=0;d<c.length;d+=1)o=await c[d].batch(o,a.map((m,b)=>this._patchConfig(i[b],m==null?void 0:m.getChild(`seq:step:${d+1}`))),n);u=await this.last.batch(o,a.map(d=>this._patchConfig(i[this.steps.length-1],d==null?void 0:d.getChild(`seq:step:${this.steps.length}`))),n)}catch(c){throw await Promise.all(a.map(d=>d==null?void 0:d.handleChainError(c))),c}return await Promise.all(a.map((c,d)=>c==null?void 0:c.handleChainEnd($e(u[d],"output")))),u}async*_streamIterator(e,t){const n=await Ut(t),i=await(n==null?void 0:n.handleChainStart(this.toJSON(),$e(e,"input"),void 0,void 0,void 0,void 0,t==null?void 0:t.runName));let s=e;const a=[this.first,...this.middle,this.last],o=Math.min(a.length-1,a.length-[...a].reverse().findIndex(d=>{var b;const f=d.transform===Se.prototype.transform,m=nn.isRunnableBinding(d)&&((b=d.bound)==null?void 0:b.transform)===Se.prototype.transform;return f||m})-1);try{const d=a.slice(0,o);for(let f=0;f<d.length;f+=1)s=await d[f].invoke(s,this._patchConfig(t,i==null?void 0:i.getChild(`seq:step:${f+1}`)))}catch(d){throw await(i==null?void 0:i.handleChainError(d)),d}let u=!0,c;try{let d=await a[o]._streamIterator(s,this._patchConfig(t,i==null?void 0:i.getChild(`seq:step:${o+1}`)));const f=a.slice(o+1);for(let m=0;m<f.length;m+=1)d=await f[m].transform(d,this._patchConfig(t,i==null?void 0:i.getChild(`seq:step:${o+m+2}`)));for await(const m of d)if(yield m,u)if(c===void 0)c=m;else try{c=c.concat(m)}catch{c=void 0,u=!1}}catch(d){throw await(i==null?void 0:i.handleChainError(d)),d}await(i==null?void 0:i.handleChainEnd($e(c,"output")))}pipe(e){return Dt.isRunnableSequence(e)?new Dt({first:this.first,middle:this.middle.concat([this.last,e.first,...e.middle]),last:e.last}):new Dt({first:this.first,middle:[...this.middle,this.last],last:jt(e)})}static isRunnableSequence(e){return Array.isArray(e.middle)&&Se.isRunnable(e)}static from([e,...t]){return new Dt({first:jt(e),middle:t.slice(0,-1).map(jt),last:jt(t[t.length-1])})}}class Bn extends Se{static lc_name(){return"RunnableMap"}getStepsKeys(){return Object.keys(this.steps)}constructor(e){super(e),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","schema","runnable"]}),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"steps",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.steps={};for(const[t,n]of Object.entries(e.steps))this.steps[t]=jt(n)}static from(e){return new Bn({steps:e})}async invoke(e,t){const n=await Ut(t),i=await(n==null?void 0:n.handleChainStart(this.toJSON(),{input:e},void 0,void 0,void 0,void 0,t==null?void 0:t.runName)),s={};try{await Promise.all(Object.entries(this.steps).map(async([a,o])=>{s[a]=await o.invoke(e,this._patchConfig(t,i==null?void 0:i.getChild(a)))}))}catch(a){throw await(i==null?void 0:i.handleChainError(a)),a}return await(i==null?void 0:i.handleChainEnd(s)),s}}class fs extends Se{static lc_name(){return"RunnableLambda"}constructor(e){super(e),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","schema","runnable"]}),Object.defineProperty(this,"func",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.func=e.func}static from(e){return new fs({func:e})}async _invoke(e,t,n){let i=await this.func(e);return i&&Se.isRunnable(i)&&(i=await i.invoke(e,this._patchConfig(t,n==null?void 0:n.getChild()))),i}async invoke(e,t){return this._callWithConfig(this._invoke,e,t)}}class gd extends Se{static lc_name(){return"RunnableWithFallbacks"}constructor(e){super(e),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","schema","runnable"]}),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"runnable",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"fallbacks",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.runnable=e.runnable,this.fallbacks=e.fallbacks}*runnables(){yield this.runnable;for(const e of this.fallbacks)yield e}async invoke(e,t){const n=await Ve.configure(t==null?void 0:t.callbacks,void 0,t==null?void 0:t.tags,void 0,t==null?void 0:t.metadata),i=await(n==null?void 0:n.handleChainStart(this.toJSON(),$e(e,"input"),void 0,void 0,void 0,void 0,t==null?void 0:t.runName));let s;for(const a of this.runnables())try{const o=await a.invoke(e,this._patchConfig(t,i==null?void 0:i.getChild()));return await(i==null?void 0:i.handleChainEnd($e(o,"output"))),o}catch(o){s===void 0&&(s=o)}throw s===void 0?new Error("No error stored at end of fallback."):(await(i==null?void 0:i.handleChainError(s)),s)}async batch(e,t,n){if(n!=null&&n.returnExceptions)throw new Error("Not implemented.");const i=this._getOptionsList(t??{},e.length),s=await Promise.all(i.map(u=>Ve.configure(u==null?void 0:u.callbacks,void 0,u==null?void 0:u.tags,void 0,u==null?void 0:u.metadata))),a=await Promise.all(s.map((u,c)=>u==null?void 0:u.handleChainStart(this.toJSON(),$e(e[c],"input"),void 0,void 0,void 0,void 0,i[c].runName)));let o;for(const u of this.runnables())try{const c=await u.batch(e,a.map((d,f)=>this._patchConfig(i[f],d==null?void 0:d.getChild())),n);return await Promise.all(a.map((d,f)=>d==null?void 0:d.handleChainEnd($e(c[f],"output")))),c}catch(c){o===void 0&&(o=c)}throw o?(await Promise.all(a.map(u=>u==null?void 0:u.handleChainError(o))),o):new Error("No error stored at end of fallbacks.")}}function jt(r){if(typeof r=="function")return new fs({func:r});if(Se.isRunnable(r))return r;if(!Array.isArray(r)&&typeof r=="object"){const e={};for(const[t,n]of Object.entries(r))e[t]=jt(n);return new Bn({steps:e})}else throw new Error(`Expected a Runnable, function or object.
Instead got an unsupported type.`)}class yd extends Se{constructor(e){super(),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","schema","runnable"]}),Object.defineProperty(this,"mapper",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.mapper=e}async invoke(e,t){const n=await this.mapper.invoke(e,t);return{...e,...n}}}class bd extends Se{constructor(){super(...arguments),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","schema","runnable"]}),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0})}static lc_name(){return"RunnablePassthrough"}async invoke(e,t){return this._callWithConfig(n=>Promise.resolve(n),e,t)}static assign(e){return new yd(new Bn({steps:e}))}}const Kt="4.4.0";class vd{constructor(e,t){this.response=e,this.controller=t,this.decoder=new wd}async*iterMessages(){if(!this.response.body)throw this.controller.abort(),new Error("Attempted to iterate over a response with no body");const e=new rr,t=Id(this.response.body);for await(const n of t)for(const i of e.decode(n)){const s=this.decoder.decode(i);s&&(yield s)}for(const n of e.flush()){const i=this.decoder.decode(n);i&&(yield i)}}async*[Symbol.asyncIterator](){let e=!1;try{for await(const t of this.iterMessages())if(!e){if(t.data.startsWith("[DONE]")){e=!0;continue}if(t.event===null)try{yield JSON.parse(t.data)}catch(n){throw console.error("Could not parse message into JSON:",t.data),console.error("From chunk:",t.raw),n}}e=!0}catch(t){if(t instanceof Error&&t.name==="AbortError")return;throw t}finally{e||this.controller.abort()}}}class wd{constructor(){this.event=null,this.data=[],this.chunks=[]}decode(e){if(e.endsWith("\r")&&(e=e.substring(0,e.length-1)),!e){if(!this.event&&!this.data.length)return null;const s={event:this.event,data:this.data.join(`
`),raw:this.chunks};return this.event=null,this.data=[],this.chunks=[],s}if(this.chunks.push(e),e.startsWith(":"))return null;let[t,n,i]=_d(e,":");return i.startsWith(" ")&&(i=i.substring(1)),t==="event"?this.event=i:t==="data"&&this.data.push(i),null}}class rr{constructor(){this.buffer=[],this.trailingCR=!1}decode(e){let t=this.decodeText(e);if(this.trailingCR&&(t="\r"+t,this.trailingCR=!1),t.endsWith("\r")&&(this.trailingCR=!0,t=t.slice(0,-1)),!t)return[];const n=rr.NEWLINE_CHARS.has(t[t.length-1]||"");let i=t.split(rr.NEWLINE_REGEXP);return i.length===1&&!n?(this.buffer.push(i[0]),[]):(this.buffer.length>0&&(i=[this.buffer.join("")+i[0],...i.slice(1)],this.buffer=[]),n||(this.buffer=[i.pop()||""]),i)}decodeText(e){var t;if(e==null)return"";if(typeof e=="string")return e;if(typeof Buffer<"u"){if(e instanceof Buffer)return e.toString();if(e instanceof Uint8Array)return Buffer.from(e).toString();throw new Error(`Unexpected: received non-Uint8Array (${e.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`)}if(typeof TextDecoder<"u"){if(e instanceof Uint8Array||e instanceof ArrayBuffer)return(t=this.textDecoder)!==null&&t!==void 0||(this.textDecoder=new TextDecoder("utf8")),this.textDecoder.decode(e);throw new Error(`Unexpected: received non-Uint8Array/ArrayBuffer (${e.constructor.name}) in a web platform. Please report this error.`)}throw new Error("Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.")}flush(){if(!this.buffer.length&&!this.trailingCR)return[];const e=[this.buffer.join("")];return this.buffer=[],this.trailingCR=!1,e}}rr.NEWLINE_CHARS=new Set([`
`,"\r","\v","\f","","","","","\u2028","\u2029"]);rr.NEWLINE_REGEXP=/\r\n|[\n\r\x0b\x0c\x1c\x1d\x1e\x85\u2028\u2029]/g;function _d(r,e){const t=r.indexOf(e);return t!==-1?[r.substring(0,t),e,r.substring(t+e.length)]:[r,"",""]}function Id(r){if(r[Symbol.asyncIterator])return r;const e=r.getReader();return{async next(){try{const t=await e.read();return t!=null&&t.done&&e.releaseLock(),t}catch(t){throw e.releaseLock(),t}},async return(){const t=e.cancel();return e.releaseLock(),await t,{done:!0,value:void 0}},[Symbol.asyncIterator](){return this}}}let Je=class Vi extends Error{constructor(e,t,n,i){super(Vi.makeMessage(t,n)),this.status=e,this.headers=i;const s=t;this.error=s,this.code=s==null?void 0:s.code,this.param=s==null?void 0:s.param,this.type=s==null?void 0:s.type}static makeMessage(e,t){return e!=null&&e.message?typeof e.message=="string"?e.message:JSON.stringify(e.message):e?JSON.stringify(e):t||"Unknown error occurred"}static generate(e,t,n,i){if(!e)return new jr({cause:Mo(t)});const s=t==null?void 0:t.error;return e===400?new ps(e,s,n,i):e===401?new ms(e,s,n,i):e===403?new gs(e,s,n,i):e===404?new ys(e,s,n,i):e===409?new bs(e,s,n,i):e===422?new vs(e,s,n,i):e===429?new ws(e,s,n,i):e>=500?new _s(e,s,n,i):new Vi(e,s,n,i)}},sn=class extends Je{constructor({message:e}={}){super(void 0,void 0,e||"Request was aborted.",void 0),this.status=void 0}},jr=class extends Je{constructor({message:e,cause:t}){super(void 0,void 0,e||"Connection error.",void 0),this.status=void 0,t&&(this.cause=t)}},hs=class extends jr{constructor(){super({message:"Request timed out."})}},ps=class extends Je{constructor(){super(...arguments),this.status=400}},ms=class extends Je{constructor(){super(...arguments),this.status=401}},gs=class extends Je{constructor(){super(...arguments),this.status=403}},ys=class extends Je{constructor(){super(...arguments),this.status=404}},bs=class extends Je{constructor(){super(...arguments),this.status=409}},vs=class extends Je{constructor(){super(...arguments),this.status=422}},ws=class extends Je{constructor(){super(...arguments),this.status=429}},_s=class extends Je{};const Ad=Object.freeze(Object.defineProperty({__proto__:null,APIConnectionError:jr,APIConnectionTimeoutError:hs,APIError:Je,APIUserAbortError:sn,AuthenticationError:ms,BadRequestError:ps,ConflictError:bs,InternalServerError:_s,NotFoundError:ys,PermissionDeniedError:gs,RateLimitError:ws,UnprocessableEntityError:vs},Symbol.toStringTag,{value:"Module"})),Ed=r=>{},Td=fetch.bind(void 0),Pd=!1,Od=FormData,sa=typeof File<"u"?File:class extends Blob{constructor(){throw new Error("file uploads aren't supported in this environment yet as 'File' is not defined")}};async function xd(r,e){return{...e,body:new Ud(r)}}async function Sd(){throw new Error("The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads")}function Cd(r){return!1}const Ro=r=>r!=null&&typeof r=="object"&&typeof r.url=="string"&&typeof r.blob=="function",kd=r=>r!=null&&typeof r=="object"&&typeof r.name=="string"&&typeof r.lastModified=="number"&&Do(r),Do=r=>r!=null&&typeof r=="object"&&typeof r.size=="number"&&typeof r.type=="string"&&typeof r.text=="function"&&typeof r.slice=="function"&&typeof r.arrayBuffer=="function",Nd=r=>kd(r)||Ro(r)||Cd();async function jo(r,e,t={}){var n,i,s;if(r=await r,Ro(r)){const o=await r.blob();return e||(e=(n=new URL(r.url).pathname.split(/[\\/]/).pop())!==null&&n!==void 0?n:"unknown_file"),new sa([o],e,t)}const a=await Rd(r);if(e||(e=(i=jd(r))!==null&&i!==void 0?i:"unknown_file"),!t.type){const o=(s=a[0])===null||s===void 0?void 0:s.type;typeof o=="string"&&(t={...t,type:o})}return new sa(a,e,t)}async function Rd(r){var e;let t=[];if(typeof r=="string"||ArrayBuffer.isView(r)||r instanceof ArrayBuffer)t.push(r);else if(Do(r))t.push(await r.arrayBuffer());else if(Ld(r))for await(const n of r)t.push(n);else throw new Error(`Unexpected data type: ${typeof r}; constructor: ${(e=r==null?void 0:r.constructor)===null||e===void 0?void 0:e.name}; props: ${Dd(r)}`);return t}function Dd(r){return`[${Object.getOwnPropertyNames(r).map(t=>`"${t}"`).join(", ")}]`}function jd(r){var e;return vi(r.name)||vi(r.filename)||((e=vi(r.path))===null||e===void 0?void 0:e.split(/[\\/]/).pop())}const vi=r=>{if(typeof r=="string")return r;if(typeof Buffer<"u"&&r instanceof Buffer)return String(r)},Ld=r=>r!=null&&typeof r=="object"&&typeof r[Symbol.asyncIterator]=="function";class Ud{constructor(e){this.body=e}get[Symbol.toStringTag](){return"MultipartBody"}}const aa=r=>r&&typeof r=="object"&&r.body&&r[Symbol.toStringTag]==="MultipartBody",Sr=async r=>{const e=await Md(r.body);return xd(e,r)},Md=async r=>{const e=new Od;return await Promise.all(Object.entries(r||{}).map(([t,n])=>Fi(e,t,n))),e},Fi=async(r,e,t)=>{if(t!==void 0){if(t==null)throw new TypeError(`Received null for "${e}"; to pass null in FormData, you must use the string 'null'`);if(typeof t=="string"||typeof t=="number"||typeof t=="boolean")r.append(e,String(t));else if(Nd(t)){const n=await jo(t);r.append(e,n)}else if(Array.isArray(t))await Promise.all(t.map(n=>Fi(r,e+"[]",n)));else if(typeof t=="object")await Promise.all(Object.entries(t).map(([n,i])=>Fi(r,`${e}[${n}]`,i)));else throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${t} instead`)}};var $d=globalThis&&globalThis.__classPrivateFieldSet||function(r,e,t,n,i){if(n==="m")throw new TypeError("Private method is not writable");if(n==="a"&&!i)throw new TypeError("Private accessor was defined without a setter");if(typeof e=="function"?r!==e||!i:!e.has(r))throw new TypeError("Cannot write private member to an object whose class did not declare it");return n==="a"?i.call(r,t):i?i.value=t:e.set(r,t),t},zd=globalThis&&globalThis.__classPrivateFieldGet||function(r,e,t,n){if(t==="a"&&!n)throw new TypeError("Private accessor was defined without a getter");if(typeof e=="function"?r!==e||!n:!e.has(r))throw new TypeError("Cannot read private member from an object whose class did not declare it");return t==="m"?n:t==="a"?n.call(r):n?n.value:e.get(r)},Fr;const Bd=2;async function Lo(r){const{response:e}=r;if(r.options.stream)return new vd(e,r.controller);const t=e.headers.get("content-type");if(t!=null&&t.includes("application/json")){const i=await e.json();return an("response",e.status,e.url,e.headers,i),i}const n=await e.text();return an("response",e.status,e.url,e.headers,n),n}class Zn extends Promise{constructor(e,t=Lo){super(n=>{n(null)}),this.responsePromise=e,this.parseResponse=t}_thenUnwrap(e){return new Zn(this.responsePromise,async t=>e(await this.parseResponse(t)))}asResponse(){return this.responsePromise.then(e=>e.response)}async withResponse(){const[e,t]=await Promise.all([this.parse(),this.asResponse()]);return{data:e,response:t}}parse(){return this.parsedPromise||(this.parsedPromise=this.responsePromise.then(this.parseResponse)),this.parsedPromise}then(e,t){return this.parse().then(e,t)}catch(e){return this.parse().catch(e)}finally(e){return this.parse().finally(e)}}class Zd{constructor({baseURL:e,maxRetries:t,timeout:n=6e5,httpAgent:i,fetch:s}){this.baseURL=e,this.maxRetries=wi("maxRetries",t??Bd),this.timeout=wi("timeout",n),this.httpAgent=i,this.fetch=s??Td}authHeaders(e){return{}}defaultHeaders(e){return{Accept:"application/json","Content-Type":"application/json","User-Agent":this.getUserAgent(),...Wd(),...this.authHeaders(e)}}validateHeaders(e,t){}defaultIdempotencyKey(){return`stainless-node-retry-${ef()}`}get(e,t){return this.methodRequest("get",e,t)}post(e,t){return this.methodRequest("post",e,t)}patch(e,t){return this.methodRequest("patch",e,t)}put(e,t){return this.methodRequest("put",e,t)}delete(e,t){return this.methodRequest("delete",e,t)}methodRequest(e,t,n){return this.request(Promise.resolve(n).then(i=>({method:e,path:t,...i})))}getAPIList(e,t,n){return this.requestAPIList(t,{method:"get",path:e,...n})}calculateContentLength(e){if(typeof e=="string"){if(typeof Buffer<"u")return Buffer.byteLength(e,"utf8").toString();if(typeof TextEncoder<"u")return new TextEncoder().encode(e).length.toString()}return null}buildRequest(e){var t,n,i,s,a,o;const{method:u,path:c,query:d,headers:f={}}=e,m=aa(e.body)?e.body.body:e.body?JSON.stringify(e.body,null,2):null,b=this.calculateContentLength(m),g=this.buildURL(c,d);"timeout"in e&&wi("timeout",e.timeout);const _=(t=e.timeout)!==null&&t!==void 0?t:this.timeout,h=(i=(n=e.httpAgent)!==null&&n!==void 0?n:this.httpAgent)!==null&&i!==void 0?i:Ed(),T=_+1e3;typeof((s=h==null?void 0:h.options)===null||s===void 0?void 0:s.timeout)=="number"&&T>((a=h.options.timeout)!==null&&a!==void 0?a:0)&&(h.options.timeout=T),this.idempotencyHeader&&u!=="get"&&(e.idempotencyKey||(e.idempotencyKey=this.defaultIdempotencyKey()),f[this.idempotencyHeader]=e.idempotencyKey);const j={...b&&{"Content-Length":b},...this.defaultHeaders(e),...f};aa(e.body)&&!Pd&&delete j["Content-Type"],Object.keys(j).forEach(R=>j[R]===null&&delete j[R]);const S={method:u,...m&&{body:m},headers:j,...h&&{agent:h},signal:(o=e.signal)!==null&&o!==void 0?o:null};return this.validateHeaders(j,f),{req:S,url:g,timeout:_}}async prepareRequest(e,{url:t,options:n}){}parseHeaders(e){return e?Symbol.iterator in e?Object.fromEntries(Array.from(e).map(t=>[...t])):{...e}:{}}makeStatusError(e,t,n,i){return Je.generate(e,t,n,i)}request(e,t=null){return new Zn(this.makeRequest(e,t))}async makeRequest(e,t){var n,i,s;const a=await e;t==null&&(t=(n=a.maxRetries)!==null&&n!==void 0?n:this.maxRetries);const{req:o,url:u,timeout:c}=this.buildRequest(a);if(await this.prepareRequest(o,{url:u,options:a}),an("request",u,a,o.headers),!((i=a.signal)===null||i===void 0)&&i.aborted)throw new sn;const d=new AbortController,f=await this.fetchWithTimeout(u,o,c,d).catch(Mo);if(f instanceof Error){if(!((s=a.signal)===null||s===void 0)&&s.aborted)throw new sn;if(t)return this.retryRequest(a,t);throw f.name==="AbortError"?new hs:new jr({cause:f})}const m=Fd(f.headers);if(!f.ok){if(t&&this.shouldRetry(f))return this.retryRequest(a,t,m);const b=await f.text().catch(()=>"Unknown"),g=Gd(b),_=g?void 0:b;throw an("response",f.status,u,m,_),this.makeStatusError(f.status,g,_,m)}return{response:f,options:a,controller:d}}requestAPIList(e,t){const n=this.makeRequest(t,null);return new Vd(this,n,e)}buildURL(e,t){const n=Jd(e)?new URL(e):new URL(this.baseURL+(this.baseURL.endsWith("/")&&e.startsWith("/")?e.slice(1):e)),i=this.defaultQuery();return $o(i)||(t={...i,...t}),t&&(n.search=this.stringifyQuery(t)),n.toString()}stringifyQuery(e){return Object.entries(e).filter(([t,n])=>typeof n<"u").map(([t,n])=>{if(typeof n=="string"||typeof n=="number"||typeof n=="boolean")return`${encodeURIComponent(t)}=${encodeURIComponent(n)}`;if(n===null)return`${encodeURIComponent(t)}=`;throw new Error(`Cannot stringify type ${typeof n}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`)}).join("&")}async fetchWithTimeout(e,t,n,i){const{signal:s,...a}=t||{};s&&s.addEventListener("abort",()=>i.abort());const o=setTimeout(()=>i.abort(),n);return this.getRequestClient().fetch(e,{signal:i.signal,...a}).finally(()=>{clearTimeout(o)})}getRequestClient(){return{fetch:this.fetch}}shouldRetry(e){const t=e.headers.get("x-should-retry");return t==="true"?!0:t==="false"?!1:e.status===409||e.status===429||e.status>=500}async retryRequest(e,t,n){var i;t-=1;const s=parseInt((n==null?void 0:n["retry-after"])||""),a=(i=e.maxRetries)!==null&&i!==void 0?i:this.maxRetries,o=this.calculateRetryTimeoutSeconds(t,s,a)*1e3;return await Xd(o),this.makeRequest(e,t)}calculateRetryTimeoutSeconds(e,t,n){if(Number.isInteger(t)&&t<=60)return t;const a=n-e,o=Math.min(.5*Math.pow(a-1,2),2),u=Math.random()-.5;return o+u}getUserAgent(){return`${this.constructor.name}/JS ${Kt}`}}class Uo{constructor(e,t,n,i){Fr.set(this,void 0),$d(this,Fr,e,"f"),this.options=i,this.response=t,this.body=n}hasNextPage(){return this.getPaginatedItems().length?this.nextPageInfo()!=null:!1}async getNextPage(){const e=this.nextPageInfo();if(!e)throw new Error("No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.");const t={...this.options};if("params"in e)t.query={...t.query,...e.params};else if("url"in e){const n=[...Object.entries(t.query||{}),...e.url.searchParams.entries()];for(const[i,s]of n)e.url.searchParams.set(i,s);t.query=void 0,t.path=e.url.toString()}return await zd(this,Fr,"f").requestAPIList(this.constructor,t)}async*iterPages(){let e=this;for(yield e;e.hasNextPage();)e=await e.getNextPage(),yield e}async*[(Fr=new WeakMap,Symbol.asyncIterator)](){for await(const e of this.iterPages())for(const t of e.getPaginatedItems())yield t}}class Vd extends Zn{constructor(e,t,n){super(t,async i=>new n(e,i.response,await Lo(i),i.options))}async*[Symbol.asyncIterator](){const e=await this;for await(const t of e)yield t}}const Fd=r=>new Proxy(Object.fromEntries(r.entries()),{get(e,t){const n=t.toString();return e[n.toLowerCase()]||e[n]}}),Kd={method:!0,path:!0,query:!0,body:!0,headers:!0,maxRetries:!0,stream:!0,timeout:!0,httpAgent:!0,signal:!0,idempotencyKey:!0},oa=r=>typeof r=="object"&&r!==null&&!$o(r)&&Object.keys(r).every(e=>Qd(Kd,e)),qd=()=>{if(typeof Deno<"u"&&Deno.build!=null)return{"X-Stainless-Lang":"js","X-Stainless-Package-Version":Kt,"X-Stainless-OS":ca(Deno.build.os),"X-Stainless-Arch":ua(Deno.build.arch),"X-Stainless-Runtime":"deno","X-Stainless-Runtime-Version":Deno.version};if(typeof EdgeRuntime<"u")return{"X-Stainless-Lang":"js","X-Stainless-Package-Version":Kt,"X-Stainless-OS":"Unknown","X-Stainless-Arch":`other:${EdgeRuntime}`,"X-Stainless-Runtime":"edge","X-Stainless-Runtime-Version":process.version};if(Object.prototype.toString.call(typeof process<"u"?process:0)==="[object process]")return{"X-Stainless-Lang":"js","X-Stainless-Package-Version":Kt,"X-Stainless-OS":ca(process.platform),"X-Stainless-Arch":ua(process.arch),"X-Stainless-Runtime":"node","X-Stainless-Runtime-Version":process.version};const r=Hd();return r?{"X-Stainless-Lang":"js","X-Stainless-Package-Version":Kt,"X-Stainless-OS":"Unknown","X-Stainless-Arch":"unknown","X-Stainless-Runtime":`browser:${r.browser}`,"X-Stainless-Runtime-Version":r.version}:{"X-Stainless-Lang":"js","X-Stainless-Package-Version":Kt,"X-Stainless-OS":"Unknown","X-Stainless-Arch":"unknown","X-Stainless-Runtime":"unknown","X-Stainless-Runtime-Version":"unknown"}};function Hd(){if(typeof navigator>"u"||!navigator)return null;const r=[{key:"edge",pattern:/Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"ie",pattern:/MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"ie",pattern:/Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"chrome",pattern:/Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"firefox",pattern:/Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"safari",pattern:/(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/}];for(const{key:e,pattern:t}of r){const n=t.exec(navigator.userAgent);if(n){const i=n[1]||0,s=n[2]||0,a=n[3]||0;return{browser:e,version:`${i}.${s}.${a}`}}}return null}const ua=r=>r==="x32"?"x32":r==="x86_64"||r==="x64"?"x64":r==="arm"?"arm":r==="aarch64"||r==="arm64"?"arm64":r?`other:${r}`:"unknown",ca=r=>(r=r.toLowerCase(),r.includes("ios")?"iOS":r==="android"?"Android":r==="darwin"?"MacOS":r==="win32"?"Windows":r==="freebsd"?"FreeBSD":r==="openbsd"?"OpenBSD":r==="linux"?"Linux":r?`Other:${r}`:"Unknown");let Kr;const Wd=()=>Kr??(Kr=qd()),Gd=r=>{try{return JSON.parse(r)}catch{return}},Yd=new RegExp("^(?:[a-z]+:)?//","i"),Jd=r=>Yd.test(r),Xd=r=>new Promise(e=>setTimeout(e,r)),wi=(r,e)=>{if(typeof e!="number"||!Number.isInteger(e))throw new Error(`${r} must be an integer`);if(e<0)throw new Error(`${r} must be a positive integer`);return e},Mo=r=>r instanceof Error?r:new Error(r),la=r=>{var e,t,n,i;if(typeof process<"u")return(t=(e=process.env)===null||e===void 0?void 0:e[r])!==null&&t!==void 0?t:void 0;if(typeof Deno<"u")return(i=(n=Deno.env)===null||n===void 0?void 0:n.get)===null||i===void 0?void 0:i.call(n,r)};function $o(r){if(!r)return!0;for(const e in r)return!1;return!0}function Qd(r,e){return Object.prototype.hasOwnProperty.call(r,e)}function an(r,...e){typeof process<"u"&&process.env.DEBUG==="true"&&console.log(`OpenAI:DEBUG:${r}`,...e)}const ef=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,r=>{const e=Math.random()*16|0;return(r==="x"?e:e&3|8).toString(16)}),tf=()=>typeof window<"u"&&typeof window.document<"u"&&typeof navigator<"u";class Vn extends Uo{constructor(e,t,n,i){super(e,t,n,i),this.object=n.object,this.data=n.data}getPaginatedItems(){return this.data}nextPageParams(){return null}nextPageInfo(){return null}}class Is extends Uo{constructor(e,t,n,i){super(e,t,n,i),this.data=n.data}getPaginatedItems(){return this.data}nextPageParams(){const e=this.nextPageInfo();if(!e)return null;if("params"in e)return e.params;const t=Object.fromEntries(e.url.searchParams);return Object.keys(t).length?t:null}nextPageInfo(){var e,t;if(!(!((e=this.data)===null||e===void 0)&&e.length))return null;const n=(t=this.data[this.data.length-1])===null||t===void 0?void 0:t.id;return n?{params:{after:n}}:null}}class Fe{constructor(e){this.client=e,this.get=e.get.bind(e),this.post=e.post.bind(e),this.patch=e.patch.bind(e),this.put=e.put.bind(e),this.delete=e.delete.bind(e),this.getAPIList=e.getAPIList.bind(e)}}class on extends Fe{create(e,t){return this.post("/audio/transcriptions",Sr({body:e,...t}))}}on||(on={});class un extends Fe{create(e,t){return this.post("/audio/translations",Sr({body:e,...t}))}}un||(un={});class cn extends Fe{constructor(){super(...arguments),this.transcriptions=new on(this.client),this.translations=new un(this.client)}}(function(r){r.Transcriptions=on,r.Translations=un})(cn||(cn={}));let ln=class extends Fe{create(e,t){var n;return this.post("/chat/completions",{body:e,...t,stream:(n=e.stream)!==null&&n!==void 0?n:!1})}};ln||(ln={});class dn extends Fe{constructor(){super(...arguments),this.completions=new ln(this.client)}}(function(r){r.Completions=ln})(dn||(dn={}));class fn extends Fe{create(e,t){var n;return this.post("/completions",{body:e,...t,stream:(n=e.stream)!==null&&n!==void 0?n:!1})}}fn||(fn={});let hn=class extends Fe{create(e,t){return this.post("/embeddings",{body:e,...t})}};hn||(hn={});class pn extends Fe{create(e,t){return this.post("/edits",{body:e,...t})}}pn||(pn={});class mn extends Fe{create(e,t){return this.post("/files",Sr({body:e,...t}))}retrieve(e,t){return this.get(`/files/${e}`,t)}list(e){return this.getAPIList("/files",zo,e)}del(e,t){return this.delete(`/files/${e}`,t)}retrieveContent(e,t){return this.get(`/files/${e}/content`,{...t,headers:{Accept:"application/json",...t==null?void 0:t.headers}})}}class zo extends Vn{}mn||(mn={});class gn extends Fe{create(e,t){return this.post("/fine-tunes",{body:e,...t})}retrieve(e,t){return this.get(`/fine-tunes/${e}`,t)}list(e){return this.getAPIList("/fine-tunes",Bo,e)}cancel(e,t){return this.post(`/fine-tunes/${e}/cancel`,t)}listEvents(e,t,n){var i;return this.get(`/fine-tunes/${e}/events`,{query:t,timeout:864e5,...n,stream:(i=t==null?void 0:t.stream)!==null&&i!==void 0?i:!1})}}class Bo extends Vn{}gn||(gn={});class yn extends Fe{create(e,t){return this.post("/fine_tuning/jobs",{body:e,...t})}retrieve(e,t){return this.get(`/fine_tuning/jobs/${e}`,t)}list(e={},t){return oa(e)?this.list({},e):this.getAPIList("/fine_tuning/jobs",Zo,{query:e,...t})}cancel(e,t){return this.post(`/fine_tuning/jobs/${e}/cancel`,t)}listEvents(e,t={},n){return oa(t)?this.listEvents(e,{},t):this.getAPIList(`/fine_tuning/jobs/${e}/events`,Vo,{query:t,...n})}}class Zo extends Is{}class Vo extends Is{}yn||(yn={});class bn extends Fe{constructor(){super(...arguments),this.jobs=new yn(this.client)}}(function(r){r.Jobs=yn,r.FineTuningJobsPage=Zo,r.FineTuningJobEventsPage=Vo})(bn||(bn={}));class vn extends Fe{createVariation(e,t){return this.post("/images/variations",Sr({body:e,...t}))}edit(e,t){return this.post("/images/edits",Sr({body:e,...t}))}generate(e,t){return this.post("/images/generations",{body:e,...t})}}vn||(vn={});class wn extends Fe{retrieve(e,t){return this.get(`/models/${e}`,t)}list(e){return this.getAPIList("/models",Fo,e)}del(e,t){return this.delete(`/models/${e}`,t)}}class Fo extends Vn{}wn||(wn={});class _n extends Fe{create(e,t){return this.post("/moderations",{body:e,...t})}}_n||(_n={});var Ko;let Pe=class extends Zd{constructor(e){var t,n,{apiKey:i=la("OPENAI_API_KEY"),organization:s=(t=la("OPENAI_ORG_ID"))!==null&&t!==void 0?t:null,...a}=e===void 0?{}:e;if(i===void 0)throw new Error("The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'my apiKey' }).");const o={apiKey:i,organization:s,baseURL:"https://api.openai.com/v1",...a};if(!o.dangerouslyAllowBrowser&&tf())throw new Error(`It looks like you're running in a browser-like environment.

This is disabled by default, as it risks exposing your secret API credentials to attackers.
If you understand the risks and have appropriate mitigations in place,
you can set the \`dangerouslyAllowBrowser\` option to \`true\`, e.g.,

new OpenAI({ apiKey, dangerouslyAllowBrowser: true });

https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety
`);super({baseURL:o.baseURL,timeout:(n=o.timeout)!==null&&n!==void 0?n:6e5,httpAgent:o.httpAgent,maxRetries:o.maxRetries,fetch:o.fetch}),this.completions=new fn(this),this.chat=new dn(this),this.edits=new pn(this),this.embeddings=new hn(this),this.files=new mn(this),this.images=new vn(this),this.audio=new cn(this),this.moderations=new _n(this),this.models=new wn(this),this.fineTuning=new bn(this),this.fineTunes=new gn(this),this._options=o,this.apiKey=i,this.organization=s}defaultQuery(){return this._options.defaultQuery}defaultHeaders(e){return{...super.defaultHeaders(e),"OpenAI-Organization":this.organization,...this._options.defaultHeaders}}authHeaders(e){return{Authorization:`Bearer ${this.apiKey}`}}};Ko=Pe;Pe.OpenAI=Ko;Pe.APIError=Je;Pe.APIConnectionError=jr;Pe.APIConnectionTimeoutError=hs;Pe.APIUserAbortError=sn;Pe.NotFoundError=ys;Pe.ConflictError=bs;Pe.RateLimitError=ws;Pe.BadRequestError=ps;Pe.AuthenticationError=ms;Pe.InternalServerError=_s;Pe.PermissionDeniedError=gs;Pe.UnprocessableEntityError=vs;const{APIError:Gy,APIConnectionError:Yy,APIConnectionTimeoutError:rf,APIUserAbortError:nf,NotFoundError:Jy,ConflictError:Xy,RateLimitError:Qy,BadRequestError:eb,AuthenticationError:tb,InternalServerError:rb,PermissionDeniedError:nb,UnprocessableEntityError:ib}=Ad;(function(r){r.toFile=jo,r.fileFromPath=Sd,r.Page=Vn,r.CursorPage=Is,r.Completions=fn,r.Chat=dn,r.Edits=pn,r.Embeddings=hn,r.Files=mn,r.FileObjectsPage=zo,r.Images=vn,r.Audio=cn,r.Moderations=_n,r.Models=wn,r.ModelsPage=Fo,r.FineTuning=bn,r.FineTunes=gn,r.FineTunesPage=Bo})(Pe||(Pe={}));var sf=Object.defineProperty,af=(r,e,t)=>e in r?sf(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,of=(r,e,t)=>(af(r,typeof e!="symbol"?e+"":e,t),t),Fn={};Fn.byteLength=lf;Fn.toByteArray=ff;Fn.fromByteArray=mf;var ot=[],et=[],uf=typeof Uint8Array<"u"?Uint8Array:Array,_i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var Zt=0,cf=_i.length;Zt<cf;++Zt)ot[Zt]=_i[Zt],et[_i.charCodeAt(Zt)]=Zt;et["-".charCodeAt(0)]=62;et["_".charCodeAt(0)]=63;function qo(r){var e=r.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var t=r.indexOf("=");t===-1&&(t=e);var n=t===e?0:4-t%4;return[t,n]}function lf(r){var e=qo(r),t=e[0],n=e[1];return(t+n)*3/4-n}function df(r,e,t){return(e+t)*3/4-t}function ff(r){var e,t=qo(r),n=t[0],i=t[1],s=new uf(df(r,n,i)),a=0,o=i>0?n-4:n,u;for(u=0;u<o;u+=4)e=et[r.charCodeAt(u)]<<18|et[r.charCodeAt(u+1)]<<12|et[r.charCodeAt(u+2)]<<6|et[r.charCodeAt(u+3)],s[a++]=e>>16&255,s[a++]=e>>8&255,s[a++]=e&255;return i===2&&(e=et[r.charCodeAt(u)]<<2|et[r.charCodeAt(u+1)]>>4,s[a++]=e&255),i===1&&(e=et[r.charCodeAt(u)]<<10|et[r.charCodeAt(u+1)]<<4|et[r.charCodeAt(u+2)]>>2,s[a++]=e>>8&255,s[a++]=e&255),s}function hf(r){return ot[r>>18&63]+ot[r>>12&63]+ot[r>>6&63]+ot[r&63]}function pf(r,e,t){for(var n,i=[],s=e;s<t;s+=3)n=(r[s]<<16&16711680)+(r[s+1]<<8&65280)+(r[s+2]&255),i.push(hf(n));return i.join("")}function mf(r){for(var e,t=r.length,n=t%3,i=[],s=16383,a=0,o=t-n;a<o;a+=s)i.push(pf(r,a,a+s>o?o:a+s));return n===1?(e=r[t-1],i.push(ot[e>>2]+ot[e<<4&63]+"==")):n===2&&(e=(r[t-2]<<8)+r[t-1],i.push(ot[e>>10]+ot[e>>4&63]+ot[e<<2&63]+"=")),i.join("")}function gf(r,e){let t=Array.from({length:r.length},(n,i)=>({start:i,end:i+1}));for(;t.length>1;){let n=null;for(let i=0;i<t.length-1;i++){const s=r.slice(t[i].start,t[i+1].end),a=e.get(s.join(","));a!=null&&(n==null||a<n[0])&&(n=[a,i])}if(n!=null){const i=n[1];t[i]={start:t[i].start,end:t[i+1].end},t.splice(i+1,1)}else break}return t}function yf(r,e){return r.length===1?[e.get(r.join(","))]:gf(r,e).map(t=>e.get(r.slice(t.start,t.end).join(","))).filter(t=>t!=null)}function bf(r){return r.replace(/[\\^$*+?.()|[\]{}]/g,"\\$&")}var Ki=class{constructor(r,e){Ee(this,"specialTokens");Ee(this,"inverseSpecialTokens");Ee(this,"patStr");Ee(this,"textEncoder",new TextEncoder);Ee(this,"textDecoder",new TextDecoder("utf-8"));Ee(this,"rankMap",new Map);Ee(this,"textMap",new Map);this.patStr=r.pat_str;const t=r.bpe_ranks.split(`
`).filter(Boolean).reduce((n,i)=>{const[s,a,...o]=i.split(" "),u=Number.parseInt(a,10);return o.forEach((c,d)=>n[c]=u+d),n},{});for(const[n,i]of Object.entries(t)){const s=Fn.toByteArray(n);this.rankMap.set(s.join(","),i),this.textMap.set(i,s)}this.specialTokens={...r.special_tokens,...e},this.inverseSpecialTokens=Object.entries(this.specialTokens).reduce((n,[i,s])=>(n[s]=this.textEncoder.encode(i),n),{})}encode(r,e=[],t="all"){const n=new RegExp(this.patStr,"ug"),i=Ki.specialTokenRegex(Object.keys(this.specialTokens)),s=[],a=new Set(e==="all"?Object.keys(this.specialTokens):e),o=new Set(t==="all"?Object.keys(this.specialTokens).filter(c=>!a.has(c)):t);if(o.size>0){const c=Ki.specialTokenRegex([...o]),d=r.match(c);if(d!=null)throw new Error(`The text contains a special token that is not allowed: ${d[0]}`)}let u=0;for(;;){let c=null,d=u;for(;i.lastIndex=d,c=i.exec(r),!(c==null||a.has(c[0]));)d=c.index+1;const f=(c==null?void 0:c.index)??r.length;for(const b of r.substring(u,f).matchAll(n)){const g=this.textEncoder.encode(b[0]),_=this.rankMap.get(g.join(","));if(_!=null){s.push(_);continue}s.push(...yf(g,this.rankMap))}if(c==null)break;let m=this.specialTokens[c[0]];s.push(m),u=c.index+c[0].length}return s}decode(r){const e=[];let t=0;for(let s=0;s<r.length;++s){const a=r[s],o=this.textMap.get(a)??this.inverseSpecialTokens[a];o!=null&&(e.push(o),t+=o.length)}const n=new Uint8Array(t);let i=0;for(const s of e)n.set(s,i),i+=s.length;return this.textDecoder.decode(n)}},Ho=Ki;of(Ho,"specialTokenRegex",r=>new RegExp(r.map(e=>bf(e)).join("|"),"g"));function vf(r){switch(r){case"gpt2":return"gpt2";case"code-cushman-001":case"code-cushman-002":case"code-davinci-001":case"code-davinci-002":case"cushman-codex":case"davinci-codex":case"text-davinci-002":case"text-davinci-003":return"p50k_base";case"code-davinci-edit-001":case"text-davinci-edit-001":return"p50k_edit";case"ada":case"babbage":case"code-search-ada-code-001":case"code-search-babbage-code-001":case"curie":case"davinci":case"text-ada-001":case"text-babbage-001":case"text-curie-001":case"text-davinci-001":case"text-search-ada-doc-001":case"text-search-babbage-doc-001":case"text-search-curie-doc-001":case"text-search-davinci-doc-001":case"text-similarity-ada-001":case"text-similarity-babbage-001":case"text-similarity-curie-001":case"text-similarity-davinci-001":return"r50k_base";case"gpt-3.5-turbo-16k-0613":case"gpt-3.5-turbo-16k":case"gpt-3.5-turbo-0613":case"gpt-3.5-turbo-0301":case"gpt-3.5-turbo":case"gpt-4-32k-0613":case"gpt-4-32k-0314":case"gpt-4-32k":case"gpt-4-0613":case"gpt-4-0314":case"gpt-4":case"text-embedding-ada-002":return"cl100k_base";default:throw new Error("Unknown model")}}const qr={},wf=new zn({});async function _f(r,e){return r in qr||(qr[r]=wf.fetch(`https://tiktoken.pages.dev/js/${r}.json`,{signal:e==null?void 0:e.signal}).then(t=>t.json()).catch(t=>{throw delete qr[r],t})),new Ho(await qr[r],e==null?void 0:e.extendedSpecialTokens)}async function Wo(r,e){return _f(vf(r),e)}const Cr=r=>r.startsWith("gpt-3.5-turbo-16k")?"gpt-3.5-turbo-16k":r.startsWith("gpt-3.5-turbo-")?"gpt-3.5-turbo":r.startsWith("gpt-4-32k")?"gpt-4-32k":r.startsWith("gpt-4-")?"gpt-4":r,If=r=>{switch(Cr(r)){case"gpt-3.5-turbo-16k":return 16384;case"gpt-3.5-turbo":return 4096;case"gpt-4-32k":return 32768;case"gpt-4":return 8192;case"text-davinci-003":return 4097;case"text-curie-001":return 2048;case"text-babbage-001":return 2048;case"text-ada-001":return 2048;case"code-davinci-002":return 8e3;case"code-cushman-001":return 2048;default:return 4097}},Af=async({prompt:r,modelName:e})=>{let t;try{t=(await Wo(Cr(e))).encode(r).length}catch{console.warn("Failed to calculate number of tokens, falling back to approximate count"),t=Math.ceil(r.length/4)}return If(e)-t},Go="__run";class nr{constructor(e){Object.defineProperty(this,"text",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"generationInfo",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.text=e.text,this.generationInfo=e.generationInfo}concat(e){return new nr({text:this.text+e.text,generationInfo:{...this.generationInfo,...e.generationInfo}})}}class Lr extends _t{get text(){return this.content}constructor(e,t){typeof e=="string"&&(e={content:e,additional_kwargs:t}),e.additional_kwargs||(e.additional_kwargs={}),super(e),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","schema"]}),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"content",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"additional_kwargs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.name=e.name,this.content=e.content,this.additional_kwargs=e.additional_kwargs}toDict(){return{type:this._getType(),data:this.toJSON().kwargs}}}class Ur extends Lr{static _mergeAdditionalKwargs(e,t){const n={...e};for(const[i,s]of Object.entries(t))if(n[i]===void 0)n[i]=s;else{if(typeof n[i]!=typeof s)throw new Error(`additional_kwargs[${i}] already exists in the message chunk, but with a different type.`);if(typeof n[i]=="string")n[i]=n[i]+s;else if(!Array.isArray(n[i])&&typeof n[i]=="object")n[i]=this._mergeAdditionalKwargs(n[i],s);else throw new Error(`additional_kwargs[${i}] already exists in this message chunk.`)}return n}}class kr extends Lr{static lc_name(){return"HumanMessage"}_getType(){return"human"}}class In extends Ur{static lc_name(){return"HumanMessageChunk"}_getType(){return"human"}concat(e){return new In({content:this.content+e.content,additional_kwargs:In._mergeAdditionalKwargs(this.additional_kwargs,e.additional_kwargs)})}}class As extends Lr{static lc_name(){return"AIMessage"}_getType(){return"ai"}}class An extends Ur{static lc_name(){return"AIMessageChunk"}_getType(){return"ai"}concat(e){return new An({content:this.content+e.content,additional_kwargs:An._mergeAdditionalKwargs(this.additional_kwargs,e.additional_kwargs)})}}class Yo extends Lr{static lc_name(){return"SystemMessage"}_getType(){return"system"}}class En extends Ur{static lc_name(){return"SystemMessageChunk"}_getType(){return"system"}concat(e){return new En({content:this.content+e.content,additional_kwargs:En._mergeAdditionalKwargs(this.additional_kwargs,e.additional_kwargs)})}}class Tn extends Ur{static lc_name(){return"FunctionMessageChunk"}_getType(){return"function"}concat(e){return new Tn({content:this.content+e.content,additional_kwargs:Tn._mergeAdditionalKwargs(this.additional_kwargs,e.additional_kwargs),name:this.name??""})}}class Jo extends Lr{static lc_name(){return"ChatMessage"}constructor(e,t){typeof e=="string"&&(e={content:e,role:t}),super(e),Object.defineProperty(this,"role",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.role=e.role}_getType(){return"generic"}static isInstance(e){return e._getType()==="generic"}}function Ef(r){return typeof(r==null?void 0:r._getType)=="function"}function Qr(r){if(typeof r=="string")return new kr(r);if(Ef(r))return r;const[e,t]=r;if(e==="human"||e==="user")return new kr({content:t});if(e==="ai"||e==="assistant")return new As({content:t});if(e==="system")return new Yo({content:t});throw new Error("Unable to coerce message from array: only human, AI, or system message coercion is currently supported.")}class Pn extends Ur{static lc_name(){return"ChatMessageChunk"}constructor(e,t){typeof e=="string"&&(e={content:e,role:t}),super(e),Object.defineProperty(this,"role",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.role=e.role}_getType(){return"generic"}concat(e){return new Pn({content:this.content+e.content,additional_kwargs:Pn._mergeAdditionalKwargs(this.additional_kwargs,e.additional_kwargs),role:this.role})}}class Es extends nr{constructor(e){super(e),Object.defineProperty(this,"message",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.message=e.message}concat(e){return new Es({text:this.text+e.text,generationInfo:{...this.generationInfo,...e.generationInfo},message:this.message.concat(e.message)})}}class Xo extends _t{}class Tf{}function Kn(r){const{azureOpenAIApiDeploymentName:e,azureOpenAIApiInstanceName:t,azureOpenAIApiKey:n,azureOpenAIBasePath:i,baseURL:s}=r;if(n&&i&&e)return`${i}/${e}`;if(n){if(!t)throw new Error("azureOpenAIApiInstanceName is required when using azureOpenAIApiKey");if(!e)throw new Error("azureOpenAIApiDeploymentName is a required parameter when using azureOpenAIApiKey");return`https://${t}.openai.azure.com/openai/deployments/${e}`}return s}const qi=(r,e)=>r.reduce((t,n,i)=>{const s=Math.floor(i/e),a=t[s]||[];return t[s]=a.concat([n]),t},[]);class Qo extends Xo{constructor(e){super(...arguments),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","prompts","base"]}),Object.defineProperty(this,"value",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.value=e}toString(){return this.value}toChatMessages(){return[new kr(this.value)]}}class Pf extends Se{get lc_attributes(){return{partialVariables:void 0}}constructor(e){super(e),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","prompts",this._getPromptType()]}),Object.defineProperty(this,"inputVariables",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"outputParser",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"partialVariables",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const{inputVariables:t}=e;if(t.includes("stop"))throw new Error("Cannot have an input variable named 'stop', as it is used internally, please rename.");Object.assign(this,e)}async mergePartialAndUserVariables(e){const t=this.partialVariables??{},n={};for(const[s,a]of Object.entries(t))typeof a=="string"?n[s]=a:n[s]=await a();return{...n,...e}}async invoke(e,t){return this._callWithConfig(n=>this.formatPromptValue(n),e,{...t,runType:"prompt"})}serialize(){throw new Error("Use .toJSON() instead")}static async deserialize(e){switch(e._type){case"prompt":{const{PromptTemplate:t}=await Promise.resolve().then(()=>da);return t.deserialize(e)}case void 0:{const{PromptTemplate:t}=await Promise.resolve().then(()=>da);return t.deserialize({...e,_type:"prompt"})}case"few_shot":{const{FewShotPromptTemplate:t}=await Promise.resolve().then(()=>zf);return t.deserialize(e)}default:throw new Error(`Invalid prompt type in config: ${e._type}`)}}}class eu extends Pf{async formatPromptValue(e){const t=await this.format(e);return new Qo(t)}}const tu=r=>{const e=r.split(""),t=[],n=(s,a)=>{for(let o=a;o<e.length;o+=1)if(s.includes(e[o]))return o;return-1};let i=0;for(;i<e.length;)if(e[i]==="{"&&i+1<e.length&&e[i+1]==="{")t.push({type:"literal",text:"{"}),i+=2;else if(e[i]==="}"&&i+1<e.length&&e[i+1]==="}")t.push({type:"literal",text:"}"}),i+=2;else if(e[i]==="{"){const s=n("}",i);if(s<0)throw new Error("Unclosed '{' in template.");t.push({type:"variable",name:e.slice(i+1,s).join("")}),i=s+1}else{if(e[i]==="}")throw new Error("Single '}' in template.");{const s=n("{}",i),a=(s<0?e.slice(i):e.slice(i,s)).join("");t.push({type:"literal",text:a}),i=s<0?e.length:s}}return t},Of=(r,e)=>tu(r).reduce((t,n)=>{if(n.type==="variable"){if(n.name in e)return t+e[n.name];throw new Error(`Missing value for input ${n.name}`)}return t+n.text},""),Hi={"f-string":Of},xf={"f-string":tu},Ts=(r,e,t)=>Hi[e](r,t),Sf=(r,e)=>xf[e](r),ru=(r,e,t)=>{if(!(e in Hi)){const n=Object.keys(Hi);throw new Error(`Invalid template format. Got \`${e}\`;
                         should be one of ${n}`)}try{const n=t.reduce((i,s)=>(i[s]="foo",i),{});Ts(r,e,n)}catch(n){throw new Error(`Invalid prompt schema: ${n.message}`)}};class vt extends eu{static lc_name(){return"PromptTemplate"}constructor(e){if(super(e),Object.defineProperty(this,"template",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"templateFormat",{enumerable:!0,configurable:!0,writable:!0,value:"f-string"}),Object.defineProperty(this,"validateTemplate",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e),this.validateTemplate){let t=this.inputVariables;this.partialVariables&&(t=t.concat(Object.keys(this.partialVariables))),ru(this.template,this.templateFormat,t)}}_getPromptType(){return"prompt"}async format(e){const t=await this.mergePartialAndUserVariables(e);return Ts(this.template,this.templateFormat,t)}static fromExamples(e,t,n,i=`

`,s=""){const a=[s,...e,t].join(i);return new vt({inputVariables:n,template:a})}static fromTemplate(e,{templateFormat:t="f-string",...n}={}){const i=new Set;return Sf(e,t).forEach(s=>{s.type==="variable"&&i.add(s.name)}),new vt({inputVariables:[...i],templateFormat:t,template:e,...n})}async partial(e){const t=this.inputVariables.filter(s=>!(s in e)),n={...this.partialVariables??{},...e},i={...this,inputVariables:t,partialVariables:n};return new vt(i)}serialize(){if(this.outputParser!==void 0)throw new Error("Cannot serialize a prompt template with an output parser");return{_type:this._getPromptType(),input_variables:this.inputVariables,template:this.template,template_format:this.templateFormat}}static async deserialize(e){if(!e.template)throw new Error("Prompt template must have a template");return new vt({inputVariables:e.input_variables,template:e.template,templateFormat:e.template_format})}}const da=Object.freeze(Object.defineProperty({__proto__:null,PromptTemplate:vt},Symbol.toStringTag,{value:"Module"}));class Cf extends Xo{static lc_name(){return"ChatPromptValue"}constructor(e){Array.isArray(e)&&(e={messages:e}),super(...arguments),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","prompts","chat"]}),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"messages",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.messages=e.messages}toString(){return Mn(this.messages)}toChatMessages(){return this.messages}}function Hr(r){throw new Error('Could not dynamically require "'+r+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var nu={exports:{}};(function(r,e){(function(t){r.exports=t()})(function(){return function t(n,i,s){function a(c,d){if(!i[c]){if(!n[c]){var f=typeof Hr=="function"&&Hr;if(!d&&f)return f(c,!0);if(o)return o(c,!0);throw new Error("Cannot find module '"+c+"'")}d=i[c]={exports:{}},n[c][0].call(d.exports,function(m){var b=n[c][1][m];return a(b||m)},d,d.exports,t,n,i,s)}return i[c].exports}for(var o=typeof Hr=="function"&&Hr,u=0;u<s.length;u++)a(s[u]);return a}({1:[function(t,n,i){(function(s,a,o,u,c,d,f,m,b){var g=t("crypto");function _(O,C){C=j(O,C);var v;return(v=C.algorithm!=="passthrough"?g.createHash(C.algorithm):new M).write===void 0&&(v.write=v.update,v.end=v.update),R(C,v).dispatch(O),v.update||v.end(""),v.digest?v.digest(C.encoding==="buffer"?void 0:C.encoding):(O=v.read(),C.encoding!=="buffer"?O.toString(C.encoding):O)}(i=n.exports=_).sha1=function(O){return _(O)},i.keys=function(O){return _(O,{excludeValues:!0,algorithm:"sha1",encoding:"hex"})},i.MD5=function(O){return _(O,{algorithm:"md5",encoding:"hex"})},i.keysMD5=function(O){return _(O,{algorithm:"md5",encoding:"hex",excludeValues:!0})};var h=g.getHashes?g.getHashes().slice():["sha1","md5"],T=(h.push("passthrough"),["buffer","hex","binary","base64"]);function j(O,C){var v={};if(v.algorithm=(C=C||{}).algorithm||"sha1",v.encoding=C.encoding||"hex",v.excludeValues=!!C.excludeValues,v.algorithm=v.algorithm.toLowerCase(),v.encoding=v.encoding.toLowerCase(),v.ignoreUnknown=C.ignoreUnknown===!0,v.respectType=C.respectType!==!1,v.respectFunctionNames=C.respectFunctionNames!==!1,v.respectFunctionProperties=C.respectFunctionProperties!==!1,v.unorderedArrays=C.unorderedArrays===!0,v.unorderedSets=C.unorderedSets!==!1,v.unorderedObjects=C.unorderedObjects!==!1,v.replacer=C.replacer||void 0,v.excludeKeys=C.excludeKeys||void 0,O===void 0)throw new Error("Object argument required.");for(var A=0;A<h.length;++A)h[A].toLowerCase()===v.algorithm.toLowerCase()&&(v.algorithm=h[A]);if(h.indexOf(v.algorithm)===-1)throw new Error('Algorithm "'+v.algorithm+'"  not supported. supported values: '+h.join(", "));if(T.indexOf(v.encoding)===-1&&v.algorithm!=="passthrough")throw new Error('Encoding "'+v.encoding+'"  not supported. supported values: '+T.join(", "));return v}function S(O){if(typeof O=="function")return/^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(O))!=null}function R(O,C,v){v=v||[];function A(I){return C.update?C.update(I,"utf8"):C.write(I,"utf8")}return{dispatch:function(I){return this["_"+((I=O.replacer?O.replacer(I):I)===null?"null":typeof I)](I)},_object:function(I){var N,L=Object.prototype.toString.call(I),q=/\[object (.*)\]/i.exec(L);if(q=(q=q?q[1]:"unknown:["+L+"]").toLowerCase(),0<=(L=v.indexOf(I)))return this.dispatch("[CIRCULAR:"+L+"]");if(v.push(I),o!==void 0&&o.isBuffer&&o.isBuffer(I))return A("buffer:"),A(I);if(q==="object"||q==="function"||q==="asyncfunction")return L=Object.keys(I),O.unorderedObjects&&(L=L.sort()),O.respectType===!1||S(I)||L.splice(0,0,"prototype","__proto__","constructor"),O.excludeKeys&&(L=L.filter(function(Y){return!O.excludeKeys(Y)})),A("object:"+L.length+":"),N=this,L.forEach(function(Y){N.dispatch(Y),A(":"),O.excludeValues||N.dispatch(I[Y]),A(",")});if(!this["_"+q]){if(O.ignoreUnknown)return A("["+q+"]");throw new Error('Unknown object type "'+q+'"')}this["_"+q](I)},_array:function(I,Y){Y=Y!==void 0?Y:O.unorderedArrays!==!1;var L=this;if(A("array:"+I.length+":"),!Y||I.length<=1)return I.forEach(function(K){return L.dispatch(K)});var q=[],Y=I.map(function(K){var V=new M,B=v.slice();return R(O,V,B).dispatch(K),q=q.concat(B.slice(v.length)),V.read().toString()});return v=v.concat(q),Y.sort(),this._array(Y,!1)},_date:function(I){return A("date:"+I.toJSON())},_symbol:function(I){return A("symbol:"+I.toString())},_error:function(I){return A("error:"+I.toString())},_boolean:function(I){return A("bool:"+I.toString())},_string:function(I){A("string:"+I.length+":"),A(I.toString())},_function:function(I){A("fn:"),S(I)?this.dispatch("[native]"):this.dispatch(I.toString()),O.respectFunctionNames!==!1&&this.dispatch("function-name:"+String(I.name)),O.respectFunctionProperties&&this._object(I)},_number:function(I){return A("number:"+I.toString())},_xml:function(I){return A("xml:"+I.toString())},_null:function(){return A("Null")},_undefined:function(){return A("Undefined")},_regexp:function(I){return A("regex:"+I.toString())},_uint8array:function(I){return A("uint8array:"),this.dispatch(Array.prototype.slice.call(I))},_uint8clampedarray:function(I){return A("uint8clampedarray:"),this.dispatch(Array.prototype.slice.call(I))},_int8array:function(I){return A("int8array:"),this.dispatch(Array.prototype.slice.call(I))},_uint16array:function(I){return A("uint16array:"),this.dispatch(Array.prototype.slice.call(I))},_int16array:function(I){return A("int16array:"),this.dispatch(Array.prototype.slice.call(I))},_uint32array:function(I){return A("uint32array:"),this.dispatch(Array.prototype.slice.call(I))},_int32array:function(I){return A("int32array:"),this.dispatch(Array.prototype.slice.call(I))},_float32array:function(I){return A("float32array:"),this.dispatch(Array.prototype.slice.call(I))},_float64array:function(I){return A("float64array:"),this.dispatch(Array.prototype.slice.call(I))},_arraybuffer:function(I){return A("arraybuffer:"),this.dispatch(new Uint8Array(I))},_url:function(I){return A("url:"+I.toString())},_map:function(I){return A("map:"),I=Array.from(I),this._array(I,O.unorderedSets!==!1)},_set:function(I){return A("set:"),I=Array.from(I),this._array(I,O.unorderedSets!==!1)},_file:function(I){return A("file:"),this.dispatch([I.name,I.size,I.type,I.lastModfied])},_blob:function(){if(O.ignoreUnknown)return A("[blob]");throw Error(`Hashing Blob objects is currently not supported
(see https://github.com/puleos/object-hash/issues/26)
Use "options.replacer" or "options.ignoreUnknown"
`)},_domwindow:function(){return A("domwindow")},_bigint:function(I){return A("bigint:"+I.toString())},_process:function(){return A("process")},_timer:function(){return A("timer")},_pipe:function(){return A("pipe")},_tcp:function(){return A("tcp")},_udp:function(){return A("udp")},_tty:function(){return A("tty")},_statwatcher:function(){return A("statwatcher")},_securecontext:function(){return A("securecontext")},_connection:function(){return A("connection")},_zlib:function(){return A("zlib")},_context:function(){return A("context")},_nodescript:function(){return A("nodescript")},_httpparser:function(){return A("httpparser")},_dataview:function(){return A("dataview")},_signal:function(){return A("signal")},_fsevent:function(){return A("fsevent")},_tlswrap:function(){return A("tlswrap")}}}function M(){return{buf:"",write:function(O){this.buf+=O},end:function(O){this.buf+=O},read:function(){return this.buf}}}i.writeToStream=function(O,C,v){return v===void 0&&(v=C,C={}),R(C=j(O,C),v).dispatch(O)}}).call(this,t("lYpoI2"),typeof self<"u"?self:typeof window<"u"?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_9a5aa49d.js","/")},{buffer:3,crypto:5,lYpoI2:11}],2:[function(t,n,i){(function(s,a,o,u,c,d,f,m,b){(function(g){var _=typeof Uint8Array<"u"?Uint8Array:Array,h="+".charCodeAt(0),T="/".charCodeAt(0),j="0".charCodeAt(0),S="a".charCodeAt(0),R="A".charCodeAt(0),M="-".charCodeAt(0),O="_".charCodeAt(0);function C(v){return v=v.charCodeAt(0),v===h||v===M?62:v===T||v===O?63:v<j?-1:v<j+10?v-j+26+26:v<R+26?v-R:v<S+26?v-S+26:void 0}g.toByteArray=function(v){var A,I;if(0<v.length%4)throw new Error("Invalid string. Length must be a multiple of 4");var N=v.length,N=v.charAt(N-2)==="="?2:v.charAt(N-1)==="="?1:0,L=new _(3*v.length/4-N),q=0<N?v.length-4:v.length,Y=0;function K(V){L[Y++]=V}for(A=0;A<q;A+=4,0)K((16711680&(I=C(v.charAt(A))<<18|C(v.charAt(A+1))<<12|C(v.charAt(A+2))<<6|C(v.charAt(A+3))))>>16),K((65280&I)>>8),K(255&I);return N==2?K(255&(I=C(v.charAt(A))<<2|C(v.charAt(A+1))>>4)):N==1&&(K((I=C(v.charAt(A))<<10|C(v.charAt(A+1))<<4|C(v.charAt(A+2))>>2)>>8&255),K(255&I)),L},g.fromByteArray=function(v){var A,I,N,L,q=v.length%3,Y="";function K(V){return"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(V)}for(A=0,N=v.length-q;A<N;A+=3)I=(v[A]<<16)+(v[A+1]<<8)+v[A+2],Y+=K((L=I)>>18&63)+K(L>>12&63)+K(L>>6&63)+K(63&L);switch(q){case 1:Y=(Y+=K((I=v[v.length-1])>>2))+K(I<<4&63)+"==";break;case 2:Y=(Y=(Y+=K((I=(v[v.length-2]<<8)+v[v.length-1])>>10))+K(I>>4&63))+K(I<<2&63)+"="}return Y}})(i===void 0?this.base64js={}:i)}).call(this,t("lYpoI2"),typeof self<"u"?self:typeof window<"u"?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js","/node_modules/gulp-browserify/node_modules/base64-js/lib")},{buffer:3,lYpoI2:11}],3:[function(t,n,i){(function(s,a,h,u,c,d,f,m,b){var g=t("base64-js"),_=t("ieee754");function h(y,E,D){if(!(this instanceof h))return new h(y,E,D);var z,F,X,ae,ue=typeof y;if(E==="base64"&&ue=="string")for(y=(ae=y).trim?ae.trim():ae.replace(/^\s+|\s+$/g,"");y.length%4!=0;)y+="=";if(ue=="number")z=G(y);else if(ue=="string")z=h.byteLength(y,E);else{if(ue!="object")throw new Error("First argument needs to be a number, array or string.");z=G(y.length)}if(h._useTypedArrays?F=h._augment(new Uint8Array(z)):((F=this).length=z,F._isBuffer=!0),h._useTypedArrays&&typeof y.byteLength=="number")F._set(y);else if(W(ae=y)||h.isBuffer(ae)||ae&&typeof ae=="object"&&typeof ae.length=="number")for(X=0;X<z;X++)h.isBuffer(y)?F[X]=y.readUInt8(X):F[X]=y[X];else if(ue=="string")F.write(y,0,E);else if(ue=="number"&&!h._useTypedArrays&&!D)for(X=0;X<z;X++)F[X]=0;return F}function T(y,E,D,z){return h._charsWritten=J(function(F){for(var X=[],ae=0;ae<F.length;ae++)X.push(255&F.charCodeAt(ae));return X}(E),y,D,z)}function j(y,E,D,z){return h._charsWritten=J(function(F){for(var X,ae,ue=[],fe=0;fe<F.length;fe++)ae=F.charCodeAt(fe),X=ae>>8,ae=ae%256,ue.push(ae),ue.push(X);return ue}(E),y,D,z)}function S(y,E,D){var z="";D=Math.min(y.length,D);for(var F=E;F<D;F++)z+=String.fromCharCode(y[F]);return z}function R(y,E,D,X){X||(Q(typeof D=="boolean","missing or invalid endian"),Q(E!=null,"missing offset"),Q(E+1<y.length,"Trying to read beyond buffer length"));var F,X=y.length;if(!(X<=E))return D?(F=y[E],E+1<X&&(F|=y[E+1]<<8)):(F=y[E]<<8,E+1<X&&(F|=y[E+1])),F}function M(y,E,D,X){X||(Q(typeof D=="boolean","missing or invalid endian"),Q(E!=null,"missing offset"),Q(E+3<y.length,"Trying to read beyond buffer length"));var F,X=y.length;if(!(X<=E))return D?(E+2<X&&(F=y[E+2]<<16),E+1<X&&(F|=y[E+1]<<8),F|=y[E],E+3<X&&(F+=y[E+3]<<24>>>0)):(E+1<X&&(F=y[E+1]<<16),E+2<X&&(F|=y[E+2]<<8),E+3<X&&(F|=y[E+3]),F+=y[E]<<24>>>0),F}function O(y,E,D,z){if(z||(Q(typeof D=="boolean","missing or invalid endian"),Q(E!=null,"missing offset"),Q(E+1<y.length,"Trying to read beyond buffer length")),!(y.length<=E))return z=R(y,E,D,!0),32768&z?-1*(65535-z+1):z}function C(y,E,D,z){if(z||(Q(typeof D=="boolean","missing or invalid endian"),Q(E!=null,"missing offset"),Q(E+3<y.length,"Trying to read beyond buffer length")),!(y.length<=E))return z=M(y,E,D,!0),2147483648&z?-1*(4294967295-z+1):z}function v(y,E,D,z){return z||(Q(typeof D=="boolean","missing or invalid endian"),Q(E+3<y.length,"Trying to read beyond buffer length")),_.read(y,E,D,23,4)}function A(y,E,D,z){return z||(Q(typeof D=="boolean","missing or invalid endian"),Q(E+7<y.length,"Trying to read beyond buffer length")),_.read(y,E,D,52,8)}function I(y,E,D,z,F){if(F||(Q(E!=null,"missing value"),Q(typeof z=="boolean","missing or invalid endian"),Q(D!=null,"missing offset"),Q(D+1<y.length,"trying to write beyond buffer length"),Le(E,65535)),F=y.length,!(F<=D))for(var X=0,ae=Math.min(F-D,2);X<ae;X++)y[D+X]=(E&255<<8*(z?X:1-X))>>>8*(z?X:1-X)}function N(y,E,D,z,F){if(F||(Q(E!=null,"missing value"),Q(typeof z=="boolean","missing or invalid endian"),Q(D!=null,"missing offset"),Q(D+3<y.length,"trying to write beyond buffer length"),Le(E,4294967295)),F=y.length,!(F<=D))for(var X=0,ae=Math.min(F-D,4);X<ae;X++)y[D+X]=E>>>8*(z?X:3-X)&255}function L(y,E,D,z,F){F||(Q(E!=null,"missing value"),Q(typeof z=="boolean","missing or invalid endian"),Q(D!=null,"missing offset"),Q(D+1<y.length,"Trying to write beyond buffer length"),we(E,32767,-32768)),y.length<=D||I(y,0<=E?E:65535+E+1,D,z,F)}function q(y,E,D,z,F){F||(Q(E!=null,"missing value"),Q(typeof z=="boolean","missing or invalid endian"),Q(D!=null,"missing offset"),Q(D+3<y.length,"Trying to write beyond buffer length"),we(E,2147483647,-2147483648)),y.length<=D||N(y,0<=E?E:4294967295+E+1,D,z,F)}function Y(y,E,D,z,F){F||(Q(E!=null,"missing value"),Q(typeof z=="boolean","missing or invalid endian"),Q(D!=null,"missing offset"),Q(D+3<y.length,"Trying to write beyond buffer length"),Ke(E,34028234663852886e22,-34028234663852886e22)),y.length<=D||_.write(y,E,D,z,23,4)}function K(y,E,D,z,F){F||(Q(E!=null,"missing value"),Q(typeof z=="boolean","missing or invalid endian"),Q(D!=null,"missing offset"),Q(D+7<y.length,"Trying to write beyond buffer length"),Ke(E,17976931348623157e292,-17976931348623157e292)),y.length<=D||_.write(y,E,D,z,52,8)}i.Buffer=h,i.SlowBuffer=h,i.INSPECT_MAX_BYTES=50,h.poolSize=8192,h._useTypedArrays=function(){try{var y=new ArrayBuffer(0),E=new Uint8Array(y);return E.foo=function(){return 42},E.foo()===42&&typeof E.subarray=="function"}catch{return!1}}(),h.isEncoding=function(y){switch(String(y).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},h.isBuffer=function(y){return!(y==null||!y._isBuffer)},h.byteLength=function(y,E){var D;switch(y+="",E||"utf8"){case"hex":D=y.length/2;break;case"utf8":case"utf-8":D=ie(y).length;break;case"ascii":case"binary":case"raw":D=y.length;break;case"base64":D=ge(y).length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":D=2*y.length;break;default:throw new Error("Unknown encoding")}return D},h.concat=function(y,E){if(Q(W(y),`Usage: Buffer.concat(list, [totalLength])
list should be an Array.`),y.length===0)return new h(0);if(y.length===1)return y[0];if(typeof E!="number")for(F=E=0;F<y.length;F++)E+=y[F].length;for(var D=new h(E),z=0,F=0;F<y.length;F++){var X=y[F];X.copy(D,z),z+=X.length}return D},h.prototype.write=function(y,E,D,z){isFinite(E)?isFinite(D)||(z=D,D=void 0):(fe=z,z=E,E=D,D=fe),E=Number(E)||0;var F,X,ae,ue,fe=this.length-E;switch((!D||fe<(D=Number(D)))&&(D=fe),z=String(z||"utf8").toLowerCase()){case"hex":F=function(ve,ye,_e,U){_e=Number(_e)||0;var re=ve.length-_e;(!U||re<(U=Number(U)))&&(U=re),Q((re=ye.length)%2==0,"Invalid hex string"),re/2<U&&(U=re/2);for(var ee=0;ee<U;ee++){var ne=parseInt(ye.substr(2*ee,2),16);Q(!isNaN(ne),"Invalid hex string"),ve[_e+ee]=ne}return h._charsWritten=2*ee,ee}(this,y,E,D);break;case"utf8":case"utf-8":X=this,ae=E,ue=D,F=h._charsWritten=J(ie(y),X,ae,ue);break;case"ascii":case"binary":F=T(this,y,E,D);break;case"base64":X=this,ae=E,ue=D,F=h._charsWritten=J(ge(y),X,ae,ue);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":F=j(this,y,E,D);break;default:throw new Error("Unknown encoding")}return F},h.prototype.toString=function(y,E,D){var z,F,X,ae,ue=this;if(y=String(y||"utf8").toLowerCase(),E=Number(E)||0,(D=D!==void 0?Number(D):ue.length)===E)return"";switch(y){case"hex":z=function(fe,ve,ye){var _e=fe.length;(!ve||ve<0)&&(ve=0),(!ye||ye<0||_e<ye)&&(ye=_e);for(var U="",re=ve;re<ye;re++)U+=te(fe[re]);return U}(ue,E,D);break;case"utf8":case"utf-8":z=function(fe,ve,ye){var _e="",U="";ye=Math.min(fe.length,ye);for(var re=ve;re<ye;re++)fe[re]<=127?(_e+=je(U)+String.fromCharCode(fe[re]),U=""):U+="%"+fe[re].toString(16);return _e+je(U)}(ue,E,D);break;case"ascii":case"binary":z=S(ue,E,D);break;case"base64":F=ue,ae=D,z=(X=E)===0&&ae===F.length?g.fromByteArray(F):g.fromByteArray(F.slice(X,ae));break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":z=function(fe,ve,ye){for(var _e=fe.slice(ve,ye),U="",re=0;re<_e.length;re+=2)U+=String.fromCharCode(_e[re]+256*_e[re+1]);return U}(ue,E,D);break;default:throw new Error("Unknown encoding")}return z},h.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},h.prototype.copy=function(y,E,D,z){if(E=E||0,(z=z||z===0?z:this.length)!==(D=D||0)&&y.length!==0&&this.length!==0){Q(D<=z,"sourceEnd < sourceStart"),Q(0<=E&&E<y.length,"targetStart out of bounds"),Q(0<=D&&D<this.length,"sourceStart out of bounds"),Q(0<=z&&z<=this.length,"sourceEnd out of bounds"),z>this.length&&(z=this.length);var F=(z=y.length-E<z-D?y.length-E+D:z)-D;if(F<100||!h._useTypedArrays)for(var X=0;X<F;X++)y[X+E]=this[X+D];else y._set(this.subarray(D,D+F),E)}},h.prototype.slice=function(y,E){var D=this.length;if(y=B(y,D,0),E=B(E,D,D),h._useTypedArrays)return h._augment(this.subarray(y,E));for(var z=E-y,F=new h(z,void 0,!0),X=0;X<z;X++)F[X]=this[X+y];return F},h.prototype.get=function(y){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(y)},h.prototype.set=function(y,E){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(y,E)},h.prototype.readUInt8=function(y,E){if(E||(Q(y!=null,"missing offset"),Q(y<this.length,"Trying to read beyond buffer length")),!(y>=this.length))return this[y]},h.prototype.readUInt16LE=function(y,E){return R(this,y,!0,E)},h.prototype.readUInt16BE=function(y,E){return R(this,y,!1,E)},h.prototype.readUInt32LE=function(y,E){return M(this,y,!0,E)},h.prototype.readUInt32BE=function(y,E){return M(this,y,!1,E)},h.prototype.readInt8=function(y,E){if(E||(Q(y!=null,"missing offset"),Q(y<this.length,"Trying to read beyond buffer length")),!(y>=this.length))return 128&this[y]?-1*(255-this[y]+1):this[y]},h.prototype.readInt16LE=function(y,E){return O(this,y,!0,E)},h.prototype.readInt16BE=function(y,E){return O(this,y,!1,E)},h.prototype.readInt32LE=function(y,E){return C(this,y,!0,E)},h.prototype.readInt32BE=function(y,E){return C(this,y,!1,E)},h.prototype.readFloatLE=function(y,E){return v(this,y,!0,E)},h.prototype.readFloatBE=function(y,E){return v(this,y,!1,E)},h.prototype.readDoubleLE=function(y,E){return A(this,y,!0,E)},h.prototype.readDoubleBE=function(y,E){return A(this,y,!1,E)},h.prototype.writeUInt8=function(y,E,D){D||(Q(y!=null,"missing value"),Q(E!=null,"missing offset"),Q(E<this.length,"trying to write beyond buffer length"),Le(y,255)),E>=this.length||(this[E]=y)},h.prototype.writeUInt16LE=function(y,E,D){I(this,y,E,!0,D)},h.prototype.writeUInt16BE=function(y,E,D){I(this,y,E,!1,D)},h.prototype.writeUInt32LE=function(y,E,D){N(this,y,E,!0,D)},h.prototype.writeUInt32BE=function(y,E,D){N(this,y,E,!1,D)},h.prototype.writeInt8=function(y,E,D){D||(Q(y!=null,"missing value"),Q(E!=null,"missing offset"),Q(E<this.length,"Trying to write beyond buffer length"),we(y,127,-128)),E>=this.length||(0<=y?this.writeUInt8(y,E,D):this.writeUInt8(255+y+1,E,D))},h.prototype.writeInt16LE=function(y,E,D){L(this,y,E,!0,D)},h.prototype.writeInt16BE=function(y,E,D){L(this,y,E,!1,D)},h.prototype.writeInt32LE=function(y,E,D){q(this,y,E,!0,D)},h.prototype.writeInt32BE=function(y,E,D){q(this,y,E,!1,D)},h.prototype.writeFloatLE=function(y,E,D){Y(this,y,E,!0,D)},h.prototype.writeFloatBE=function(y,E,D){Y(this,y,E,!1,D)},h.prototype.writeDoubleLE=function(y,E,D){K(this,y,E,!0,D)},h.prototype.writeDoubleBE=function(y,E,D){K(this,y,E,!1,D)},h.prototype.fill=function(y,E,D){if(E=E||0,D=D||this.length,Q(typeof(y=typeof(y=y||0)=="string"?y.charCodeAt(0):y)=="number"&&!isNaN(y),"value is not a number"),Q(E<=D,"end < start"),D!==E&&this.length!==0){Q(0<=E&&E<this.length,"start out of bounds"),Q(0<=D&&D<=this.length,"end out of bounds");for(var z=E;z<D;z++)this[z]=y}},h.prototype.inspect=function(){for(var y=[],E=this.length,D=0;D<E;D++)if(y[D]=te(this[D]),D===i.INSPECT_MAX_BYTES){y[D+1]="...";break}return"<Buffer "+y.join(" ")+">"},h.prototype.toArrayBuffer=function(){if(typeof Uint8Array>"u")throw new Error("Buffer.toArrayBuffer not supported in this browser");if(h._useTypedArrays)return new h(this).buffer;for(var y=new Uint8Array(this.length),E=0,D=y.length;E<D;E+=1)y[E]=this[E];return y.buffer};var V=h.prototype;function B(y,E,D){return typeof y!="number"?D:E<=(y=~~y)?E:0<=y||0<=(y+=E)?y:0}function G(y){return(y=~~Math.ceil(+y))<0?0:y}function W(y){return(Array.isArray||function(E){return Object.prototype.toString.call(E)==="[object Array]"})(y)}function te(y){return y<16?"0"+y.toString(16):y.toString(16)}function ie(y){for(var E=[],D=0;D<y.length;D++){var z=y.charCodeAt(D);if(z<=127)E.push(y.charCodeAt(D));else for(var F=D,X=(55296<=z&&z<=57343&&D++,encodeURIComponent(y.slice(F,D+1)).substr(1).split("%")),ae=0;ae<X.length;ae++)E.push(parseInt(X[ae],16))}return E}function ge(y){return g.toByteArray(y)}function J(y,E,D,z){for(var F=0;F<z&&!(F+D>=E.length||F>=y.length);F++)E[F+D]=y[F];return F}function je(y){try{return decodeURIComponent(y)}catch{return String.fromCharCode(65533)}}function Le(y,E){Q(typeof y=="number","cannot write a non-number as a number"),Q(0<=y,"specified a negative value for writing an unsigned value"),Q(y<=E,"value is larger than maximum value for type"),Q(Math.floor(y)===y,"value has a fractional component")}function we(y,E,D){Q(typeof y=="number","cannot write a non-number as a number"),Q(y<=E,"value larger than maximum allowed value"),Q(D<=y,"value smaller than minimum allowed value"),Q(Math.floor(y)===y,"value has a fractional component")}function Ke(y,E,D){Q(typeof y=="number","cannot write a non-number as a number"),Q(y<=E,"value larger than maximum allowed value"),Q(D<=y,"value smaller than minimum allowed value")}function Q(y,E){if(!y)throw new Error(E||"Failed assertion")}h._augment=function(y){return y._isBuffer=!0,y._get=y.get,y._set=y.set,y.get=V.get,y.set=V.set,y.write=V.write,y.toString=V.toString,y.toLocaleString=V.toString,y.toJSON=V.toJSON,y.copy=V.copy,y.slice=V.slice,y.readUInt8=V.readUInt8,y.readUInt16LE=V.readUInt16LE,y.readUInt16BE=V.readUInt16BE,y.readUInt32LE=V.readUInt32LE,y.readUInt32BE=V.readUInt32BE,y.readInt8=V.readInt8,y.readInt16LE=V.readInt16LE,y.readInt16BE=V.readInt16BE,y.readInt32LE=V.readInt32LE,y.readInt32BE=V.readInt32BE,y.readFloatLE=V.readFloatLE,y.readFloatBE=V.readFloatBE,y.readDoubleLE=V.readDoubleLE,y.readDoubleBE=V.readDoubleBE,y.writeUInt8=V.writeUInt8,y.writeUInt16LE=V.writeUInt16LE,y.writeUInt16BE=V.writeUInt16BE,y.writeUInt32LE=V.writeUInt32LE,y.writeUInt32BE=V.writeUInt32BE,y.writeInt8=V.writeInt8,y.writeInt16LE=V.writeInt16LE,y.writeInt16BE=V.writeInt16BE,y.writeInt32LE=V.writeInt32LE,y.writeInt32BE=V.writeInt32BE,y.writeFloatLE=V.writeFloatLE,y.writeFloatBE=V.writeFloatBE,y.writeDoubleLE=V.writeDoubleLE,y.writeDoubleBE=V.writeDoubleBE,y.fill=V.fill,y.inspect=V.inspect,y.toArrayBuffer=V.toArrayBuffer,y}}).call(this,t("lYpoI2"),typeof self<"u"?self:typeof window<"u"?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/buffer/index.js","/node_modules/gulp-browserify/node_modules/buffer")},{"base64-js":2,buffer:3,ieee754:10,lYpoI2:11}],4:[function(t,n,i){(function(s,a,g,u,c,d,f,m,b){var g=t("buffer").Buffer,_=4,h=new g(_);h.fill(0),n.exports={hash:function(T,j,S,R){for(var M=j(function(I,N){I.length%_!=0&&(L=I.length+(_-I.length%_),I=g.concat([I,h],L));for(var L,q=[],Y=N?I.readInt32BE:I.readInt32LE,K=0;K<I.length;K+=_)q.push(Y.call(I,K));return q}(T=g.isBuffer(T)?T:new g(T),R),8*T.length),j=R,O=new g(S),C=j?O.writeInt32BE:O.writeInt32LE,v=0;v<M.length;v++)C.call(O,M[v],4*v,!0);return O}}}).call(this,t("lYpoI2"),typeof self<"u"?self:typeof window<"u"?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/crypto-browserify/helpers.js","/node_modules/gulp-browserify/node_modules/crypto-browserify")},{buffer:3,lYpoI2:11}],5:[function(t,n,i){(function(s,a,g,u,c,d,f,m,b){var g=t("buffer").Buffer,_=t("./sha"),h=t("./sha256"),T=t("./rng"),j={sha1:_,sha256:h,md5:t("./md5")},S=64,R=new g(S);function M(I,N){var L=j[I=I||"sha1"],q=[];return L||O("algorithm:",I,"is not yet supported"),{update:function(Y){return g.isBuffer(Y)||(Y=new g(Y)),q.push(Y),Y.length,this},digest:function(Y){var K=g.concat(q),K=N?function(V,B,G){g.isBuffer(B)||(B=new g(B)),g.isBuffer(G)||(G=new g(G)),B.length>S?B=V(B):B.length<S&&(B=g.concat([B,R],S));for(var W=new g(S),te=new g(S),ie=0;ie<S;ie++)W[ie]=54^B[ie],te[ie]=92^B[ie];return G=V(g.concat([W,G])),V(g.concat([te,G]))}(L,N,K):L(K);return q=null,Y?K.toString(Y):K}}}function O(){var I=[].slice.call(arguments).join(" ");throw new Error([I,"we accept pull requests","http://github.com/dominictarr/crypto-browserify"].join(`
`))}R.fill(0),i.createHash=function(I){return M(I)},i.createHmac=M,i.randomBytes=function(I,N){if(!N||!N.call)return new g(T(I));try{N.call(this,void 0,new g(T(I)))}catch(L){N(L)}};var C,v=["createCredentials","createCipher","createCipheriv","createDecipher","createDecipheriv","createSign","createVerify","createDiffieHellman","pbkdf2"],A=function(I){i[I]=function(){O("sorry,",I,"is not implemented yet")}};for(C in v)A(v[C])}).call(this,t("lYpoI2"),typeof self<"u"?self:typeof window<"u"?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/crypto-browserify/index.js","/node_modules/gulp-browserify/node_modules/crypto-browserify")},{"./md5":6,"./rng":7,"./sha":8,"./sha256":9,buffer:3,lYpoI2:11}],6:[function(t,n,i){(function(s,a,o,u,c,d,f,m,b){var g=t("./helpers");function _(O,C){O[C>>5]|=128<<C%32,O[14+(C+64>>>9<<4)]=C;for(var v=1732584193,A=-271733879,I=-1732584194,N=271733878,L=0;L<O.length;L+=16){var q=v,Y=A,K=I,V=N,v=T(v,A,I,N,O[L+0],7,-680876936),N=T(N,v,A,I,O[L+1],12,-389564586),I=T(I,N,v,A,O[L+2],17,606105819),A=T(A,I,N,v,O[L+3],22,-1044525330);v=T(v,A,I,N,O[L+4],7,-176418897),N=T(N,v,A,I,O[L+5],12,1200080426),I=T(I,N,v,A,O[L+6],17,-1473231341),A=T(A,I,N,v,O[L+7],22,-45705983),v=T(v,A,I,N,O[L+8],7,1770035416),N=T(N,v,A,I,O[L+9],12,-1958414417),I=T(I,N,v,A,O[L+10],17,-42063),A=T(A,I,N,v,O[L+11],22,-1990404162),v=T(v,A,I,N,O[L+12],7,1804603682),N=T(N,v,A,I,O[L+13],12,-40341101),I=T(I,N,v,A,O[L+14],17,-1502002290),v=j(v,A=T(A,I,N,v,O[L+15],22,1236535329),I,N,O[L+1],5,-165796510),N=j(N,v,A,I,O[L+6],9,-1069501632),I=j(I,N,v,A,O[L+11],14,643717713),A=j(A,I,N,v,O[L+0],20,-373897302),v=j(v,A,I,N,O[L+5],5,-701558691),N=j(N,v,A,I,O[L+10],9,38016083),I=j(I,N,v,A,O[L+15],14,-660478335),A=j(A,I,N,v,O[L+4],20,-405537848),v=j(v,A,I,N,O[L+9],5,568446438),N=j(N,v,A,I,O[L+14],9,-1019803690),I=j(I,N,v,A,O[L+3],14,-187363961),A=j(A,I,N,v,O[L+8],20,1163531501),v=j(v,A,I,N,O[L+13],5,-1444681467),N=j(N,v,A,I,O[L+2],9,-51403784),I=j(I,N,v,A,O[L+7],14,1735328473),v=S(v,A=j(A,I,N,v,O[L+12],20,-1926607734),I,N,O[L+5],4,-378558),N=S(N,v,A,I,O[L+8],11,-2022574463),I=S(I,N,v,A,O[L+11],16,1839030562),A=S(A,I,N,v,O[L+14],23,-35309556),v=S(v,A,I,N,O[L+1],4,-1530992060),N=S(N,v,A,I,O[L+4],11,1272893353),I=S(I,N,v,A,O[L+7],16,-155497632),A=S(A,I,N,v,O[L+10],23,-1094730640),v=S(v,A,I,N,O[L+13],4,681279174),N=S(N,v,A,I,O[L+0],11,-358537222),I=S(I,N,v,A,O[L+3],16,-722521979),A=S(A,I,N,v,O[L+6],23,76029189),v=S(v,A,I,N,O[L+9],4,-640364487),N=S(N,v,A,I,O[L+12],11,-421815835),I=S(I,N,v,A,O[L+15],16,530742520),v=R(v,A=S(A,I,N,v,O[L+2],23,-995338651),I,N,O[L+0],6,-198630844),N=R(N,v,A,I,O[L+7],10,1126891415),I=R(I,N,v,A,O[L+14],15,-1416354905),A=R(A,I,N,v,O[L+5],21,-57434055),v=R(v,A,I,N,O[L+12],6,1700485571),N=R(N,v,A,I,O[L+3],10,-1894986606),I=R(I,N,v,A,O[L+10],15,-1051523),A=R(A,I,N,v,O[L+1],21,-2054922799),v=R(v,A,I,N,O[L+8],6,1873313359),N=R(N,v,A,I,O[L+15],10,-30611744),I=R(I,N,v,A,O[L+6],15,-1560198380),A=R(A,I,N,v,O[L+13],21,1309151649),v=R(v,A,I,N,O[L+4],6,-145523070),N=R(N,v,A,I,O[L+11],10,-1120210379),I=R(I,N,v,A,O[L+2],15,718787259),A=R(A,I,N,v,O[L+9],21,-343485551),v=M(v,q),A=M(A,Y),I=M(I,K),N=M(N,V)}return Array(v,A,I,N)}function h(O,C,v,A,I,N){return M((C=M(M(C,O),M(A,N)))<<I|C>>>32-I,v)}function T(O,C,v,A,I,N,L){return h(C&v|~C&A,O,C,I,N,L)}function j(O,C,v,A,I,N,L){return h(C&A|v&~A,O,C,I,N,L)}function S(O,C,v,A,I,N,L){return h(C^v^A,O,C,I,N,L)}function R(O,C,v,A,I,N,L){return h(v^(C|~A),O,C,I,N,L)}function M(O,C){var v=(65535&O)+(65535&C);return(O>>16)+(C>>16)+(v>>16)<<16|65535&v}n.exports=function(O){return g.hash(O,_,16)}}).call(this,t("lYpoI2"),typeof self<"u"?self:typeof window<"u"?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/crypto-browserify/md5.js","/node_modules/gulp-browserify/node_modules/crypto-browserify")},{"./helpers":4,buffer:3,lYpoI2:11}],7:[function(t,n,i){(function(s,a,o,u,c,d,f,m,b){n.exports=function(g){for(var _,h=new Array(g),T=0;T<g;T++)!(3&T)&&(_=4294967296*Math.random()),h[T]=_>>>((3&T)<<3)&255;return h}}).call(this,t("lYpoI2"),typeof self<"u"?self:typeof window<"u"?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/crypto-browserify/rng.js","/node_modules/gulp-browserify/node_modules/crypto-browserify")},{buffer:3,lYpoI2:11}],8:[function(t,n,i){(function(s,a,o,u,c,d,f,m,b){var g=t("./helpers");function _(j,S){j[S>>5]|=128<<24-S%32,j[15+(S+64>>9<<4)]=S;for(var R,M,O,C=Array(80),v=1732584193,A=-271733879,I=-1732584194,N=271733878,L=-1009589776,q=0;q<j.length;q+=16){for(var Y=v,K=A,V=I,B=N,G=L,W=0;W<80;W++){C[W]=W<16?j[q+W]:T(C[W-3]^C[W-8]^C[W-14]^C[W-16],1);var te=h(h(T(v,5),(te=A,M=I,O=N,(R=W)<20?te&M|~te&O:!(R<40)&&R<60?te&M|te&O|M&O:te^M^O)),h(h(L,C[W]),(R=W)<20?1518500249:R<40?1859775393:R<60?-1894007588:-899497514)),L=N,N=I,I=T(A,30),A=v,v=te}v=h(v,Y),A=h(A,K),I=h(I,V),N=h(N,B),L=h(L,G)}return Array(v,A,I,N,L)}function h(j,S){var R=(65535&j)+(65535&S);return(j>>16)+(S>>16)+(R>>16)<<16|65535&R}function T(j,S){return j<<S|j>>>32-S}n.exports=function(j){return g.hash(j,_,20,!0)}}).call(this,t("lYpoI2"),typeof self<"u"?self:typeof window<"u"?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/crypto-browserify/sha.js","/node_modules/gulp-browserify/node_modules/crypto-browserify")},{"./helpers":4,buffer:3,lYpoI2:11}],9:[function(t,n,i){(function(s,a,o,u,c,d,f,m,b){function g(S,R){var M=(65535&S)+(65535&R);return(S>>16)+(R>>16)+(M>>16)<<16|65535&M}function _(S,R){var M,O=new Array(1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298),C=new Array(1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225),v=new Array(64);S[R>>5]|=128<<24-R%32,S[15+(R+64>>9<<4)]=R;for(var A,I,N=0;N<S.length;N+=16){for(var L=C[0],q=C[1],Y=C[2],K=C[3],V=C[4],B=C[5],G=C[6],W=C[7],te=0;te<64;te++)v[te]=te<16?S[te+N]:g(g(g((I=v[te-2],T(I,17)^T(I,19)^j(I,10)),v[te-7]),(I=v[te-15],T(I,7)^T(I,18)^j(I,3))),v[te-16]),M=g(g(g(g(W,T(I=V,6)^T(I,11)^T(I,25)),V&B^~V&G),O[te]),v[te]),A=g(T(A=L,2)^T(A,13)^T(A,22),L&q^L&Y^q&Y),W=G,G=B,B=V,V=g(K,M),K=Y,Y=q,q=L,L=g(M,A);C[0]=g(L,C[0]),C[1]=g(q,C[1]),C[2]=g(Y,C[2]),C[3]=g(K,C[3]),C[4]=g(V,C[4]),C[5]=g(B,C[5]),C[6]=g(G,C[6]),C[7]=g(W,C[7])}return C}var h=t("./helpers"),T=function(S,R){return S>>>R|S<<32-R},j=function(S,R){return S>>>R};n.exports=function(S){return h.hash(S,_,32,!0)}}).call(this,t("lYpoI2"),typeof self<"u"?self:typeof window<"u"?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/crypto-browserify/sha256.js","/node_modules/gulp-browserify/node_modules/crypto-browserify")},{"./helpers":4,buffer:3,lYpoI2:11}],10:[function(t,n,i){(function(s,a,o,u,c,d,f,m,b){i.read=function(g,_,h,T,N){var S,R,M=8*N-T-1,O=(1<<M)-1,C=O>>1,v=-7,A=h?N-1:0,I=h?-1:1,N=g[_+A];for(A+=I,S=N&(1<<-v)-1,N>>=-v,v+=M;0<v;S=256*S+g[_+A],A+=I,v-=8);for(R=S&(1<<-v)-1,S>>=-v,v+=T;0<v;R=256*R+g[_+A],A+=I,v-=8);if(S===0)S=1-C;else{if(S===O)return R?NaN:1/0*(N?-1:1);R+=Math.pow(2,T),S-=C}return(N?-1:1)*R*Math.pow(2,S-T)},i.write=function(g,_,h,T,j,L){var R,M,O=8*L-j-1,C=(1<<O)-1,v=C>>1,A=j===23?Math.pow(2,-24)-Math.pow(2,-77):0,I=T?0:L-1,N=T?1:-1,L=_<0||_===0&&1/_<0?1:0;for(_=Math.abs(_),isNaN(_)||_===1/0?(M=isNaN(_)?1:0,R=C):(R=Math.floor(Math.log(_)/Math.LN2),_*(T=Math.pow(2,-R))<1&&(R--,T*=2),2<=(_+=1<=R+v?A/T:A*Math.pow(2,1-v))*T&&(R++,T/=2),C<=R+v?(M=0,R=C):1<=R+v?(M=(_*T-1)*Math.pow(2,j),R+=v):(M=_*Math.pow(2,v-1)*Math.pow(2,j),R=0));8<=j;g[h+I]=255&M,I+=N,M/=256,j-=8);for(R=R<<j|M,O+=j;0<O;g[h+I]=255&R,I+=N,R/=256,O-=8);g[h+I-N]|=128*L}}).call(this,t("lYpoI2"),typeof self<"u"?self:typeof window<"u"?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/ieee754/index.js","/node_modules/gulp-browserify/node_modules/ieee754")},{buffer:3,lYpoI2:11}],11:[function(t,n,i){(function(s,a,o,u,c,d,f,m,b){var g,_,h;function T(){}(s=n.exports={}).nextTick=(_=typeof window<"u"&&window.setImmediate,h=typeof window<"u"&&window.postMessage&&window.addEventListener,_?function(j){return window.setImmediate(j)}:h?(g=[],window.addEventListener("message",function(j){var S=j.source;S!==window&&S!==null||j.data!=="process-tick"||(j.stopPropagation(),0<g.length&&g.shift()())},!0),function(j){g.push(j),window.postMessage("process-tick","*")}):function(j){setTimeout(j,0)}),s.title="browser",s.browser=!0,s.env={},s.argv=[],s.on=T,s.addListener=T,s.once=T,s.off=T,s.removeListener=T,s.removeAllListeners=T,s.emit=T,s.binding=function(j){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(j){throw new Error("process.chdir is not supported")}}).call(this,t("lYpoI2"),typeof self<"u"?self:typeof window<"u"?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/process/browser.js","/node_modules/gulp-browserify/node_modules/process")},{buffer:3,lYpoI2:11}]},{},[1])(1)})})(nu);var kf=nu.exports;const Nf=Dn(kf),fa=(...r)=>Nf(r.join("_")),Rf=new Map;class Ps extends Tf{constructor(e){super(),Object.defineProperty(this,"cache",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.cache=e??new Map}lookup(e,t){return Promise.resolve(this.cache.get(fa(e,t))??null)}async update(e,t,n){this.cache.set(fa(e,t),n)}static global(){return new Ps(Rf)}}const Df=()=>!1;class jf extends Se{get lc_attributes(){return{callbacks:void 0,verbose:void 0}}constructor(e){super(e),Object.defineProperty(this,"verbose",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"callbacks",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"tags",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"metadata",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.verbose=e.verbose??Df(),this.callbacks=e.callbacks,this.tags=e.tags??[],this.metadata=e.metadata??{}}}class iu extends jf{get callKeys(){return["stop","timeout","signal","tags","metadata","callbacks"]}constructor({callbacks:e,callbackManager:t,...n}){super({callbacks:e??t,...n}),Object.defineProperty(this,"caller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"cache",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_encoding",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),typeof n.cache=="object"?this.cache=n.cache:n.cache?this.cache=Ps.global():this.cache=void 0,this.caller=new zn(n??{})}async getNumTokens(e){let t=Math.ceil(e.length/4);if(!this._encoding)try{this._encoding=await Wo("modelName"in this?Cr(this.modelName):"gpt2")}catch(n){console.warn("Failed to calculate number of tokens, falling back to approximate count",n)}return this._encoding&&(t=this._encoding.encode(e).length),t}static _convertInputToPromptValue(e){return typeof e=="string"?new Qo(e):Array.isArray(e)?new Cf(e.map(Qr)):e}_identifyingParams(){return{}}_getSerializedCacheKeyParametersForCall(e){const t={...this._identifyingParams(),...e,_type:this._llmType(),_model:this._modelType()};return Object.entries(t).filter(([s,a])=>a!==void 0).map(([s,a])=>`${s}:${JSON.stringify(a)}`).sort().join(",")}serialize(){return{...this._identifyingParams(),_type:this._llmType(),_model:this._modelType()}}static async deserialize(e){const{_type:t,_model:n,...i}=e;if(n&&n!=="base_chat_model")throw new Error(`Cannot load LLM with model ${n}`);const s={openai:(await Promise.resolve().then(()=>Cy)).ChatOpenAI}[t];if(s===void 0)throw new Error(`Cannot load LLM with type ${t}`);return new s(i)}}class Xt extends iu{constructor({concurrency:e,...t}){super(e?{maxConcurrency:e,...t}:t),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","llms",this._llmType()]})}async invoke(e,t){const n=Xt._convertInputToPromptValue(e);return(await this.generatePrompt([n],t,t==null?void 0:t.callbacks)).generations[0][0].text}async*_streamResponseChunks(e,t,n){throw new Error("Not implemented.")}_separateRunnableConfigFromCallOptions(e){const[t,n]=super._separateRunnableConfigFromCallOptions(e);return n!=null&&n.timeout&&!n.signal&&(n.signal=AbortSignal.timeout(n.timeout)),[t,n]}async*_streamIterator(e,t){if(this._streamResponseChunks===Xt.prototype._streamResponseChunks)yield this.invoke(e,t);else{const n=Xt._convertInputToPromptValue(e),[i,s]=this._separateRunnableConfigFromCallOptions(t),a=await Ve.configure(i.callbacks,this.callbacks,i.tags,this.tags,i.metadata,this.metadata,{verbose:this.verbose}),o={options:s,invocation_params:this==null?void 0:this.invocationParams(s)},u=await(a==null?void 0:a.handleLLMStart(this.toJSON(),[n.toString()],void 0,void 0,o,void 0,void 0,i.runName));let c=new nr({text:""});try{for await(const d of this._streamResponseChunks(e.toString(),s,u==null?void 0:u[0]))c?c=c.concat(d):c=d,typeof d.text=="string"&&(yield d.text)}catch(d){throw await Promise.all((u??[]).map(f=>f==null?void 0:f.handleLLMError(d))),d}await Promise.all((u??[]).map(d=>d==null?void 0:d.handleLLMEnd({generations:[[c]]})))}}async generatePrompt(e,t,n){const i=e.map(s=>s.toString());return this.generate(i,t,n)}invocationParams(e){return{}}_flattenLLMResult(e){const t=[];for(let n=0;n<e.generations.length;n+=1){const i=e.generations[n];if(n===0)t.push({generations:[i],llmOutput:e.llmOutput});else{const s=e.llmOutput?{...e.llmOutput,tokenUsage:{}}:void 0;t.push({generations:[i],llmOutput:s})}}return t}async _generateUncached(e,t,n){const i=await Ve.configure(n.callbacks,this.callbacks,n.tags,this.tags,n.metadata,this.metadata,{verbose:this.verbose}),s={options:t,invocation_params:this==null?void 0:this.invocationParams(t)},a=await(i==null?void 0:i.handleLLMStart(this.toJSON(),e,void 0,void 0,s,void 0,void 0,n==null?void 0:n.runName));let o;try{o=await this._generate(e,t,a==null?void 0:a[0])}catch(d){throw await Promise.all((a??[]).map(f=>f==null?void 0:f.handleLLMError(d))),d}const u=this._flattenLLMResult(o);await Promise.all((a??[]).map((d,f)=>d==null?void 0:d.handleLLMEnd(u[f])));const c=(a==null?void 0:a.map(d=>d.runId))||void 0;return Object.defineProperty(o,Go,{value:c?{runIds:c}:void 0,configurable:!0}),o}async generate(e,t,n){if(!Array.isArray(e))throw new Error("Argument 'prompts' is expected to be a string[]");let i;Array.isArray(t)?i={stop:t}:i=t;const[s,a]=this._separateRunnableConfigFromCallOptions(i);if(s.callbacks=s.callbacks??n,!this.cache)return this._generateUncached(e,a,s);const{cache:o}=this,u=this._getSerializedCacheKeyParametersForCall(a),c=[],d=await Promise.all(e.map(async(m,b)=>{const g=await o.lookup(m,u);return g||c.push(b),g}));let f={};if(c.length>0){const m=await this._generateUncached(c.map(b=>e[b]),a,s);await Promise.all(m.generations.map(async(b,g)=>{const _=c[g];return d[_]=b,o.update(e[_],u,b)})),f=m.llmOutput??{}}return{generations:d,llmOutput:f}}async call(e,t,n){const{generations:i}=await this.generate([e],t,n);return i[0][0].text}async predict(e,t,n){return this.call(e,t,n)}async predictMessages(e,t,n){const i=Mn(e),s=await this.call(i,t,n);return new As(s)}_identifyingParams(){return{}}serialize(){return{...this._identifyingParams(),_type:this._llmType(),_model:this._modelType()}}_modelType(){return"base_llm"}static async deserialize(e){const{_type:t,_model:n,...i}=e;if(n&&n!=="base_llm")throw new Error(`Cannot load LLM with model ${n}`);const s={openai:(await Promise.resolve().then(()=>Mf)).OpenAI}[t];if(s===void 0)throw new Error(`Cannot load  LLM with type ${t}`);return new s(i)}}class Lf extends Xt{async _generate(e,t,n){return{generations:await Promise.all(e.map((s,a)=>this._call(s,{...t,promptIndex:a},n).then(o=>[{text:o}])))}}}function qn(r){let e;return r.constructor.name===rf.name?(e=new Error(r.message),e.name="TimeoutError"):r.constructor.name===nf.name?(e=new Error(r.message),e.name="AbortError"):e=r,e}class Os extends Lf{static lc_name(){return"OpenAIChat"}get callKeys(){return[...super.callKeys,"options","promptIndex"]}get lc_secrets(){return{openAIApiKey:"OPENAI_API_KEY",azureOpenAIApiKey:"AZURE_OPENAI_API_KEY",organization:"OPENAI_ORGANIZATION"}}get lc_aliases(){return{modelName:"model",openAIApiKey:"openai_api_key",azureOpenAIApiVersion:"azure_openai_api_version",azureOpenAIApiKey:"azure_openai_api_key",azureOpenAIApiInstanceName:"azure_openai_api_instance_name",azureOpenAIApiDeploymentName:"azure_openai_api_deployment_name"}}constructor(e,t){var n,i,s,a,o,u,c,d;if(super(e??{}),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"temperature",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,"topP",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,"frequencyPenalty",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"presencePenalty",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"n",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,"logitBias",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"maxTokens",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"modelName",{enumerable:!0,configurable:!0,writable:!0,value:"gpt-3.5-turbo"}),Object.defineProperty(this,"prefixMessages",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"modelKwargs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"timeout",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"stop",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"user",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"streaming",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"openAIApiKey",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiVersion",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiKey",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiInstanceName",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiDeploymentName",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIBasePath",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"organization",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"client",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"clientConfig",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.openAIApiKey=(e==null?void 0:e.openAIApiKey)??ce("OPENAI_API_KEY"),this.azureOpenAIApiKey=(e==null?void 0:e.azureOpenAIApiKey)??ce("AZURE_OPENAI_API_KEY"),!this.azureOpenAIApiKey&&!this.openAIApiKey)throw new Error("OpenAI or Azure OpenAI API key not found");if(this.azureOpenAIApiInstanceName=(e==null?void 0:e.azureOpenAIApiInstanceName)??ce("AZURE_OPENAI_API_INSTANCE_NAME"),this.azureOpenAIApiDeploymentName=((e==null?void 0:e.azureOpenAIApiCompletionsDeploymentName)||(e==null?void 0:e.azureOpenAIApiDeploymentName))??(ce("AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME")||ce("AZURE_OPENAI_API_DEPLOYMENT_NAME")),this.azureOpenAIApiVersion=(e==null?void 0:e.azureOpenAIApiVersion)??ce("AZURE_OPENAI_API_VERSION"),this.azureOpenAIBasePath=(e==null?void 0:e.azureOpenAIBasePath)??ce("AZURE_OPENAI_BASE_PATH"),this.organization=((n=e==null?void 0:e.configuration)==null?void 0:n.organization)??ce("OPENAI_ORGANIZATION"),this.modelName=(e==null?void 0:e.modelName)??this.modelName,this.prefixMessages=(e==null?void 0:e.prefixMessages)??this.prefixMessages,this.modelKwargs=(e==null?void 0:e.modelKwargs)??{},this.timeout=e==null?void 0:e.timeout,this.temperature=(e==null?void 0:e.temperature)??this.temperature,this.topP=(e==null?void 0:e.topP)??this.topP,this.frequencyPenalty=(e==null?void 0:e.frequencyPenalty)??this.frequencyPenalty,this.presencePenalty=(e==null?void 0:e.presencePenalty)??this.presencePenalty,this.n=(e==null?void 0:e.n)??this.n,this.logitBias=e==null?void 0:e.logitBias,this.maxTokens=e==null?void 0:e.maxTokens,this.stop=e==null?void 0:e.stop,this.user=e==null?void 0:e.user,this.streaming=(e==null?void 0:e.streaming)??!1,this.n>1)throw new Error("Cannot use n > 1 in OpenAIChat LLM. Use ChatOpenAI Chat Model instead.");if(this.azureOpenAIApiKey){if(!this.azureOpenAIApiInstanceName&&!this.azureOpenAIBasePath)throw new Error("Azure OpenAI API instance name not found");if(!this.azureOpenAIApiDeploymentName)throw new Error("Azure OpenAI API deployment name not found");if(!this.azureOpenAIApiVersion)throw new Error("Azure OpenAI API version not found");this.openAIApiKey=this.openAIApiKey??""}this.clientConfig={apiKey:this.openAIApiKey,organization:this.organization,baseURL:(t==null?void 0:t.basePath)??((i=e==null?void 0:e.configuration)==null?void 0:i.basePath),dangerouslyAllowBrowser:!0,defaultHeaders:((s=t==null?void 0:t.baseOptions)==null?void 0:s.headers)??((o=(a=e==null?void 0:e.configuration)==null?void 0:a.baseOptions)==null?void 0:o.headers),defaultQuery:((u=t==null?void 0:t.baseOptions)==null?void 0:u.params)??((d=(c=e==null?void 0:e.configuration)==null?void 0:c.baseOptions)==null?void 0:d.params),...t,...e==null?void 0:e.configuration}}invocationParams(e){return{model:this.modelName,temperature:this.temperature,top_p:this.topP,frequency_penalty:this.frequencyPenalty,presence_penalty:this.presencePenalty,n:this.n,logit_bias:this.logitBias,max_tokens:this.maxTokens===-1?void 0:this.maxTokens,stop:(e==null?void 0:e.stop)??this.stop,user:this.user,stream:this.streaming,...this.modelKwargs}}_identifyingParams(){return{model_name:this.modelName,...this.invocationParams(),...this.clientConfig}}identifyingParams(){return{model_name:this.modelName,...this.invocationParams(),...this.clientConfig}}formatMessages(e){const t={role:"user",content:e};return this.prefixMessages?[...this.prefixMessages,t]:[t]}async*_streamResponseChunks(e,t,n){var a;const i={...this.invocationParams(t),messages:this.formatMessages(e),stream:!0},s=await this.completionWithRetry(i,t);for await(const o of s){const u=o==null?void 0:o.choices[0];if(!u)continue;const{delta:c}=u,d=new nr({text:c.content??""});yield d;const f={prompt:t.promptIndex??0,completion:u.index??0};n==null||n.handleLLMNewToken(d.text??"",f)}if((a=t.signal)!=null&&a.aborted)throw new Error("AbortError")}async _call(e,t,n){var s,a;const i=this.invocationParams(t);if(i.stream){const o=await this._streamResponseChunks(e,t,n);let u;for await(const c of o)u===void 0?u=c:u=u.concat(c);return(u==null?void 0:u.text)??""}else{const o=await this.completionWithRetry({...i,stream:!1,messages:this.formatMessages(e)},{signal:t.signal,...t.options});return((a=(s=o==null?void 0:o.choices[0])==null?void 0:s.message)==null?void 0:a.content)??""}}async completionWithRetry(e,t){const n=this._getClientOptions(t);return this.caller.call(async()=>{try{return await this.client.chat.completions.create(e,n)}catch(i){throw qn(i)}})}_getClientOptions(e){if(!this.client){const n={azureOpenAIApiDeploymentName:this.azureOpenAIApiDeploymentName,azureOpenAIApiInstanceName:this.azureOpenAIApiInstanceName,azureOpenAIApiKey:this.azureOpenAIApiKey,azureOpenAIBasePath:this.azureOpenAIBasePath,baseURL:this.clientConfig.baseURL},i=Kn(n),s={...this.clientConfig,baseURL:i,timeout:this.timeout,maxRetries:0};s.baseURL||delete s.baseURL,this.client=new Pe(s)}const t={...this.clientConfig,...e};return this.azureOpenAIApiKey&&(t.headers={"api-key":this.azureOpenAIApiKey,...t.headers},t.query={"api-version":this.azureOpenAIApiVersion,...t.query}),t}_llmType(){return"openai"}}class Uf extends Xt{static lc_name(){return"OpenAI"}get callKeys(){return[...super.callKeys,"options"]}get lc_secrets(){return{openAIApiKey:"OPENAI_API_KEY",azureOpenAIApiKey:"AZURE_OPENAI_API_KEY",organization:"OPENAI_ORGANIZATION"}}get lc_aliases(){return{modelName:"model",openAIApiKey:"openai_api_key",azureOpenAIApiVersion:"azure_openai_api_version",azureOpenAIApiKey:"azure_openai_api_key",azureOpenAIApiInstanceName:"azure_openai_api_instance_name",azureOpenAIApiDeploymentName:"azure_openai_api_deployment_name"}}constructor(e,t){var n,i,s,a,o,u,c,d,f,m,b;if(((n=e==null?void 0:e.modelName)!=null&&n.startsWith("gpt-3.5-turbo")||(i=e==null?void 0:e.modelName)!=null&&i.startsWith("gpt-4"))&&!((s=e==null?void 0:e.modelName)!=null&&s.includes("-instruct")))return new Os(e,t);if(super(e??{}),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"temperature",{enumerable:!0,configurable:!0,writable:!0,value:.7}),Object.defineProperty(this,"maxTokens",{enumerable:!0,configurable:!0,writable:!0,value:256}),Object.defineProperty(this,"topP",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,"frequencyPenalty",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"presencePenalty",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"n",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,"bestOf",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"logitBias",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"modelName",{enumerable:!0,configurable:!0,writable:!0,value:"text-davinci-003"}),Object.defineProperty(this,"modelKwargs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"batchSize",{enumerable:!0,configurable:!0,writable:!0,value:20}),Object.defineProperty(this,"timeout",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"stop",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"user",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"streaming",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"openAIApiKey",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiVersion",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiKey",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiInstanceName",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiDeploymentName",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIBasePath",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"organization",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"client",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"clientConfig",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.openAIApiKey=(e==null?void 0:e.openAIApiKey)??ce("OPENAI_API_KEY"),this.azureOpenAIApiKey=(e==null?void 0:e.azureOpenAIApiKey)??ce("AZURE_OPENAI_API_KEY"),!this.azureOpenAIApiKey&&!this.openAIApiKey)throw new Error("OpenAI or Azure OpenAI API key not found");if(this.azureOpenAIApiInstanceName=(e==null?void 0:e.azureOpenAIApiInstanceName)??ce("AZURE_OPENAI_API_INSTANCE_NAME"),this.azureOpenAIApiDeploymentName=((e==null?void 0:e.azureOpenAIApiCompletionsDeploymentName)||(e==null?void 0:e.azureOpenAIApiDeploymentName))??(ce("AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME")||ce("AZURE_OPENAI_API_DEPLOYMENT_NAME")),this.azureOpenAIApiVersion=(e==null?void 0:e.azureOpenAIApiVersion)??ce("AZURE_OPENAI_API_VERSION"),this.azureOpenAIBasePath=(e==null?void 0:e.azureOpenAIBasePath)??ce("AZURE_OPENAI_BASE_PATH"),this.organization=((a=e==null?void 0:e.configuration)==null?void 0:a.organization)??ce("OPENAI_ORGANIZATION"),this.modelName=(e==null?void 0:e.modelName)??this.modelName,this.modelKwargs=(e==null?void 0:e.modelKwargs)??{},this.batchSize=(e==null?void 0:e.batchSize)??this.batchSize,this.timeout=e==null?void 0:e.timeout,this.temperature=(e==null?void 0:e.temperature)??this.temperature,this.maxTokens=(e==null?void 0:e.maxTokens)??this.maxTokens,this.topP=(e==null?void 0:e.topP)??this.topP,this.frequencyPenalty=(e==null?void 0:e.frequencyPenalty)??this.frequencyPenalty,this.presencePenalty=(e==null?void 0:e.presencePenalty)??this.presencePenalty,this.n=(e==null?void 0:e.n)??this.n,this.bestOf=(e==null?void 0:e.bestOf)??this.bestOf,this.logitBias=e==null?void 0:e.logitBias,this.stop=e==null?void 0:e.stop,this.user=e==null?void 0:e.user,this.streaming=(e==null?void 0:e.streaming)??!1,this.streaming&&this.bestOf&&this.bestOf>1)throw new Error("Cannot stream results when bestOf > 1");if(this.azureOpenAIApiKey){if(!this.azureOpenAIApiInstanceName&&!this.azureOpenAIBasePath)throw new Error("Azure OpenAI API instance name not found");if(!this.azureOpenAIApiDeploymentName)throw new Error("Azure OpenAI API deployment name not found");if(!this.azureOpenAIApiVersion)throw new Error("Azure OpenAI API version not found");this.openAIApiKey=this.openAIApiKey??""}this.clientConfig={apiKey:this.openAIApiKey,organization:this.organization,baseURL:(t==null?void 0:t.basePath)??((o=e==null?void 0:e.configuration)==null?void 0:o.basePath),dangerouslyAllowBrowser:!0,defaultHeaders:((u=t==null?void 0:t.baseOptions)==null?void 0:u.headers)??((d=(c=e==null?void 0:e.configuration)==null?void 0:c.baseOptions)==null?void 0:d.headers),defaultQuery:((f=t==null?void 0:t.baseOptions)==null?void 0:f.params)??((b=(m=e==null?void 0:e.configuration)==null?void 0:m.baseOptions)==null?void 0:b.params),...t,...e==null?void 0:e.configuration}}invocationParams(e){return{model:this.modelName,temperature:this.temperature,max_tokens:this.maxTokens,top_p:this.topP,frequency_penalty:this.frequencyPenalty,presence_penalty:this.presencePenalty,n:this.n,best_of:this.bestOf,logit_bias:this.logitBias,stop:(e==null?void 0:e.stop)??this.stop,user:this.user,stream:this.streaming,...this.modelKwargs}}_identifyingParams(){return{model_name:this.modelName,...this.invocationParams(),...this.clientConfig}}identifyingParams(){return this._identifyingParams()}async _generate(e,t,n){const i=qi(e,this.batchSize),s=[],a={},o=this.invocationParams(t);if(o.max_tokens===-1){if(e.length!==1)throw new Error("max_tokens set to -1 not supported for multiple inputs");o.max_tokens=await Af({prompt:e[0],modelName:this.modelName})}for(let c=0;c<i.length;c+=1){const d=o.stream?await(async()=>{var T;const g=[];let _;const h=await this.completionWithRetry({...o,stream:!0,prompt:i[c]},t);for await(const j of h){_||(_={id:j.id,object:j.object,created:j.created,model:j.model});for(const S of j.choices){if(!g[S.index])g[S.index]=S;else{const R=g[S.index];R.text+=S.text,R.finish_reason=S.finish_reason,R.logprobs=S.logprobs}n==null||n.handleLLMNewToken(S.text,{prompt:Math.floor(S.index/this.n),completion:S.index%this.n})}}if((T=t.signal)!=null&&T.aborted)throw new Error("AbortError");return{..._,choices:g}})():await this.completionWithRetry({...o,stream:!1,prompt:i[c]},{signal:t.signal,...t.options});s.push(...d.choices);const{completion_tokens:f,prompt_tokens:m,total_tokens:b}=d.usage?d.usage:{completion_tokens:void 0,prompt_tokens:void 0,total_tokens:void 0};f&&(a.completionTokens=(a.completionTokens??0)+f),m&&(a.promptTokens=(a.promptTokens??0)+m),b&&(a.totalTokens=(a.totalTokens??0)+b)}return{generations:qi(s,this.n).map(c=>c.map(d=>({text:d.text??"",generationInfo:{finishReason:d.finish_reason,logprobs:d.logprobs}}))),llmOutput:{tokenUsage:a}}}async*_streamResponseChunks(e,t,n){var a;const i={...this.invocationParams(t),prompt:e,stream:!0},s=await this.completionWithRetry(i,t);for await(const o of s){const u=o==null?void 0:o.choices[0];if(!u)continue;const c=new nr({text:u.text,generationInfo:{finishReason:u.finish_reason}});yield c,n==null||n.handleLLMNewToken(c.text??"")}if((a=t.signal)!=null&&a.aborted)throw new Error("AbortError")}async completionWithRetry(e,t){const n=this._getClientOptions(t);return this.caller.call(async()=>{try{return await this.client.completions.create(e,n)}catch(i){throw qn(i)}})}_getClientOptions(e){if(!this.client){const n={azureOpenAIApiDeploymentName:this.azureOpenAIApiDeploymentName,azureOpenAIApiInstanceName:this.azureOpenAIApiInstanceName,azureOpenAIApiKey:this.azureOpenAIApiKey,azureOpenAIBasePath:this.azureOpenAIBasePath,baseURL:this.clientConfig.baseURL},i=Kn(n),s={...this.clientConfig,baseURL:i,timeout:this.timeout,maxRetries:0};s.baseURL||delete s.baseURL,this.client=new Pe(s)}const t={...this.clientConfig,...e};return this.azureOpenAIApiKey&&(t.headers={"api-key":this.azureOpenAIApiKey,...t.headers},t.query={"api-version":this.azureOpenAIApiVersion,...t.query}),t}_llmType(){return"openai"}}const Mf=Object.freeze(Object.defineProperty({__proto__:null,OpenAI:Uf,OpenAIChat:Os},Symbol.toStringTag,{value:"Module"}));class $f{constructor(e){Object.defineProperty(this,"pageContent",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"metadata",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.pageContent=e.pageContent?e.pageContent.toString():this.pageContent,this.metadata=e.metadata??{}}}class On extends eu{constructor(e){if(super(e),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"examples",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"exampleSelector",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"examplePrompt",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"suffix",{enumerable:!0,configurable:!0,writable:!0,value:""}),Object.defineProperty(this,"exampleSeparator",{enumerable:!0,configurable:!0,writable:!0,value:`

`}),Object.defineProperty(this,"prefix",{enumerable:!0,configurable:!0,writable:!0,value:""}),Object.defineProperty(this,"templateFormat",{enumerable:!0,configurable:!0,writable:!0,value:"f-string"}),Object.defineProperty(this,"validateTemplate",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e),this.examples!==void 0&&this.exampleSelector!==void 0)throw new Error("Only one of 'examples' and 'example_selector' should be provided");if(this.examples===void 0&&this.exampleSelector===void 0)throw new Error("One of 'examples' and 'example_selector' should be provided");if(this.validateTemplate){let t=this.inputVariables;this.partialVariables&&(t=t.concat(Object.keys(this.partialVariables))),ru(this.prefix+this.suffix,this.templateFormat,t)}}_getPromptType(){return"few_shot"}async getExamples(e){if(this.examples!==void 0)return this.examples;if(this.exampleSelector!==void 0)return this.exampleSelector.selectExamples(e);throw new Error("One of 'examples' and 'example_selector' should be provided")}async partial(e){const t=this.inputVariables.filter(s=>!(s in e)),n={...this.partialVariables??{},...e},i={...this,inputVariables:t,partialVariables:n};return new On(i)}async format(e){const t=await this.mergePartialAndUserVariables(e),n=await this.getExamples(t),i=await Promise.all(n.map(a=>this.examplePrompt.format(a))),s=[this.prefix,...i,this.suffix].join(this.exampleSeparator);return Ts(s,this.templateFormat,t)}serialize(){if(this.exampleSelector||!this.examples)throw new Error("Serializing an example selector is not currently supported");if(this.outputParser!==void 0)throw new Error("Serializing an output parser is not currently supported");return{_type:this._getPromptType(),input_variables:this.inputVariables,example_prompt:this.examplePrompt.serialize(),example_separator:this.exampleSeparator,suffix:this.suffix,prefix:this.prefix,template_format:this.templateFormat,examples:this.examples}}static async deserialize(e){const{example_prompt:t}=e;if(!t)throw new Error("Missing example prompt");const n=await vt.deserialize(t);let i;if(Array.isArray(e.examples))i=e.examples;else throw new Error("Invalid examples format. Only list or string are supported.");return new On({inputVariables:e.input_variables,examplePrompt:n,examples:i,exampleSeparator:e.example_separator,prefix:e.prefix,suffix:e.suffix,templateFormat:e.template_format})}}const zf=Object.freeze(Object.defineProperty({__proto__:null,FewShotPromptTemplate:On},Symbol.toStringTag,{value:"Module"})),Bf={arabic:"ar",armenian:"am",bulgarian:"bg",danish:"dk",dutch:"nl",english:"en",finnish:"fi",french:"fr",german:"de",greek:"gr",hungarian:"hu",indian:"in",indonesian:"id",irish:"ie",italian:"it",lithuanian:"lt",nepali:"np",norwegian:"no",portuguese:"pt",romanian:"ro",russian:"ru",serbian:"rs",slovenian:"ru",spanish:"es",swedish:"se",tamil:"ta",turkish:"tr",ukrainian:"uk",sanskrit:"sk"},Zf={dutch:/[^A-Za-zàèéìòóù0-9_'-]+/gim,english:/[^A-Za-zàèéìòóù0-9_'-]+/gim,french:/[^a-z0-9äâàéèëêïîöôùüûœç-]+/gim,italian:/[^A-Za-zàèéìòóù0-9_'-]+/gim,norwegian:/[^a-z0-9_æøåÆØÅäÄöÖüÜ]+/gim,portuguese:/[^a-z0-9à-úÀ-Ú]/gim,russian:/[^a-z0-9а-яА-ЯёЁ]+/gim,spanish:/[^a-z0-9A-Zá-úÁ-ÚñÑüÜ]+/gim,swedish:/[^a-z0-9_åÅäÄöÖüÜ-]+/gim,german:/[^a-z0-9A-ZäöüÄÖÜß]+/gim,finnish:/[^a-z0-9äöÄÖ]+/gim,danish:/[^a-z0-9æøåÆØÅ]+/gim,hungarian:/[^a-z0-9áéíóöőúüűÁÉÍÓÖŐÚÜŰ]+/gim,romanian:/[^a-z0-9ăâîșțĂÂÎȘȚ]+/gim,serbian:/[^a-z0-9čćžšđČĆŽŠĐ]+/gim,turkish:/[^a-z0-9çÇğĞıİöÖşŞüÜ]+/gim,lithuanian:/[^a-z0-9ąčęėįšųūžĄČĘĖĮŠŲŪŽ]+/gim,arabic:/[^a-z0-9أ-ي]+/gim,nepali:/[^a-z0-9अ-ह]+/gim,irish:/[^a-z0-9áéíóúÁÉÍÓÚ]+/gim,indian:/[^a-z0-9अ-ह]+/gim,armenian:/[^a-z0-9ա-ֆ]+/gim,greek:/[^a-z0-9α-ωά-ώ]+/gim,indonesian:/[^a-z0-9]+/gim,ukrainian:/[^a-z0-9а-яА-ЯіїєІЇЄ]+/gim,slovenian:/[^a-z0-9čžšČŽŠ]+/gim,bulgarian:/[^a-z0-9а-яА-Я]+/gim,tamil:/[^a-z0-9அ-ஹ]+/gim,sanskrit:/[^a-z0-9A-Zāīūṛḷṃṁḥśṣṭḍṇṅñḻḹṝ]+/gim},su=Object.keys(Bf),Vf=Date.now().toString().slice(5);let Ff=0;const ha=BigInt(1e3),pa=BigInt(1e6),ma=BigInt(1e9),Ii=65535;function xe(r,e){if(e.length<Ii)Array.prototype.push.apply(r,e);else for(let t=0;t<e.length;t+=Ii)Array.prototype.push.apply(r,e.slice(t,t+Ii))}function Kf(r,...e){return r.replace(/%(?:(?<position>\d+)\$)?(?<width>-?\d*\.?\d*)(?<type>[dfs])/g,function(...t){const n=t[t.length-1],{width:i,type:s,position:a}=n,o=a?e[Number.parseInt(a)-1]:e.shift(),u=i===""?0:Number.parseInt(i);switch(s){case"d":return o.toString().padStart(u,"0");case"f":{let c=o;const[d,f]=i.split(".").map(m=>Number.parseFloat(m));return typeof f=="number"&&f>=0&&(c=c.toFixed(f)),typeof d=="number"&&d>=0?c.toString().padStart(u,"0"):c.toString()}case"s":return u<0?o.toString().padEnd(-u," "):o.toString().padStart(u," ");default:return o}})}async function au(r){return typeof r=="number"&&(r=BigInt(r)),r<ha?`${r}ns`:r<pa?`${r/ha}μs`:r<ma?`${r/pa}ms`:`${r/ma}s`}async function xn(){return typeof process<"u"&&process.hrtime!==void 0?process.hrtime.bigint():BigInt(typeof performance<"u"?Math.floor(performance.now()*1e6):0)}async function ou(){return`${Vf}-${Ff++}`}function Wi(r,e){return Object.hasOwn===void 0?Object.prototype.hasOwnProperty.call(r,e)?r[e]:void 0:Object.hasOwn(r,e)?r[e]:void 0}function qf(r,e){return e[1]===r[1]?r[0]-e[0]:e[1]-r[1]}function xs(r){if(r.length===0)return[];if(r.length===1)return r[0];for(let t=1;t<r.length;t++)if(r[t].length<r[0].length){const n=r[0];r[0]=r[t],r[t]=n}const e=new Map;for(const t of r[0])e.set(t,1);for(let t=1;t<r.length;t++){let n=0;for(const i of r[t]){const s=e.get(i);s===t&&(e.set(i,s+1),n++)}if(n===0)return[]}return r[0].filter(t=>{const n=e.get(t);return n!==void 0&&e.set(t,0),n===r.length})}async function uu(r,e){const t={},n=e.length;for(let i=0;i<n;i++){const s=e[i],a=s.split(".");let o=r;const u=a.length;for(let c=0;c<u;c++)if(o=o[a[c]],typeof o=="object"){if(o!==null&&"lat"in o&&"lon"in o&&typeof o.lat=="number"&&typeof o.lon=="number"){o=t[s]=o;break}else if(!Array.isArray(o)&&o!==null&&c===u-1){o=void 0;break}}else if((o===null||typeof o!="object")&&c<u-1){o=void 0;break}typeof o<"u"&&(t[s]=o)}return t}async function Ss(r,e){return(await uu(r,[e]))[e]}const Hf={cm:.01,m:1,km:1e3,ft:.3048,yd:.9144,mi:1609.344};function Wf(r,e){const t=Hf[e];if(t===void 0)throw new Error(pe("INVALID_DISTANCE_SUFFIX",r).message);return r*t}const Gf=su.join(`
 - `),Yf={NO_LANGUAGE_WITH_CUSTOM_TOKENIZER:"Do not pass the language option to create when using a custom tokenizer.",LANGUAGE_NOT_SUPPORTED:`Language "%s" is not supported.
Supported languages are:
 - ${Gf}`,INVALID_STEMMER_FUNCTION_TYPE:"config.stemmer property must be a function.",MISSING_STEMMER:'As of version 1.0.0 @orama/orama does not ship non English stemmers by default. To solve this, please explicitly import and specify the "%s" stemmer from the package @orama/stemmers. See https://docs.oramasearch.com/open-source/text-analysis/stemming for more information.',CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY:"Custom stop words array must only contain strings.",UNSUPPORTED_COMPONENT:'Unsupported component "%s".',COMPONENT_MUST_BE_FUNCTION:'The component "%s" must be a function.',COMPONENT_MUST_BE_FUNCTION_OR_ARRAY_FUNCTIONS:'The component "%s" must be a function or an array of functions.',INVALID_SCHEMA_TYPE:'Unsupported schema type "%s" at "%s". Expected "string", "boolean" or "number" or array of them.',DOCUMENT_ID_MUST_BE_STRING:'Document id must be of type "string". Got "%s" instead.',DOCUMENT_ALREADY_EXISTS:'A document with id "%s" already exists.',DOCUMENT_DOES_NOT_EXIST:'A document with id "%s" does not exists.',MISSING_DOCUMENT_PROPERTY:'Missing searchable property "%s".',INVALID_DOCUMENT_PROPERTY:'Invalid document property "%s": expected "%s", got "%s"',UNKNOWN_INDEX:'Invalid property name "%s". Expected a wildcard string ("*") or array containing one of the following properties: %s',INVALID_BOOST_VALUE:"Boost value must be a number greater than, or less than 0.",INVALID_FILTER_OPERATION:"You can only use one operation per filter, you requested %d.",SCHEMA_VALIDATION_FAILURE:'Cannot insert document due schema validation failure on "%s" property.',INVALID_SORT_SCHEMA_TYPE:'Unsupported sort schema type "%s" at "%s". Expected "string" or "number".',CANNOT_SORT_BY_ARRAY:'Cannot configure sort for "%s" because it is an array (%s).',UNABLE_TO_SORT_ON_UNKNOWN_FIELD:'Unable to sort on unknown field "%s". Allowed fields: %s',SORT_DISABLED:"Sort is disabled. Please read the documentation at https://docs.oramasearch for more information.",UNKNOWN_GROUP_BY_PROPERTY:'Unknown groupBy property "%s".',INVALID_GROUP_BY_PROPERTY:'Invalid groupBy property "%s". Allowed types: "%s", but given "%s".',UNKNOWN_FILTER_PROPERTY:'Unknown filter property "%s".',INVALID_VECTOR_SIZE:'Vector size must be a number greater than 0. Got "%s" instead.',INVALID_VECTOR_VALUE:'Vector value must be a number greater than 0. Got "%s" instead.',INVALID_INPUT_VECTOR:`Property "%s" was declared as a %s-dimensional vector, but got a %s-dimensional vector instead.
Input vectors must be of the size declared in the schema, as calculating similarity between vectors of different sizes can lead to unexpected results.`,WRONG_SEARCH_PROPERTY_TYPE:'Property "%s" is not searchable. Only "string" properties are searchable.',FACET_NOT_SUPPORTED:`Facet doens't support the type "%s".`,INVALID_DISTANCE_SUFFIX:'Invalid distance suffix "%s". Valid suffixes are: cm, m, km, mi, yd, ft.'};function pe(r,...e){const t=new Error(Kf(Yf[r]??`Unsupported Orama Error code: ${r}`,...e));return t.code=r,"captureStackTrace"in Error.prototype&&Error.captureStackTrace(t),t}async function Jf(r){return{raw:Number(r),formatted:await au(r)}}async function Xf(r){if(r.id){if(typeof r.id!="string")throw pe("DOCUMENT_ID_MUST_BE_STRING",typeof r.id);return r.id}return await ou()}async function cu(r,e){for(const[t,n]of Object.entries(e)){const i=r[t];if(!(typeof i>"u")&&!(n==="geopoint"&&typeof i=="object"&&typeof i.lon=="number"&&typeof i.lat=="number")&&!(n==="enum"&&(typeof i=="string"||typeof i=="number"))){if(n==="enum[]"&&Array.isArray(i)){const s=i.length;for(let a=0;a<s;a++)if(typeof i[a]!="string"&&typeof i[a]!="number")return t+"."+a;continue}if(ir(n)){const s=lu(n);if(!Array.isArray(i)||i.length!==s)throw pe("INVALID_INPUT_VECTOR",t,s,i.length);continue}if(Hn(n)){if(!Array.isArray(i))return t;const s=Cs(n),a=i.length;for(let o=0;o<a;o++)if(typeof i[o]!==s)return t+"."+o;continue}if(typeof n=="object"){if(!i||typeof i!="object")return t;const s=await cu(i,n);if(s)return t+"."+s;continue}if(typeof i!==n)return t}}}const Qf={string:!1,number:!1,boolean:!1,enum:!1,geopoint:!1,"string[]":!0,"number[]":!0,"boolean[]":!0,"enum[]":!0},eh={"string[]":"string","number[]":"number","boolean[]":"boolean","enum[]":"enum"};function th(r){return r==="geopoint"}function ir(r){return typeof r=="string"&&/^vector\[\d+\]$/.test(r)}function Hn(r){return typeof r=="string"&&Qf[r]}function Cs(r){return eh[r]}function lu(r){const e=Number(r.slice(7,-1));switch(!0){case isNaN(e):throw pe("INVALID_VECTOR_VALUE",r);case e<=0:throw pe("INVALID_VECTOR_SIZE",r);default:return e}}function rh(){return{idToInternalId:new Map,internalIdToId:[],save:nh,load:ih}}function nh(r){return{internalIdToId:r.internalIdToId}}function ih(r,e){const{internalIdToId:t}=e;r.internalDocumentIDStore.idToInternalId.clear(),r.internalDocumentIDStore.internalIdToId=[];for(let n=0;n<t.length;n++)r.internalDocumentIDStore.idToInternalId.set(t[n],n+1),r.internalDocumentIDStore.internalIdToId.push(t[n])}function Oe(r,e){if(typeof e=="string"){const t=r.idToInternalId.get(e);if(t)return t;const n=r.idToInternalId.size+1;return r.idToInternalId.set(e,n),r.internalIdToId.push(e),n}return e>r.internalIdToId.length?Oe(r,e.toString()):e}function Mr(r,e){if(r.internalIdToId.length<e)throw new Error(`Invalid internalId ${e}`);return r.internalIdToId[e-1]}async function sh(r,e){return{sharedInternalDocumentStore:e,docs:{},count:0}}async function ah(r,e){const t=Oe(r.sharedInternalDocumentStore,e);return r.docs[t]}async function oh(r,e){const t=Array.from({length:e.length});for(let n=0;n<e.length;n++){const i=Oe(r.sharedInternalDocumentStore,e[n]);t[n]=r.docs[i]}return t}async function uh(r){return r.docs}async function ch(r,e,t){const n=Oe(r.sharedInternalDocumentStore,e);return typeof r.docs[n]<"u"?!1:(r.docs[n]=t,r.count++,!0)}async function lh(r,e){const t=Oe(r.sharedInternalDocumentStore,e);return typeof r.docs[t]>"u"?!1:(delete r.docs[t],r.count--,!0)}async function dh(r){return r.count}async function fh(r,e){const t=e;return{docs:t.docs,count:t.count,sharedInternalDocumentStore:r}}async function hh(r){return{docs:r.docs,count:r.count}}async function ph(){return{create:sh,get:ah,getMultiple:oh,getAll:uh,store:ch,remove:lh,count:dh,load:fh,save:hh}}const mh=["beforeInsert","afterInsert","beforeRemove","afterRemove","beforeUpdate","afterUpdate","beforeSearch","afterSearch","beforeInsertMultiple","afterInsertMultiple","beforeRemoveMultiple","afterRemoveMultiple","beforeUpdateMultiple","afterUpdateMultiple","beforeLoad","afterLoad"];function gh(r,e){var t;const n=[],i=(t=r.plugins)===null||t===void 0?void 0:t.length;if(!i)return n;for(let s=0;s<i;s++){const a=r.plugins[s];typeof a[e]=="function"&&n.push(a[e])}return n}const yh=["tokenizer","index","documentsStore","sorter"],ga=["validateSchema","getDocumentIndexId","getDocumentProperties","formatElapsedTime"];async function Sn(r,e,t,n){const i=r.length;for(let s=0;s<i;s++)await r[s](e,t,n)}async function Cn(r,e,t){const n=r.length;for(let i=0;i<n;i++)await r[i](e,t)}async function bh(r,e,t,n,i){const s=r.length;for(let a=0;a<s;a++)await r[a](e,t,n,i)}async function vh(r,e,t,n){const i=r.length;for(let s=0;s<i;s++)await r[s](e,t,n)}const ya={UNBALANCED_RIGHT:-2,SLIGHTLY_UNBALANCED_RIGHT:-1,BALANCED:0,SLIGHTLY_UNBALANCED_LEFT:1,UNBALANCED_LEFT:2};function ut(r){return r!=null?r.h:-1}function ba(r){const e=r.r;return r.r=e.l,e.l=r,r.h=Math.max(ut(r.l),ut(r.r))+1,e.h=Math.max(ut(e.l),ut(e.r))+1,e}function va(r){const e=r.l;return r.l=e.r,e.r=r,r.h=Math.max(ut(r.l),ut(r.r))+1,e.h=Math.max(ut(e.l),ut(e.r))+1,e}function wh(r,e,t){if(!r)return[];const n=[];function i(s){s&&(s.k>e&&i(s.l),s.k>=e&&s.k<=t&&xe(n,s.v),s.k<t&&i(s.r))}return i(r),n}function wa(r,e,t=!1){if(!r)return[];const n=[];function i(s){s&&(t&&s.k>=e&&xe(n,s.v),!t&&s.k>e&&xe(n,s.v),i(s.l),i(s.r))}return i(r),n}function _a(r,e,t=!1){if(!r)return[];const n=[];function i(s){s&&(t&&s.k<=e&&xe(n,s.v),!t&&s.k<e&&xe(n,s.v),i(s.l),i(s.r))}return i(r),n}function du(r,e){for(;r!==null;)if(e<r.k)r=r.l;else if(e>r.k)r=r.r;else return r;return null}function fu(r,e){return{k:r,v:e,l:null,r:null,h:0}}function _h(r,e,t){let n=null,i=r;for(;i!==null;)if(n=i,e<i.k)i=i.l;else if(e>i.k)i=i.r;else return i.v=i.v.concat(t),r;const s=fu(e,t);for(n==null?r=s:e<n.k?n.l=s:n.r=s,i=s;n!=null;){const a=ut(n.l)-ut(n.r);if(a===ya.UNBALANCED_LEFT&&(e>n.l.k&&(n.l=ba(n.l)),n=va(n)),a===ya.UNBALANCED_RIGHT&&(e<n.r.k&&(n.r=va(n.r)),n=ba(n)),n===r)break;i=n,n=Ih(r,i.k)}return r}function Ih(r,e){let t=r,n=null;for(;t!==null;)if(e<t.k)n=t,t=t.l;else if(e>t.k)n=t,t=t.r;else break;return n}function Ah(r,e){const t=du(r,e);return t==null?null:t.v}function Eh(r,e){let t=r,n=null;for(;t!=null&&t.k!==e;)n=t,e<t.k?t=t.l:t=t.r;if(t==null)return null;if(t.l==null&&t.r==null)n==null?r=null:n.l===t?n.l=null:n.r=null;else if(t.l!=null&&t.r!=null){let i=t.r,s=t;for(;i.l!=null;)s=i,i=i.l;t.k=i.k,s===t?s.r=i.r:s.l=i.r}else{const i=t.l!=null?t.l:t.r;n==null?r=i:n.l===t?n.l=i:n.r=i}return r}function Th(r,e,t){const n=du(r,t);if(n){if(n.v.length===1){Eh(r,t);return}n.v.splice(n.v.indexOf(e),1)}}function Ph(){return{numberToDocumentId:new Map}}function Oh(r,e,t){return r.numberToDocumentId.has(e)?(r.numberToDocumentId.get(e).push(t),r):(r.numberToDocumentId.set(e,[t]),r)}function xh(r,e,t){var n,i;r==null||r.numberToDocumentId.set(t,((n=r==null?void 0:r.numberToDocumentId.get(t))===null||n===void 0?void 0:n.filter(s=>s!==e))??[]),((i=r==null?void 0:r.numberToDocumentId.get(t))===null||i===void 0?void 0:i.length)===0&&(r==null||r.numberToDocumentId.delete(t))}function Sh(r,e){const t=Object.keys(e);if(t.length!==1)throw new Error("Invalid operation");const n=t[0];switch(n){case"eq":{const i=e[n];return r.numberToDocumentId.get(i)??[]}case"in":{const i=e[n],s=[];for(const a of i){const o=r.numberToDocumentId.get(a);o!=null&&xe(s,o)}return s}case"nin":{const i=e[n],s=[],a=r.numberToDocumentId.keys();for(const o of a){if(i.includes(o))continue;const u=r.numberToDocumentId.get(o);u!=null&&xe(s,u)}return s}}throw new Error("Invalid operation")}function Ch(r,e){const t=Object.keys(e);if(t.length!==1)throw new Error("Invalid operation");const n=t[0];switch(n){case"containsAll":{const s=e[n].map(a=>r.numberToDocumentId.get(a)??[]);return xs(s)}}throw new Error("Invalid operation")}function kh(r,e,t){if(r===e)return 0;const n=r;r.length>e.length&&(r=e,e=n);let i=r.length,s=e.length;for(;i>0&&r.charCodeAt(~-i)===e.charCodeAt(~-s);)i--,s--;if(!i)return s>t?-1:s;let a=0;for(;a<i&&r.charCodeAt(a)===e.charCodeAt(a);)a++;if(i-=a,s-=a,i===0)return s>t?-1:s;const o=s-i;if(t>s)t=s;else if(o>t)return-1;let u=0;const c=[],d=[];for(;u<t;)d[u]=e.charCodeAt(a+u),c[u]=++u;for(;u<s;)d[u]=e.charCodeAt(a+u),c[u++]=t+1;const f=t-o,m=t<s;let b=0,g=t,_=0,h=0,T=0,j=0,S=0;for(u=0;u<i;u++){for(h=u,_=u+1,j=r.charCodeAt(a+u),b+=u>f?1:0,g+=g<s?1:0,S=b;S<g;S++)T=_,_=h,h=c[S],j!==d[S]&&(h<_&&(_=h),T<_&&(_=T),_++),c[S]=_;if(m&&c[u+o]>t)return-1}return _<=t?_:-1}function hu(r,e,t){const n=kh(r,e,t);return{distance:n,isBounded:n>=0}}class Nh{constructor(e,t,n){Ee(this,"c",{});Ee(this,"d",[]);Ee(this,"w","");this.k=e,this.s=t,this.e=n}toJSON(){return{w:this.w,s:this.s,c:this.c,d:this.d,e:this.e}}}function Vt(r,e){r.w=e.w+r.s}function Wr(r,e){r.d.push(e)}function Rh(r,e){const t=r.d.indexOf(e);return t===-1?!1:(r.d.splice(t,1),!0)}function pu(r,e,t,n,i){if(r.e){const{w:s,d:a}=r;if(n&&s!==t)return{};if(Wi(e,s)==null&&(i?Math.abs(t.length-s.length)<=i&&hu(t,s,i).isBounded&&(e[s]=[]):e[s]=[]),Wi(e,s)!=null&&a.length>0){const o=new Set(e[s]),u=a.length;for(let c=0;c<u;c++)o.add(a[c]);e[s]=Array.from(o)}}for(const s of Object.keys(r.c))pu(r.c[s],e,t,n,i);return e}function mu(r,e){let t="";const n=Math.min(r.length,e.length);for(let i=0;i<n;i++){if(r[i]!==e[i])return t;t+=r[i]}return t}function Ht(r=!1,e="",t=""){return new Nh(t,e,r)}function Dh(r,e,t){for(let n=0;n<e.length;n++){const i=e[n],s=e.substring(n),a=r.c[i];if(a){const o=a.s,u=o.length,c=mu(o,s),d=c.length;if(o===s){Wr(a,t),a.e=!0;return}const f=o[d];if(d<u&&d===s.length){const m=Ht(!0,s,i);m.c[f]=a;const b=m.c[f];b.s=o.substring(d),b.k=f,r.c[i]=m,Vt(m,r),Vt(b,m),Wr(m,t);return}if(d<u&&d<s.length){const m=Ht(!1,c,i);m.c[f]=a,r.c[i]=m;const b=m.c[f];b.s=o.substring(d),b.k=f;const g=s[d],_=Ht(!0,e.substring(n+d),g);Wr(_,t),m.c[g]=_,Vt(m,r),Vt(_,m),Vt(b,m);return}n+=u-1,r=a}else{const o=Ht(!0,s,i);Wr(o,t),r.c[i]=o,Vt(o,r);return}}}function Ir(r,e,t,n,i,s){if(!(n<0)){if(r.e){const{w:a,d:o}=r;if(a&&(Math.abs(e.length-a.length)<=i&&hu(e,a,i).isBounded&&(s[a]=[]),Wi(s,a)!=null&&o.length>0)){const c=new Set(s[a]),d=o.length;for(let f=0;f<d;f++)c.add(o[f]);s[a]=Array.from(c)}}if(!(t>=e.length)){e[t]in r.c&&Ir(r.c[e[t]],e,t+1,n,i,s),Ir(r,e,t+1,n-1,i,s);for(const a in r.c)Ir(r.c[a],e,t,n-1,i,s);for(const a in r.c)a!==e[t]&&Ir(r.c[a],e,t+1,n-1,i,s)}}}function gu(r,{term:e,exact:t,tolerance:n}){if(n&&!t){const i={};return n=n||0,Ir(r,e,0,n||0,n,i),i}else{for(let s=0;s<e.length;s++){const a=e[s];if(a in r.c){const o=r.c[a],u=o.s,c=e.substring(s),f=mu(u,c).length;if(f!==u.length&&f!==c.length){if(n)break;return{}}s+=o.s.length-1,r=o}else return{}}const i={};return pu(r,i,e,t,n),i}}function jh(r,e,t,n=!0){if(!e)return!0;for(let i=0;i<e.length;i++){const s=e[i];if(s in r.c){const a=r.c[s];i+=a.s.length-1,r=a,n&&r.w!==e||Rh(r,t)}else return!1}return!0}const yu=2,Lh=6371e3;function Uh(){return{root:null}}function Mh(r,e,t){const n={point:e,docIDs:t};if(r.root==null){r.root=n;return}let i=r.root,s=0;for(;i!==null;){if(i.point.lon===e.lon&&i.point.lat===e.lat){const o=i.docIDs??[];i.docIDs=Array.from(new Set([...o,...t||[]]));return}if(s%yu===0)if(e.lon<i.point.lon){if(i.left==null){i.left=n;return}i=i.left}else{if(i.right==null){i.right=n;return}i=i.right}else if(e.lat<i.point.lat){if(i.left==null){i.left=n;return}i=i.left}else{if(i.right==null){i.right=n;return}i=i.right}s++}}function $h(r,e,t){let n=r.root,i=0,s=null,a=null;for(;n!==null;){if((n==null?void 0:n.point.lon)===e.lon&&n.point.lat===e.lat){var o;const d=(o=n.docIDs)===null||o===void 0?void 0:o.indexOf(t);if(d!==void 0&&d>-1){var u;(u=n.docIDs)===null||u===void 0||u.splice(d,1),(n.docIDs==null||n.docIDs.length===0)&&(s!=null?a==="left"?s.left=n.left!==null?n.left:n.right:a==="right"&&(s.right=n.right!==null?n.right:n.left):r.root=n.left!==null?n.left:n.right);return}}const c=i%yu;s=n,c===0?e.lon<n.point.lon?(n=n==null?void 0:n.left,a="left"):(n=n==null?void 0:n.right,a="right"):e.lat<n.point.lat?(n=n==null?void 0:n.left,a="left"):(n=n==null?void 0:n.right,a="right"),i++}}function zh(r,e,t,n=!0,i="asc",s=!1){const a=s?vu:bu,o=[{node:r,depth:0}],u=[];for(;o.length>0;){const{node:c,depth:d}=o.pop();if(c===null)continue;const f=a(e,c.point);(n?f<=t:f>t)&&u.push({point:c.point,docIDs:c.docIDs??[]}),c.left!=null&&o.push({node:c.left,depth:d+1}),c.right!=null&&o.push({node:c.right,depth:d+1})}return i&&u.sort((c,d)=>{const f=a(e,c.point),m=a(e,d.point);return i.toLowerCase()==="asc"?f-m:m-f}),u}function Bh(r,e,t=!0,n=null,i=!1){const s=[{node:r,depth:0}],a=[];for(;s.length>0;){const u=s.pop();if(u==null||u.node==null)continue;const{node:c,depth:d}=u,f=d+1;c.left!=null&&s.push({node:c.left,depth:f}),c.right!=null&&s.push({node:c.right,depth:f});const m=Vh(e,c.point);m&&t?a.push({point:c.point,docIDs:c.docIDs??[]}):!m&&!t&&a.push({point:c.point,docIDs:c.docIDs??[]})}const o=Zh(e);if(n){const u=i?vu:bu;a.sort((c,d)=>{const f=u(o,c.point),m=u(o,d.point);return n.toLowerCase()==="asc"?f-m:m-f})}return a}function Zh(r){let e=0,t=0,n=0;for(let i=0,s=r.length-1;i<r.length;s=i++){const a=r[i].lon,o=r[i].lat,u=r[s].lon,c=r[s].lat,d=a*c-u*o;e+=d,t+=(a+u)*d,n+=(o+c)*d}return e/=2,t/=6*e,n/=6*e,{lon:t,lat:n}}function Vh(r,e){let t=!1;const n=e.lon,i=e.lat;for(let s=0,a=r.length-1;s<r.length;a=s++){const o=r[s].lon,u=r[s].lat,c=r[a].lon,d=r[a].lat;u>i!=d>i&&n<(c-o)*(i-u)/(d-u)+o&&(t=!t)}return t}function bu(r,e){const t=Math.PI/180,n=r.lat*t,i=e.lat*t,s=(e.lat-r.lat)*t,a=(e.lon-r.lon)*t,o=Math.sin(s/2)*Math.sin(s/2)+Math.cos(n)*Math.cos(i)*Math.sin(a/2)*Math.sin(a/2),u=2*Math.atan2(Math.sqrt(o),Math.sqrt(1-o));return Lh*u}function vu(r,e){const n=.0033528106647474805,i=(1-n)*6378137,s=Math.PI/180,a=r.lat*s,o=e.lat*s,u=(e.lon-r.lon)*s,c=Math.atan((1-n)*Math.tan(a)),d=Math.atan((1-n)*Math.tan(o)),f=Math.sin(c),m=Math.cos(c),b=Math.sin(d),g=Math.cos(d);let _=u,h,T=1e3,j,S,R,M,O;do{const L=Math.sin(_),q=Math.cos(_);R=Math.sqrt(g*L*(g*L)+(m*b-f*g*q)*(m*b-f*g*q)),M=f*b+m*g*q,O=Math.atan2(R,M),j=m*g*L/R,S=1-j*j;const Y=M-2*f*b/S,K=n/16*S*(4+n*(4-3*S));h=_,_=u+(1-K)*n*j*(O+K*R*(Y+K*M*(-1+2*Y*Y)))}while(Math.abs(_-h)>1e-12&&--T>0);const C=S*(6378137*6378137-i*i)/(i*i),v=1+C/16384*(4096+C*(-768+C*(320-175*C))),A=C/1024*(256+C*(-128+C*(74-47*C))),I=A*R*(M-2*f*b/S+A/4*(M*(-1+2*R*R)-A/6*O*(-3+4*R*R)*(-3+4*O*O)));return i*v*(O-I)}function Fh(r,e,t=1,n){if(e===0)throw pe("INVALID_BOOST_VALUE");const i=new Map,s=new Map,a=r.length;for(let g=0;g<a;g++){const _=r[g],h=_.length;for(let T=0;T<h;T++){const[j,S]=_[T],R=S*e,M=i.get(j);M!==void 0?(i.set(j,M*1.5+R),s.set(j,s.get(j)+1)):(i.set(j,R),s.set(j,1))}}const o=[];for(const g of i.entries())o.push(g);const u=o.sort((g,_)=>_[1]-g[1]);if(t===1)return u;const c=u.length,d=[];for(const g of s.entries())d.push(g);const f=d.sort((g,_)=>_[1]-g[1]);let m;for(let g=0;g<c&&f[g][1]===n;g++)m=g;if(typeof m>"u"){if(t===0)return[];m=0}if(t===0)return u.slice(0,m+1);const b=m+Math.ceil(t*100*(u.length-m)/100);return u.slice(0,u.length+b)}function Kh(r,e,t,n,i,s){const{k:a,b:o,d:u}=s;return Math.log(1+(t-e+.5)/(e+.5))*(u+r*(a+1))/(r+a*(1-o+o*n/i))}function wu(r,e){let t=0;for(let n=0;n<e;n++)t+=r[n]*r[n];return Math.sqrt(t)}function qh(r,e,t,n=.8){const i=wu(r,t),s=[];for(const[a,[o,u]]of Object.entries(e)){let c=0;for(let f=0;f<t;f++)c+=r[f]*u[f];const d=c/(i*o);d>=n&&s.push({id:a,score:d})}return s.sort((a,o)=>o.score-a.score)}async function Hh(r,e,t,n,i){const s=Oe(r.sharedInternalDocumentStore,t);r.avgFieldLength[e]=((r.avgFieldLength[e]??0)*(i-1)+n.length)/i,r.fieldLengths[e][s]=n.length,r.frequencies[e][s]={}}async function Wh(r,e,t,n,i){let s=0;for(const u of n)u===i&&s++;const a=Oe(r.sharedInternalDocumentStore,t),o=s/n.length;r.frequencies[e][a][i]=o,i in r.tokenOccurrences[e]||(r.tokenOccurrences[e][i]=0),r.tokenOccurrences[e][i]=(r.tokenOccurrences[e][i]??0)+1}async function Gh(r,e,t,n){const i=Oe(r.sharedInternalDocumentStore,t);r.avgFieldLength[e]=(r.avgFieldLength[e]*n-r.fieldLengths[e][i])/(n-1),r.fieldLengths[e][i]=void 0,r.frequencies[e][i]=void 0}async function Yh(r,e,t){r.tokenOccurrences[e][t]--}async function Jh(r,e,t,n,i){const s=Array.from(i),a=e.avgFieldLength[t],o=e.fieldLengths[t],u=e.tokenOccurrences[t],c=e.frequencies[t],d=typeof u[n]=="number"?u[n]??0:0,f=[],m=s.length;for(let g=0;g<m;g++){var b;const _=Oe(e.sharedInternalDocumentStore,s[g]),h=(c==null||(b=c[_])===null||b===void 0?void 0:b[n])??0,T=Kh(h,d,r.docsCount,o[_],a,r.params.relevance);f.push([_,T])}return f}async function _u(r,e,t,n,i=""){n||(n={sharedInternalDocumentStore:e,indexes:{},vectorIndexes:{},searchableProperties:[],searchablePropertiesWithTypes:{},frequencies:{},tokenOccurrences:{},avgFieldLength:{},fieldLengths:{}});for(const[s,a]of Object.entries(t)){const o=`${i}${i?".":""}${s}`;if(typeof a=="object"&&!Array.isArray(a)){_u(r,e,a,n,o);continue}if(ir(a))n.searchableProperties.push(o),n.searchablePropertiesWithTypes[o]=a,n.vectorIndexes[o]={size:lu(a),vectors:{}};else{const u=/\[/.test(a);switch(a){case"boolean":case"boolean[]":n.indexes[o]={type:"Bool",node:{true:[],false:[]},isArray:u};break;case"number":case"number[]":n.indexes[o]={type:"AVL",node:fu(0,[]),isArray:u};break;case"string":case"string[]":n.indexes[o]={type:"Radix",node:Ht(),isArray:u},n.avgFieldLength[o]=0,n.frequencies[o]={},n.tokenOccurrences[o]={},n.fieldLengths[o]={};break;case"enum":case"enum[]":n.indexes[o]={type:"Flat",node:Ph(),isArray:u};break;case"geopoint":n.indexes[o]={type:"BKD",node:Uh(),isArray:u};break;default:throw pe("INVALID_SCHEMA_TYPE",Array.isArray(a)?"array":a,o)}n.searchableProperties.push(o),n.searchablePropertiesWithTypes[o]=a}}return n}async function Ia(r,e,t,n,i,s,a,o,u){const c=Oe(e.sharedInternalDocumentStore,n),{type:d,node:f}=e.indexes[t];switch(d){case"Bool":{f[i?"true":"false"].push(c);break}case"AVL":{_h(f,i,[c]);break}case"Radix":{const m=await o.tokenize(i,a,t);await r.insertDocumentScoreParameters(e,t,c,m,u);for(const b of m)await r.insertTokenScoreParameters(e,t,c,m,b),Dh(f,b,c);break}case"Flat":{Oh(f,i,c);break}case"BKD":{Mh(f,i,[c]);break}}}async function Xh(r,e,t,n,i,s,a,o,u){if(ir(s))return Qh(e,t,i,n);if(!Hn(s))return Ia(r,e,t,n,i,s,a,o,u);const c=Cs(s),d=i,f=d.length;for(let m=0;m<f;m++)await Ia(r,e,t,n,d[m],c,a,o,u)}function Qh(r,e,t,n){t instanceof Float32Array||(t=new Float32Array(t));const i=r.vectorIndexes[e].size,s=wu(t,i);r.vectorIndexes[e].vectors[n]=[s,t]}async function Aa(r,e,t,n,i,s,a,o,u){const c=Oe(e.sharedInternalDocumentStore,n);if(ir(s))return delete e.vectorIndexes[t].vectors[n],!0;const{type:d,node:f}=e.indexes[t];switch(d){case"AVL":return Th(f,c,i),!0;case"Bool":{const b=f[i?"true":"false"].indexOf(c);return f[i?"true":"false"].splice(b,1),!0}case"Radix":{const m=await o.tokenize(i,a,t);await r.removeDocumentScoreParameters(e,t,n,u);for(const b of m)await r.removeTokenScoreParameters(e,t,b),jh(f,b,c);return!0}case"Flat":return xh(f,c,i),!0;case"BKD":return $h(f,i,c),!1}}async function ep(r,e,t,n,i,s,a,o,u){if(!Hn(s))return Aa(r,e,t,n,i,s,a,o,u);const c=Cs(s),d=i,f=d.length;for(let m=0;m<f;m++)await Aa(r,e,t,n,d[m],c,a,o,u);return!0}async function tp(r,e,t,n){if(!(t in e.tokenOccurrences))return[];const{node:i,type:s}=e.indexes[t];if(s!=="Radix")throw pe("WRONG_SEARCH_PROPERTY_TYPE",t);const{exact:a,tolerance:o}=r.params,u=gu(i,{term:n,exact:a,tolerance:o}),c=new Set;for(const d in u)for(const f of u[d])c.add(f);return r.index.calculateResultScores(r,e,t,n,Array.from(c))}async function rp(r,e,t){const n=Object.keys(t),i=n.reduce((a,o)=>({[o]:[],...a}),{});for(const a of n){const o=t[a];if(typeof e.indexes[a]>"u")throw pe("UNKNOWN_FILTER_PROPERTY",a);const{node:u,type:c,isArray:d}=e.indexes[a];if(c==="Bool"){const b=u[o.toString()];xe(i[a],b);continue}if(c==="BKD"){let m;if("radius"in o)m="radius";else if("polygon"in o)m="polygon";else throw new Error(`Invalid operation ${o}`);if(m==="radius"){const{value:b,coordinates:g,unit:_="m",inside:h=!0,highPrecision:T=!1}=o[m],j=Wf(b,_),S=zh(u.root,g,j,h,void 0,T);xe(i[a],S.map(({docIDs:R})=>R).flat())}else{const{coordinates:b,inside:g=!0,highPrecision:_=!1}=o[m],h=Bh(u.root,b,g,void 0,_);xe(i[a],h.map(({docIDs:T})=>T).flat())}continue}if(c==="Radix"&&(typeof o=="string"||Array.isArray(o))){for(const m of[o].flat()){const b=await r.tokenizer.tokenize(m,r.language,a);for(const g of b){const _=gu(u,{term:g,exact:!0});xe(i[a],Object.values(_).flat())}}continue}const f=Object.keys(o);if(f.length>1)throw pe("INVALID_FILTER_OPERATION",f.length);if(c==="Flat"){d?xe(i[a],Ch(u,o)):xe(i[a],Sh(u,o));continue}if(c==="AVL"){const m=f[0],b=o[m];let g=[];switch(m){case"gt":{g=wa(u,b,!1);break}case"gte":{g=wa(u,b,!0);break}case"lt":{g=_a(u,b,!1);break}case"lte":{g=_a(u,b,!0);break}case"eq":{g=Ah(u,b)??[];break}case"between":{const[_,h]=b;g=wh(u,_,h);break}}xe(i[a],g)}}return xs(Object.values(i))}async function np(r){return r.searchableProperties}async function ip(r){return r.searchablePropertiesWithTypes}function Iu(r){const e=Ht(r.e,r.s,r.k);e.d=r.d,e.w=r.w;for(const t of Object.keys(r.c))e.c[t]=Iu(r.c[t]);return e}function sp(r){return{numberToDocumentId:new Map(r)}}function ap(r){return Array.from(r.numberToDocumentId.entries())}async function op(r,e){const{indexes:t,vectorIndexes:n,searchableProperties:i,searchablePropertiesWithTypes:s,frequencies:a,tokenOccurrences:o,avgFieldLength:u,fieldLengths:c}=e,d={},f={};for(const m of Object.keys(t)){const{node:b,type:g,isArray:_}=t[m];switch(g){case"Radix":d[m]={type:"Radix",node:Iu(b),isArray:_};break;case"Flat":d[m]={type:"Flat",node:sp(b),isArray:_};break;default:d[m]=t[m]}}for(const m of Object.keys(n)){const b=n[m].vectors;for(const g in b)b[g]=[b[g][0],new Float32Array(b[g][1])];f[m]={size:n[m].size,vectors:b}}return{sharedInternalDocumentStore:r,indexes:d,vectorIndexes:f,searchableProperties:i,searchablePropertiesWithTypes:s,frequencies:a,tokenOccurrences:o,avgFieldLength:u,fieldLengths:c}}async function up(r){const{indexes:e,vectorIndexes:t,searchableProperties:n,searchablePropertiesWithTypes:i,frequencies:s,tokenOccurrences:a,avgFieldLength:o,fieldLengths:u}=r,c={};for(const f of Object.keys(t)){const m=t[f].vectors;for(const b in m)m[b]=[m[b][0],Array.from(m[b][1])];c[f]={size:t[f].size,vectors:m}}const d={};for(const f of Object.keys(e)){const{type:m,node:b,isArray:g}=e[f];if(m!=="Flat"){d[f]=e[f];continue}d[f]={type:"Flat",node:ap(b),isArray:g}}return{indexes:d,vectorIndexes:c,searchableProperties:n,searchablePropertiesWithTypes:i,frequencies:s,tokenOccurrences:a,avgFieldLength:o,fieldLengths:u}}async function cp(){return{create:_u,insert:Xh,remove:ep,insertDocumentScoreParameters:Hh,insertTokenScoreParameters:Wh,removeDocumentScoreParameters:Gh,removeTokenScoreParameters:Yh,calculateResultScores:Jh,search:tp,searchByWhereClause:rp,getSearchableProperties:np,getSearchablePropertiesWithTypes:ip,load:op,save:up}}function Au(r,e,t,n,i){const s={language:r.tokenizer.language,sharedInternalDocumentStore:e,enabled:!0,isSorted:!0,sortableProperties:[],sortablePropertiesWithTypes:{},sorts:{}};for(const[a,o]of Object.entries(t)){const u=`${i}${i?".":""}${a}`;if(!n.includes(u)){if(typeof o=="object"&&!Array.isArray(o)){const c=Au(r,e,o,n,u);xe(s.sortableProperties,c.sortableProperties),s.sorts={...s.sorts,...c.sorts},s.sortablePropertiesWithTypes={...s.sortablePropertiesWithTypes,...c.sortablePropertiesWithTypes};continue}if(!ir(o))switch(o){case"boolean":case"number":case"string":s.sortableProperties.push(u),s.sortablePropertiesWithTypes[u]=o,s.sorts[u]={docs:new Map,orderedDocsToRemove:new Map,orderedDocs:[],type:o};break;case"geopoint":case"enum":continue;case"enum[]":case"boolean[]":case"number[]":case"string[]":continue;default:throw pe("INVALID_SORT_SCHEMA_TYPE",Array.isArray(o)?"array":o,u)}}}return s}async function lp(r,e,t,n){return(n==null?void 0:n.enabled)!==!1?Au(r,e,t,(n||{}).unsortableProperties||[],""):{disabled:!0}}async function dp(r,e,t,n){if(!r.enabled)return;r.isSorted=!1;const i=Oe(r.sharedInternalDocumentStore,t),s=r.sorts[e];s.docs.set(i,s.orderedDocs.length),s.orderedDocs.push([i,n])}function Eu(r){if(r.isSorted||!r.enabled)return;const e=Object.keys(r.sorts);for(const t of e)mp(r,t);r.isSorted=!0}function fp(r,e,t){return e[1].localeCompare(t[1],r)}function hp(r,e){return r[1]-e[1]}function pp(r,e){return e[1]?-1:1}function mp(r,e){const t=r.sorts[e];let n;switch(t.type){case"string":n=fp.bind(null,r.language);break;case"number":n=hp.bind(null);break;case"boolean":n=pp.bind(null);break}t.orderedDocs.sort(n);const i=t.orderedDocs.length;for(let s=0;s<i;s++){const a=t.orderedDocs[s][0];t.docs.set(a,s)}}function gp(r){const e=Object.keys(r.sorts);for(const t of e)Tu(r,t)}function Tu(r,e){const t=r.sorts[e];t.orderedDocsToRemove.size&&(t.orderedDocs=t.orderedDocs.filter(n=>!t.orderedDocsToRemove.has(n[0])),t.orderedDocsToRemove.clear())}async function yp(r,e,t){if(!r.enabled)return;const n=r.sorts[e],i=Oe(r.sharedInternalDocumentStore,t);n.docs.get(i)&&(n.docs.delete(i),n.orderedDocsToRemove.set(i,!0))}async function bp(r,e,t){if(!r.enabled)throw pe("SORT_DISABLED");const n=t.property,i=t.order==="DESC",s=r.sorts[n];if(!s)throw pe("UNABLE_TO_SORT_ON_UNKNOWN_FIELD",n,r.sortableProperties.join(", "));return Tu(r,n),Eu(r),e.sort((a,o)=>{const u=s.docs.get(Oe(r.sharedInternalDocumentStore,a[0])),c=s.docs.get(Oe(r.sharedInternalDocumentStore,o[0])),d=typeof u<"u",f=typeof c<"u";return!d&&!f?0:d?f?i?c-u:u-c:-1:1}),e}async function vp(r){return r.enabled?r.sortableProperties:[]}async function wp(r){return r.enabled?r.sortablePropertiesWithTypes:{}}async function _p(r,e){const t=e;if(!t.enabled)return{enabled:!1};const n=Object.keys(t.sorts).reduce((i,s)=>{const{docs:a,orderedDocs:o,type:u}=t.sorts[s];return i[s]={docs:new Map(Object.entries(a).map(([c,d])=>[+c,d])),orderedDocsToRemove:new Map,orderedDocs:o,type:u},i},{});return{sharedInternalDocumentStore:r,language:t.language,sortableProperties:t.sortableProperties,sortablePropertiesWithTypes:t.sortablePropertiesWithTypes,sorts:n,enabled:!0,isSorted:t.isSorted}}async function Ip(r){if(!r.enabled)return{enabled:!1};gp(r),Eu(r);const e=Object.keys(r.sorts).reduce((t,n)=>{const{docs:i,orderedDocs:s,type:a}=r.sorts[n];return t[n]={docs:Object.fromEntries(i.entries()),orderedDocs:s,type:a},t},{});return{language:r.language,sortableProperties:r.sortableProperties,sortablePropertiesWithTypes:r.sortablePropertiesWithTypes,sorts:e,enabled:r.enabled,isSorted:r.isSorted}}async function Ap(){return{create:lp,insert:dp,remove:yp,save:Ip,load:_p,sortBy:bp,getSortableProperties:vp,getSortablePropertiesWithTypes:wp}}const Ea=192,Ep=383,Tp=[65,65,65,65,65,65,65,67,69,69,69,69,73,73,73,73,69,78,79,79,79,79,79,null,79,85,85,85,85,89,80,115,97,97,97,97,97,97,97,99,101,101,101,101,105,105,105,105,101,110,111,111,111,111,111,null,111,117,117,117,117,121,112,121,65,97,65,97,65,97,67,99,67,99,67,99,67,99,68,100,68,100,69,101,69,101,69,101,69,101,69,101,71,103,71,103,71,103,71,103,72,104,72,104,73,105,73,105,73,105,73,105,73,105,73,105,74,106,75,107,107,76,108,76,108,76,108,76,108,76,108,78,110,78,110,78,110,110,78,110,79,111,79,111,79,111,79,111,82,114,82,114,82,114,83,115,83,115,83,115,83,115,84,116,84,116,84,116,85,117,85,117,85,117,85,117,85,117,85,117,87,119,89,121,89,90,122,90,122,90,122,115];function Pp(r){return r<Ea||r>Ep?r:Tp[r-Ea]||r}function Op(r){const e=[];for(let t=0;t<r.length;t++)e[t]=Pp(r.charCodeAt(t));return String.fromCharCode(...e)}const xp={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},Sp={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},Cp="[^aeiou]",kn="[aeiouy]",ct=Cp+"[^aeiouy]*",Nr=kn+"[aeiou]*",Ai="^("+ct+")?"+Nr+ct,kp="^("+ct+")?"+Nr+ct+"("+Nr+")?$",Gr="^("+ct+")?"+Nr+ct+Nr+ct,Ta="^("+ct+")?"+kn;function Np(r){let e,t,n,i,s,a;if(r.length<3)return r;const o=r.substring(0,1);if(o=="y"&&(r=o.toUpperCase()+r.substring(1)),n=/^(.+?)(ss|i)es$/,i=/^(.+?)([^s])s$/,n.test(r)?r=r.replace(n,"$1$2"):i.test(r)&&(r=r.replace(i,"$1$2")),n=/^(.+?)eed$/,i=/^(.+?)(ed|ing)$/,n.test(r)){const u=n.exec(r);n=new RegExp(Ai),n.test(u[1])&&(n=/.$/,r=r.replace(n,""))}else i.test(r)&&(e=i.exec(r)[1],i=new RegExp(Ta),i.test(e)&&(r=e,i=/(at|bl|iz)$/,s=new RegExp("([^aeiouylsz])\\1$"),a=new RegExp("^"+ct+kn+"[^aeiouwxy]$"),i.test(r)?r=r+"e":s.test(r)?(n=/.$/,r=r.replace(n,"")):a.test(r)&&(r=r+"e")));if(n=/^(.+?)y$/,n.test(r)){const u=n.exec(r);e=u==null?void 0:u[1],n=new RegExp(Ta),e&&n.test(e)&&(r=e+"i")}if(n=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,n.test(r)){const u=n.exec(r);e=u==null?void 0:u[1],t=u==null?void 0:u[2],n=new RegExp(Ai),e&&n.test(e)&&(r=e+xp[t])}if(n=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,n.test(r)){const u=n.exec(r);e=u==null?void 0:u[1],t=u==null?void 0:u[2],n=new RegExp(Ai),e&&n.test(e)&&(r=e+Sp[t])}if(n=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,i=/^(.+?)(s|t)(ion)$/,n.test(r)){const u=n.exec(r);e=u==null?void 0:u[1],n=new RegExp(Gr),e&&n.test(e)&&(r=e)}else if(i.test(r)){const u=i.exec(r);e=(u==null?void 0:u[1])??""+(u==null?void 0:u[2])??"",i=new RegExp(Gr),i.test(e)&&(r=e)}if(n=/^(.+?)e$/,n.test(r)){const u=n.exec(r);e=u==null?void 0:u[1],n=new RegExp(Gr),i=new RegExp(kp),s=new RegExp("^"+ct+kn+"[^aeiouwxy]$"),e&&(n.test(e)||i.test(e)&&!s.test(e))&&(r=e)}return n=/ll$/,i=new RegExp(Gr),n.test(r)&&i.test(r)&&(n=/.$/,r=r.replace(n,"")),o=="y"&&(r=o.toLowerCase()+r.substring(1)),r}function Pa(r,e){var t;const n=`${this.language}:${r}:${e}`;return this.normalizationCache.has(n)?this.normalizationCache.get(n):!((t=this.stopWords)===null||t===void 0)&&t.includes(e)?(this.normalizationCache.set(n,""),""):(this.stemmer&&!this.stemmerSkipProperties.has(r)&&(e=this.stemmer(e)),e=Op(e),this.normalizationCache.set(n,e),e)}function Rp(r){for(;r[r.length-1]==="";)r.pop();for(;r[0]==="";)r.shift();return r}function Oa(r,e,t){if(e&&e!==this.language)throw pe("LANGUAGE_NOT_SUPPORTED",e);if(typeof r!="string")return[r];let n;if(t&&this.tokenizeSkipProperties.has(t))n=[this.normalizeToken.bind(this,t??"")(r)];else{const s=Zf[this.language];n=r.toLowerCase().split(s).map(this.normalizeToken.bind(this,t??"")).filter(Boolean)}const i=Rp(n);return this.allowDuplicates?i:Array.from(new Set(i))}async function xa(r={}){if(!r.language)r.language="english";else if(!su.includes(r.language))throw pe("LANGUAGE_NOT_SUPPORTED",r.language);let e;if(r.stemming||r.stemmer&&!("stemming"in r))if(r.stemmer){if(typeof r.stemmer!="function")throw pe("INVALID_STEMMER_FUNCTION_TYPE");e=r.stemmer}else if(r.language==="english")e=Np;else throw pe("MISSING_STEMMER",r.language);let t;if(r.stopWords!==!1){if(t=[],Array.isArray(r.stopWords))t=r.stopWords;else if(typeof r.stopWords=="function")t=await r.stopWords(t);else if(r.stopWords)throw pe("CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY");if(!Array.isArray(t))throw pe("CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY");for(const i of t)if(typeof i!="string")throw pe("CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY")}const n={tokenize:Oa,language:r.language,stemmer:e,stemmerSkipProperties:new Set(r.stemmerSkipProperties?[r.stemmerSkipProperties].flat():[]),tokenizeSkipProperties:new Set(r.tokenizeSkipProperties?[r.tokenizeSkipProperties].flat():[]),stopWords:t,allowDuplicates:!!r.allowDuplicates,normalizeToken:Pa,normalizationCache:new Map};return n.tokenize=Oa.bind(n),n.normalizeToken=Pa,n}function Dp(r){const e={formatElapsedTime:Jf,getDocumentIndexId:Xf,getDocumentProperties:uu,validateSchema:cu};for(const t of ga){const n=t;if(r[n]){if(typeof r[n]!="function")throw pe("COMPONENT_MUST_BE_FUNCTION",n)}else r[n]=e[n]}for(const t of Object.keys(r))if(!yh.includes(t)&&!ga.includes(t))throw pe("UNSUPPORTED_COMPONENT",t)}async function Pu({schema:r,sort:e,language:t,components:n,id:i,plugins:s}){n||(n={}),i||(i=await ou());let a=n.tokenizer,o=n.index,u=n.documentsStore,c=n.sorter;if(a?a.tokenize?a=a:a=await xa(a):a=await xa({language:t??"english"}),n.tokenizer&&t)throw pe("NO_LANGUAGE_WITH_CUSTOM_TOKENIZER");const d=rh();o||(o=await cp()),c||(c=await Ap()),u||(u=await ph()),Dp(n);const{getDocumentProperties:f,getDocumentIndexId:m,validateSchema:b,formatElapsedTime:g}=n,_={data:{},caches:{},schema:r,tokenizer:a,index:o,sorter:c,documentsStore:u,internalDocumentIDStore:d,getDocumentProperties:f,getDocumentIndexId:m,validateSchema:b,beforeInsert:[],afterInsert:[],beforeRemove:[],afterRemove:[],beforeUpdate:[],afterUpdate:[],beforeSearch:[],afterSearch:[],beforeInsertMultiple:[],afterInsertMultiple:[],beforeRemoveMultiple:[],afterRemoveMultiple:[],afterUpdateMultiple:[],beforeUpdateMultiple:[],formatElapsedTime:g,id:i,plugins:s};_.data={index:await _.index.create(_,d,r),docs:await _.documentsStore.create(_,d),sorting:await _.sorter.create(_,d,r,e)};for(const h of mh)_[h]=(_[h]??[]).concat(gh(_,h));return _}const Tt=Symbol("orama.insertions"),Pt=Symbol("orama.removals");var Ei;const Ou=((Ei=globalThis.process)===null||Ei===void 0?void 0:Ei.emitWarning)??function(e,t){console.warn(`[WARNING] [${t.code}] ${e}`)};function jp(r){typeof r[Tt]!="number"&&(queueMicrotask(()=>{r[Tt]=void 0}),r[Tt]=0),r[Tt]>1e3?(Ou("Orama's insert operation is synchronous. Please avoid inserting a large number of document in a single operation in order not to block the main thread or, in alternative, please use insertMultiple.",{code:"ORAMA0001"}),r[Tt]=-1):r[Tt]>=0&&r[Tt]++}function Lp(r){typeof r[Pt]!="number"&&(queueMicrotask(()=>{r[Pt]=void 0}),r[Pt]=0),r[Pt]>1e3?(Ou("Orama's remove operation is synchronous. Please avoid removing a large number of document in a single operation in order not to block the main thread, in alternative, please use updateMultiple.",{code:"ORAMA0002"}),r[Pt]=-1):r[Pt]>=0&&r[Pt]++}async function Up(r,e,t,n){const i=await r.validateSchema(e,r.schema);if(i)throw pe("SCHEMA_VALIDATION_FAILURE",i);return Mp(r,e,t,n)}async function Mp(r,e,t,n){const{index:i,docs:s}=r.data,a=await r.getDocumentIndexId(e);if(typeof a!="string")throw pe("DOCUMENT_ID_MUST_BE_STRING",typeof a);if(!await r.documentsStore.store(s,a,e))throw pe("DOCUMENT_ALREADY_EXISTS",a);const o=await r.documentsStore.count(s);n||await Sn(r.beforeInsert,r,a,e);const u=await r.index.getSearchableProperties(i),c=await r.index.getSearchablePropertiesWithTypes(i),d=await r.getDocumentProperties(e,u);for(const[j,S]of Object.entries(d)){if(typeof S>"u")continue;const R=typeof S,M=c[j];if(!(th(M)&&typeof S=="object"&&typeof S.lon=="number"&&typeof S.lat=="number")&&!(ir(M)&&Array.isArray(S))&&!(Hn(M)&&Array.isArray(S))&&!((M==="enum"||M==="enum[]")&&(R==="string"||R==="number"))&&R!==M)throw pe("INVALID_DOCUMENT_PROPERTY",j,M,R)}for(const j of u){var f,m,b,g;const S=d[j];if(typeof S>"u")continue;const R=c[j];await((m=(f=r.index).beforeInsert)===null||m===void 0?void 0:m.call(f,r.data.index,j,a,S,R,t,r.tokenizer,o)),await r.index.insert(r.index,r.data.index,j,a,S,R,t,r.tokenizer,o),await((g=(b=r.index).afterInsert)===null||g===void 0?void 0:g.call(b,r.data.index,j,a,S,R,t,r.tokenizer,o))}const _=await r.sorter.getSortableProperties(r.data.sorting),h=await r.sorter.getSortablePropertiesWithTypes(r.data.sorting),T=await r.getDocumentProperties(e,_);for(const j of _){const S=T[j];if(typeof S>"u")continue;const R=h[j];await r.sorter.insert(r.data.sorting,j,a,S,R,t)}return n||await Sn(r.afterInsert,r,a,e),jp(r),a}async function $p(r,e,t,n,i,s){i||await Cn(r.beforeInsertMultiple,r,e);const a=e.length;for(let o=0;o<a;o++){const u=await r.validateSchema(e[o],r.schema);if(u)throw pe("SCHEMA_VALIDATION_FAILURE",u)}return zp(r,e,t,n,i,s)}async function zp(r,e,t,n,i,s){t||(t=1e3),s=s||0;const a=[];return await new Promise((o,u)=>{let c=0;async function d(){const f=e.slice(c*t,(c+1)*t);if(c++,!f.length)return o();for(const m of f)try{const b=await Up(r,m,n,i);a.push(b)}catch(b){u(b)}setTimeout(d,s)}setTimeout(d,s)}),i||await Cn(r.afterInsertMultiple,r,e),a}async function Bp(r,e,t,n){let i=!0;const{index:s,docs:a}=r.data,o=await r.documentsStore.get(a,e);if(!o)return!1;const u=Mr(r.internalDocumentIDStore,Oe(r.internalDocumentIDStore,e)),c=await r.documentsStore.count(a);n||await Sn(r.beforeRemove,r,u);const d=await r.index.getSearchableProperties(s),f=await r.index.getSearchablePropertiesWithTypes(s),m=await r.getDocumentProperties(o,d);for(const S of d){var b,g,_,h;const R=m[S];if(typeof R>"u")continue;const M=f[S];await((g=(b=r.index).beforeRemove)===null||g===void 0?void 0:g.call(b,r.data.index,S,u,R,M,t,r.tokenizer,c)),await r.index.remove(r.index,r.data.index,S,e,R,M,t,r.tokenizer,c)||(i=!1),await((h=(_=r.index).afterRemove)===null||h===void 0?void 0:h.call(_,r.data.index,S,u,R,M,t,r.tokenizer,c))}const T=await r.sorter.getSortableProperties(r.data.sorting),j=await r.getDocumentProperties(o,T);for(const S of T)typeof j[S]>"u"||await r.sorter.remove(r.data.sorting,S,e);return n||await Sn(r.afterRemove,r,u),await r.documentsStore.remove(r.data.docs,e),Lp(r),i}async function Sa(r,e,t,n,i){let s=0;t||(t=1e3);const a=i?[]:e.map(o=>Mr(r.internalDocumentIDStore,Oe(r.internalDocumentIDStore,o)));return i||await Cn(r.beforeRemoveMultiple,r,a),await new Promise((o,u)=>{let c=0;async function d(){const f=e.slice(c*t,(c+1)*t);if(c++,!f.length)return o();for(const m of f)try{await Bp(r,m,n,i)&&s++}catch(b){u(b)}setTimeout(d,0)}setTimeout(d,0)}),i||await Cn(r.afterRemoveMultiple,r,a),s}function Zp(r="desc",e,t){return r.toLowerCase()==="asc"?e[1]-t[1]:t[1]-e[1]}async function Vp(r,e,t){const n={},i=e.map(([c])=>c),s=await r.documentsStore.getMultiple(r.data.docs,i),a=Object.keys(t),o=await r.index.getSearchablePropertiesWithTypes(r.data.index);for(const c of a){let d={};if(o[c]==="number"){const{ranges:f}=t[c],m=[];for(const b of f)m.push([`${b.from}-${b.to}`,0]);d=Object.fromEntries(m)}n[c]={count:0,values:d}}const u=s.length;for(let c=0;c<u;c++){const d=s[c];for(const f of a){const m=f.includes(".")?await Ss(d,f):d[f],b=o[f];switch(b){case"number":{const g=t[f].ranges;Ca(g,n[f].values,m);break}case"number[]":{const g=new Set,_=t[f].ranges;for(const h of m)Ca(_,n[f].values,h,g);break}case"boolean":case"enum":case"string":{ka(n[f].values,m,b);break}case"boolean[]":case"enum[]":case"string[]":{const g=new Set,_=b==="boolean[]"?"boolean":"string";for(const h of m)ka(n[f].values,h,_,g);break}default:throw pe("FACET_NOT_SUPPORTED",b)}}}for(const c of a)if(n[c].count=Object.keys(n[c].values).length,o[c]==="string"){const d=t;n[c].values=Object.fromEntries(Object.entries(n[c].values).sort((f,m)=>Zp(d.sort,f,m)).slice(d.offset??0,d.limit??10))}return n}function Ca(r,e,t,n){for(const i of r){const s=`${i.from}-${i.to}`;n&&n.has(s)||t>=i.from&&t<=i.to&&(e[s]===void 0?e[s]=1:(e[s]++,n&&n.add(s)))}}function ka(r,e,t,n){const i=(e==null?void 0:e.toString())??(t==="boolean"?"false":"");n&&n.has(i)||(r[i]=(r[i]??0)+1,n&&n.add(i))}function Fp(r,e){const t=new Map,n=[];for(const i of r)t.set(i,!0);for(const[i,s]of e)t.has(i)&&(n.push([i,s]),t.delete(i));return n}const Kp={reducer:(r,e,t,n)=>(e[n]=t,e),getInitialValue:r=>Array.from({length:r})},Na=["string","number","boolean"];async function qp(r,e,t){const n=t.properties,i=n.length,s=await r.index.getSearchablePropertiesWithTypes(r.data.index);for(let T=0;T<i;T++){const j=n[T];if(typeof s[j]>"u")throw pe("UNKNOWN_GROUP_BY_PROPERTY",j);if(!Na.includes(s[j]))throw pe("INVALID_GROUP_BY_PROPERTY",j,Na.join(", "),s[j])}const a=e.map(([T])=>Mr(r.internalDocumentIDStore,T)),o=await r.documentsStore.getMultiple(r.data.docs,a),u=o.length,c=t.maxResult||Number.MAX_SAFE_INTEGER,d=[],f={};for(let T=0;T<i;T++){const j=n[T],S={property:j,perValue:{}},R=new Set;for(let M=0;M<u;M++){const O=o[M],C=await Ss(O,j);if(typeof C>"u")continue;const v=typeof C!="boolean"?C:""+C;typeof S.perValue[v]>"u"&&(S.perValue[v]={indexes:[],count:0}),!(S.perValue[v].count>=c)&&(S.perValue[v].indexes.push(M),S.perValue[v].count++,R.add(C))}d.push(Array.from(R)),f[j]=S}const m=xu(d),b=m.length,g=[];for(let T=0;T<b;T++){const j=m[T],S=j.length,R={values:[],indexes:[]},M=[];for(let O=0;O<S;O++){const C=j[O],v=n[O];M.push(f[v].perValue[typeof C!="boolean"?C:""+C].indexes),R.values.push(C)}R.indexes=xs(M).sort((O,C)=>O-C),R.indexes.length!==0&&g.push(R)}const _=g.length,h=Array.from({length:_});for(let T=0;T<_;T++){const j=g[T],S=t.reduce||Kp,R=j.indexes.map(v=>({id:a[v],score:e[v][1],document:o[v]})),M=S.reducer.bind(null,j.values),O=S.getInitialValue(j.indexes.length),C=R.reduce(M,O);h[T]={values:j.values,result:C}}return h}function xu(r,e=0){if(e+1===r.length)return r[e].map(s=>[s]);const t=r[e],n=xu(r,e+1),i=[];for(const s of t)for(const a of n){const o=[s];xe(o,a),i.push(o)}return i}const Hp={k:1.2,b:.75,d:.5};async function Wp(r,e,t,n,i,s,a,o,u){const c={},d={};for(const f of s){const m={};for(const b of a)m[b]=[];c[f]=m,d[f]=[]}return{timeStart:u,tokenizer:r,index:e,documentsStore:t,language:n,params:i,docsCount:o,uniqueDocsIDs:{},indexMap:c,docsIntersection:d}}async function Gp(r,e,t){const n=await xn();e.relevance=Object.assign(e.relevance??{},Hp);const i=e.facets&&Object.keys(e.facets).length>0,{limit:s=10,offset:a=0,term:o,properties:u,threshold:c=1,distinctOn:d}=e,f=e.preflight===!0,{index:m,docs:b}=r.data,g=await r.tokenizer.tokenize(o??"",t);let _=r.caches.propertiesToSearch;if(!_){const v=await r.index.getSearchablePropertiesWithTypes(m);_=await r.index.getSearchableProperties(m),_=_.filter(A=>v[A].startsWith("string")),r.caches.propertiesToSearch=_}if(u&&u!=="*"){for(const v of u)if(!_.includes(v))throw pe("UNKNOWN_INDEX",v,_.join(", "));_=_.filter(v=>u.includes(v))}const h=await Wp(r.tokenizer,r.index,r.documentsStore,t,e,_,g,await r.documentsStore.count(b),n),T=Object.keys(e.where??{}).length>0;let j=[];T&&(j=await r.index.searchByWhereClause(h,m,e.where));const S=g.length;if(S||u&&u.length>0){const v=_.length;for(let A=0;A<v;A++){var R;const I=_[A];if(S!==0)for(let K=0;K<S;K++){const V=g[K],B=await r.index.search(h,m,I,V);xe(h.indexMap[I][V],B)}else{h.indexMap[I][""]=[];const K=await r.index.search(h,m,I,"");xe(h.indexMap[I][""],K)}const N=h.indexMap[I],L=Object.values(N);h.docsIntersection[I]=Fh(L,(e==null||(R=e.boost)===null||R===void 0?void 0:R[I])??1,c,S);const q=h.docsIntersection[I],Y=q.length;for(let K=0;K<Y;K++){const[V,B]=q[K],G=h.uniqueDocsIDs[V];G?h.uniqueDocsIDs[V]=G+B+.5:h.uniqueDocsIDs[V]=B}}}else g.length===0&&o?h.uniqueDocsIDs={}:h.uniqueDocsIDs=Object.fromEntries(Object.keys(await r.documentsStore.getAll(r.data.docs)).map(v=>[v,0]));let M=Object.entries(h.uniqueDocsIDs).map(([v,A])=>[+v,A]);if(T&&(M=Fp(j,M)),e.sortBy)if(typeof e.sortBy=="function"){const v=M.map(([N])=>N),I=(await r.documentsStore.getMultiple(r.data.docs,v)).map((N,L)=>[M[L][0],M[L][1],N]);I.sort(e.sortBy),M=I.map(([N,L])=>[N,L])}else M=await r.sorter.sortBy(r.data.sorting,M,e.sortBy).then(v=>v.map(([A,I])=>[Oe(r.internalDocumentIDStore,A),I]));else M=M.sort(qf);let O;!f&&d?O=await Yp(r,M,a,s,d):f||(O=await Jp(r,M,a,s));const C={elapsed:{formatted:"",raw:0},hits:[],count:M.length};if(typeof O<"u"&&(C.hits=O.filter(Boolean)),i){const v=await Vp(r,M,e.facets);C.facets=v}return e.groupBy&&(C.groups=await qp(r,M,e.groupBy)),r.beforeSearch&&await vh(r.beforeSearch,r,e,t),r.afterSearch&&await bh(r.afterSearch,r,e,t,C),C.elapsed=await r.formatElapsedTime(await xn()-h.timeStart),C}async function Yp(r,e,t,n,i){const s=r.data.docs,a=new Map,o=[],u=new Set,c=e.length;let d=0;for(let f=0;f<c;f++){const m=e[f];if(typeof m>"u")continue;const[b,g]=m;if(u.has(b))continue;const _=await r.documentsStore.get(s,b),h=await Ss(_,i);if(!(typeof h>"u"||a.has(h))&&(a.set(h,!0),d++,!(d<=t)&&(o.push({id:Mr(r.internalDocumentIDStore,b),score:g,document:_}),u.add(b),d>=t+n)))break}return o}async function Jp(r,e,t,n){const i=r.data.docs,s=Array.from({length:n}),a=new Set;for(let o=t;o<n+t;o++){const u=e[o];if(typeof u>"u")break;const[c,d]=u;if(!a.has(c)){const f=await r.documentsStore.get(i,c);s[o]={id:Mr(r.internalDocumentIDStore,c),score:d,document:f},a.add(c)}}return s}async function Xp(r,e){const t=await xn();let{vector:n}=e;const{property:i,limit:s=10,offset:a=0,includeVectors:o=!1}=e,u=r.data.index.vectorIndexes[i],c=u.size,d=u.vectors;if(n.length!==c)throw pe("INVALID_INPUT_VECTOR",i,c,n.length);n instanceof Float32Array||(n=new Float32Array(n));const f=qh(n,d,c,e.similarity),m=Array.from({length:s});for(let _=0;_<s;_++){const h=f[_+a];if(!h)break;const T=Oe(r.internalDocumentIDStore,h.id),j=r.data.docs.docs[T];if(j){o||(j[i]=null);const S={id:h.id,score:h.score,document:j};m[_]=S}}const g=await xn()-t;return{count:f.length,hits:m.filter(Boolean),elapsed:{raw:Number(g),formatted:await au(g)}}}async function Qp(r,e){r.internalDocumentIDStore.load(r,e.internalDocumentIDStore),r.data.index=await r.index.load(r.internalDocumentIDStore,e.index),r.data.docs=await r.documentsStore.load(r.internalDocumentIDStore,e.docs),r.data.sorting=await r.sorter.load(r.internalDocumentIDStore,e.sorting),r.tokenizer.language=e.language}async function em(r){return{internalDocumentIDStore:r.internalDocumentIDStore.save(r.internalDocumentIDStore),index:await r.index.save(r.data.index),docs:await r.documentsStore.save(r.data.docs),sorting:await r.sorter.save(r.data.sorting),language:r.tokenizer.language}}var kt=4294967295;function tm(r,e,t){var n=t/4294967296,i=t;r.setUint32(e,n),r.setUint32(e+4,i)}function Su(r,e,t){var n=Math.floor(t/4294967296),i=t;r.setUint32(e,n),r.setUint32(e+4,i)}function Cu(r,e){var t=r.getInt32(e),n=r.getUint32(e+4);return t*4294967296+n}function rm(r,e){var t=r.getUint32(e),n=r.getUint32(e+4);return t*4294967296+n}var Ti,Pi,Oi,Wn=(typeof process>"u"||((Ti=process==null?void 0:process.env)===null||Ti===void 0?void 0:Ti.TEXT_ENCODING)!=="never")&&typeof TextEncoder<"u"&&typeof TextDecoder<"u";function Ra(r){for(var e=r.length,t=0,n=0;n<e;){var i=r.charCodeAt(n++);if(i&4294967168)if(!(i&4294965248))t+=2;else{if(i>=55296&&i<=56319&&n<e){var s=r.charCodeAt(n);(s&64512)===56320&&(++n,i=((i&1023)<<10)+(s&1023)+65536)}i&4294901760?t+=4:t+=3}else{t++;continue}}return t}function nm(r,e,t){for(var n=r.length,i=t,s=0;s<n;){var a=r.charCodeAt(s++);if(a&4294967168)if(!(a&4294965248))e[i++]=a>>6&31|192;else{if(a>=55296&&a<=56319&&s<n){var o=r.charCodeAt(s);(o&64512)===56320&&(++s,a=((a&1023)<<10)+(o&1023)+65536)}a&4294901760?(e[i++]=a>>18&7|240,e[i++]=a>>12&63|128,e[i++]=a>>6&63|128):(e[i++]=a>>12&15|224,e[i++]=a>>6&63|128)}else{e[i++]=a;continue}e[i++]=a&63|128}}var Or=Wn?new TextEncoder:void 0,im=Wn?typeof process<"u"&&((Pi=process==null?void 0:process.env)===null||Pi===void 0?void 0:Pi.TEXT_ENCODING)!=="force"?200:0:kt;function sm(r,e,t){e.set(Or.encode(r),t)}function am(r,e,t){Or.encodeInto(r,e.subarray(t))}var om=Or!=null&&Or.encodeInto?am:sm,um=4096;function ku(r,e,t){for(var n=e,i=n+t,s=[],a="";n<i;){var o=r[n++];if(!(o&128))s.push(o);else if((o&224)===192){var u=r[n++]&63;s.push((o&31)<<6|u)}else if((o&240)===224){var u=r[n++]&63,c=r[n++]&63;s.push((o&31)<<12|u<<6|c)}else if((o&248)===240){var u=r[n++]&63,c=r[n++]&63,d=r[n++]&63,f=(o&7)<<18|u<<12|c<<6|d;f>65535&&(f-=65536,s.push(f>>>10&1023|55296),f=56320|f&1023),s.push(f)}else s.push(o);s.length>=um&&(a+=String.fromCharCode.apply(String,s),s.length=0)}return s.length>0&&(a+=String.fromCharCode.apply(String,s)),a}var cm=Wn?new TextDecoder:null,lm=Wn?typeof process<"u"&&((Oi=process==null?void 0:process.env)===null||Oi===void 0?void 0:Oi.TEXT_DECODER)!=="force"?200:0:kt;function dm(r,e,t){var n=r.subarray(e,e+t);return cm.decode(n)}var Yr=function(){function r(e,t){this.type=e,this.data=t}return r}(),fm=globalThis&&globalThis.__extends||function(){var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(n[s]=i[s])},r(e,t)};return function(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");r(e,t);function n(){this.constructor=e}e.prototype=t===null?Object.create(t):(n.prototype=t.prototype,new n)}}(),at=function(r){fm(e,r);function e(t){var n=r.call(this,t)||this,i=Object.create(e.prototype);return Object.setPrototypeOf(n,i),Object.defineProperty(n,"name",{configurable:!0,enumerable:!1,value:e.name}),n}return e}(Error),hm=-1,pm=4294967296-1,mm=17179869184-1;function gm(r){var e=r.sec,t=r.nsec;if(e>=0&&t>=0&&e<=mm)if(t===0&&e<=pm){var n=new Uint8Array(4),i=new DataView(n.buffer);return i.setUint32(0,e),n}else{var s=e/4294967296,a=e&4294967295,n=new Uint8Array(8),i=new DataView(n.buffer);return i.setUint32(0,t<<2|s&3),i.setUint32(4,a),n}else{var n=new Uint8Array(12),i=new DataView(n.buffer);return i.setUint32(0,t),Su(i,4,e),n}}function ym(r){var e=r.getTime(),t=Math.floor(e/1e3),n=(e-t*1e3)*1e6,i=Math.floor(n/1e9);return{sec:t+i,nsec:n-i*1e9}}function bm(r){if(r instanceof Date){var e=ym(r);return gm(e)}else return null}function vm(r){var e=new DataView(r.buffer,r.byteOffset,r.byteLength);switch(r.byteLength){case 4:{var t=e.getUint32(0),n=0;return{sec:t,nsec:n}}case 8:{var i=e.getUint32(0),s=e.getUint32(4),t=(i&3)*4294967296+s,n=i>>>2;return{sec:t,nsec:n}}case 12:{var t=Cu(e,4),n=e.getUint32(0);return{sec:t,nsec:n}}default:throw new at("Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(r.length))}}function wm(r){var e=vm(r);return new Date(e.sec*1e3+e.nsec/1e6)}var _m={type:hm,encode:bm,decode:wm},Nu=function(){function r(){this.builtInEncoders=[],this.builtInDecoders=[],this.encoders=[],this.decoders=[],this.register(_m)}return r.prototype.register=function(e){var t=e.type,n=e.encode,i=e.decode;if(t>=0)this.encoders[t]=n,this.decoders[t]=i;else{var s=1+t;this.builtInEncoders[s]=n,this.builtInDecoders[s]=i}},r.prototype.tryToEncode=function(e,t){for(var n=0;n<this.builtInEncoders.length;n++){var i=this.builtInEncoders[n];if(i!=null){var s=i(e,t);if(s!=null){var a=-1-n;return new Yr(a,s)}}}for(var n=0;n<this.encoders.length;n++){var i=this.encoders[n];if(i!=null){var s=i(e,t);if(s!=null){var a=n;return new Yr(a,s)}}}return e instanceof Yr?e:null},r.prototype.decode=function(e,t,n){var i=t<0?this.builtInDecoders[-1-t]:this.decoders[t];return i?i(e,t,n):new Yr(t,e)},r.defaultCodec=new r,r}();function Nn(r){return r instanceof Uint8Array?r:ArrayBuffer.isView(r)?new Uint8Array(r.buffer,r.byteOffset,r.byteLength):r instanceof ArrayBuffer?new Uint8Array(r):Uint8Array.from(r)}function Im(r){if(r instanceof ArrayBuffer)return new DataView(r);var e=Nn(r);return new DataView(e.buffer,e.byteOffset,e.byteLength)}var Am=100,Em=2048,Tm=function(){function r(e,t,n,i,s,a,o,u){e===void 0&&(e=Nu.defaultCodec),t===void 0&&(t=void 0),n===void 0&&(n=Am),i===void 0&&(i=Em),s===void 0&&(s=!1),a===void 0&&(a=!1),o===void 0&&(o=!1),u===void 0&&(u=!1),this.extensionCodec=e,this.context=t,this.maxDepth=n,this.initialBufferSize=i,this.sortKeys=s,this.forceFloat32=a,this.ignoreUndefined=o,this.forceIntegerToFloat=u,this.pos=0,this.view=new DataView(new ArrayBuffer(this.initialBufferSize)),this.bytes=new Uint8Array(this.view.buffer)}return r.prototype.reinitializeState=function(){this.pos=0},r.prototype.encodeSharedRef=function(e){return this.reinitializeState(),this.doEncode(e,1),this.bytes.subarray(0,this.pos)},r.prototype.encode=function(e){return this.reinitializeState(),this.doEncode(e,1),this.bytes.slice(0,this.pos)},r.prototype.doEncode=function(e,t){if(t>this.maxDepth)throw new Error("Too deep objects in depth ".concat(t));e==null?this.encodeNil():typeof e=="boolean"?this.encodeBoolean(e):typeof e=="number"?this.encodeNumber(e):typeof e=="string"?this.encodeString(e):this.encodeObject(e,t)},r.prototype.ensureBufferSizeToWrite=function(e){var t=this.pos+e;this.view.byteLength<t&&this.resizeBuffer(t*2)},r.prototype.resizeBuffer=function(e){var t=new ArrayBuffer(e),n=new Uint8Array(t),i=new DataView(t);n.set(this.bytes),this.view=i,this.bytes=n},r.prototype.encodeNil=function(){this.writeU8(192)},r.prototype.encodeBoolean=function(e){e===!1?this.writeU8(194):this.writeU8(195)},r.prototype.encodeNumber=function(e){Number.isSafeInteger(e)&&!this.forceIntegerToFloat?e>=0?e<128?this.writeU8(e):e<256?(this.writeU8(204),this.writeU8(e)):e<65536?(this.writeU8(205),this.writeU16(e)):e<4294967296?(this.writeU8(206),this.writeU32(e)):(this.writeU8(207),this.writeU64(e)):e>=-32?this.writeU8(224|e+32):e>=-128?(this.writeU8(208),this.writeI8(e)):e>=-32768?(this.writeU8(209),this.writeI16(e)):e>=-2147483648?(this.writeU8(210),this.writeI32(e)):(this.writeU8(211),this.writeI64(e)):this.forceFloat32?(this.writeU8(202),this.writeF32(e)):(this.writeU8(203),this.writeF64(e))},r.prototype.writeStringHeader=function(e){if(e<32)this.writeU8(160+e);else if(e<256)this.writeU8(217),this.writeU8(e);else if(e<65536)this.writeU8(218),this.writeU16(e);else if(e<4294967296)this.writeU8(219),this.writeU32(e);else throw new Error("Too long string: ".concat(e," bytes in UTF-8"))},r.prototype.encodeString=function(e){var t=5,n=e.length;if(n>im){var i=Ra(e);this.ensureBufferSizeToWrite(t+i),this.writeStringHeader(i),om(e,this.bytes,this.pos),this.pos+=i}else{var i=Ra(e);this.ensureBufferSizeToWrite(t+i),this.writeStringHeader(i),nm(e,this.bytes,this.pos),this.pos+=i}},r.prototype.encodeObject=function(e,t){var n=this.extensionCodec.tryToEncode(e,this.context);if(n!=null)this.encodeExtension(n);else if(Array.isArray(e))this.encodeArray(e,t);else if(ArrayBuffer.isView(e))this.encodeBinary(e);else if(typeof e=="object")this.encodeMap(e,t);else throw new Error("Unrecognized object: ".concat(Object.prototype.toString.apply(e)))},r.prototype.encodeBinary=function(e){var t=e.byteLength;if(t<256)this.writeU8(196),this.writeU8(t);else if(t<65536)this.writeU8(197),this.writeU16(t);else if(t<4294967296)this.writeU8(198),this.writeU32(t);else throw new Error("Too large binary: ".concat(t));var n=Nn(e);this.writeU8a(n)},r.prototype.encodeArray=function(e,t){var n=e.length;if(n<16)this.writeU8(144+n);else if(n<65536)this.writeU8(220),this.writeU16(n);else if(n<4294967296)this.writeU8(221),this.writeU32(n);else throw new Error("Too large array: ".concat(n));for(var i=0,s=e;i<s.length;i++){var a=s[i];this.doEncode(a,t+1)}},r.prototype.countWithoutUndefined=function(e,t){for(var n=0,i=0,s=t;i<s.length;i++){var a=s[i];e[a]!==void 0&&n++}return n},r.prototype.encodeMap=function(e,t){var n=Object.keys(e);this.sortKeys&&n.sort();var i=this.ignoreUndefined?this.countWithoutUndefined(e,n):n.length;if(i<16)this.writeU8(128+i);else if(i<65536)this.writeU8(222),this.writeU16(i);else if(i<4294967296)this.writeU8(223),this.writeU32(i);else throw new Error("Too large map object: ".concat(i));for(var s=0,a=n;s<a.length;s++){var o=a[s],u=e[o];this.ignoreUndefined&&u===void 0||(this.encodeString(o),this.doEncode(u,t+1))}},r.prototype.encodeExtension=function(e){var t=e.data.length;if(t===1)this.writeU8(212);else if(t===2)this.writeU8(213);else if(t===4)this.writeU8(214);else if(t===8)this.writeU8(215);else if(t===16)this.writeU8(216);else if(t<256)this.writeU8(199),this.writeU8(t);else if(t<65536)this.writeU8(200),this.writeU16(t);else if(t<4294967296)this.writeU8(201),this.writeU32(t);else throw new Error("Too large extension object: ".concat(t));this.writeI8(e.type),this.writeU8a(e.data)},r.prototype.writeU8=function(e){this.ensureBufferSizeToWrite(1),this.view.setUint8(this.pos,e),this.pos++},r.prototype.writeU8a=function(e){var t=e.length;this.ensureBufferSizeToWrite(t),this.bytes.set(e,this.pos),this.pos+=t},r.prototype.writeI8=function(e){this.ensureBufferSizeToWrite(1),this.view.setInt8(this.pos,e),this.pos++},r.prototype.writeU16=function(e){this.ensureBufferSizeToWrite(2),this.view.setUint16(this.pos,e),this.pos+=2},r.prototype.writeI16=function(e){this.ensureBufferSizeToWrite(2),this.view.setInt16(this.pos,e),this.pos+=2},r.prototype.writeU32=function(e){this.ensureBufferSizeToWrite(4),this.view.setUint32(this.pos,e),this.pos+=4},r.prototype.writeI32=function(e){this.ensureBufferSizeToWrite(4),this.view.setInt32(this.pos,e),this.pos+=4},r.prototype.writeF32=function(e){this.ensureBufferSizeToWrite(4),this.view.setFloat32(this.pos,e),this.pos+=4},r.prototype.writeF64=function(e){this.ensureBufferSizeToWrite(8),this.view.setFloat64(this.pos,e),this.pos+=8},r.prototype.writeU64=function(e){this.ensureBufferSizeToWrite(8),tm(this.view,this.pos,e),this.pos+=8},r.prototype.writeI64=function(e){this.ensureBufferSizeToWrite(8),Su(this.view,this.pos,e),this.pos+=8},r}(),Pm={};function Om(r,e){e===void 0&&(e=Pm);var t=new Tm(e.extensionCodec,e.context,e.maxDepth,e.initialBufferSize,e.sortKeys,e.forceFloat32,e.ignoreUndefined,e.forceIntegerToFloat);return t.encodeSharedRef(r)}function xi(r){return"".concat(r<0?"-":"","0x").concat(Math.abs(r).toString(16).padStart(2,"0"))}var xm=16,Sm=16,Cm=function(){function r(e,t){e===void 0&&(e=xm),t===void 0&&(t=Sm),this.maxKeyLength=e,this.maxLengthPerKey=t,this.hit=0,this.miss=0,this.caches=[];for(var n=0;n<this.maxKeyLength;n++)this.caches.push([])}return r.prototype.canBeCached=function(e){return e>0&&e<=this.maxKeyLength},r.prototype.find=function(e,t,n){var i=this.caches[n-1];e:for(var s=0,a=i;s<a.length;s++){for(var o=a[s],u=o.bytes,c=0;c<n;c++)if(u[c]!==e[t+c])continue e;return o.str}return null},r.prototype.store=function(e,t){var n=this.caches[e.length-1],i={bytes:e,str:t};n.length>=this.maxLengthPerKey?n[Math.random()*n.length|0]=i:n.push(i)},r.prototype.decode=function(e,t,n){var i=this.find(e,t,n);if(i!=null)return this.hit++,i;this.miss++;var s=ku(e,t,n),a=Uint8Array.prototype.slice.call(e,t,t+n);return this.store(a,s),s},r}(),km=globalThis&&globalThis.__awaiter||function(r,e,t,n){function i(s){return s instanceof t?s:new t(function(a){a(s)})}return new(t||(t=Promise))(function(s,a){function o(d){try{c(n.next(d))}catch(f){a(f)}}function u(d){try{c(n.throw(d))}catch(f){a(f)}}function c(d){d.done?s(d.value):i(d.value).then(o,u)}c((n=n.apply(r,e||[])).next())})},Si=globalThis&&globalThis.__generator||function(r,e){var t={label:0,sent:function(){if(s[0]&1)throw s[1];return s[1]},trys:[],ops:[]},n,i,s,a;return a={next:o(0),throw:o(1),return:o(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function o(c){return function(d){return u([c,d])}}function u(c){if(n)throw new TypeError("Generator is already executing.");for(;t;)try{if(n=1,i&&(s=c[0]&2?i.return:c[0]?i.throw||((s=i.return)&&s.call(i),0):i.next)&&!(s=s.call(i,c[1])).done)return s;switch(i=0,s&&(c=[c[0]&2,s.value]),c[0]){case 0:case 1:s=c;break;case 4:return t.label++,{value:c[1],done:!1};case 5:t.label++,i=c[1],c=[0];continue;case 7:c=t.ops.pop(),t.trys.pop();continue;default:if(s=t.trys,!(s=s.length>0&&s[s.length-1])&&(c[0]===6||c[0]===2)){t=0;continue}if(c[0]===3&&(!s||c[1]>s[0]&&c[1]<s[3])){t.label=c[1];break}if(c[0]===6&&t.label<s[1]){t.label=s[1],s=c;break}if(s&&t.label<s[2]){t.label=s[2],t.ops.push(c);break}s[2]&&t.ops.pop(),t.trys.pop();continue}c=e.call(r,t)}catch(d){c=[6,d],i=0}finally{n=s=0}if(c[0]&5)throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}},Da=globalThis&&globalThis.__asyncValues||function(r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=r[Symbol.asyncIterator],t;return e?e.call(r):(r=typeof __values=="function"?__values(r):r[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(s){t[s]=r[s]&&function(a){return new Promise(function(o,u){a=r[s](a),i(o,u,a.done,a.value)})}}function i(s,a,o,u){Promise.resolve(u).then(function(c){s({value:c,done:o})},a)}},Qt=globalThis&&globalThis.__await||function(r){return this instanceof Qt?(this.v=r,this):new Qt(r)},Nm=globalThis&&globalThis.__asyncGenerator||function(r,e,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n=t.apply(r,e||[]),i,s=[];return i={},a("next"),a("throw"),a("return"),i[Symbol.asyncIterator]=function(){return this},i;function a(m){n[m]&&(i[m]=function(b){return new Promise(function(g,_){s.push([m,b,g,_])>1||o(m,b)})})}function o(m,b){try{u(n[m](b))}catch(g){f(s[0][3],g)}}function u(m){m.value instanceof Qt?Promise.resolve(m.value.v).then(c,d):f(s[0][2],m)}function c(m){o("next",m)}function d(m){o("throw",m)}function f(m,b){m(b),s.shift(),s.length&&o(s[0][0],s[0][1])}},Rm=function(r){var e=typeof r;return e==="string"||e==="number"},ar=-1,ks=new DataView(new ArrayBuffer(0)),Dm=new Uint8Array(ks.buffer),Gi=function(){try{ks.getInt8(0)}catch(r){return r.constructor}throw new Error("never reached")}(),ja=new Gi("Insufficient data"),jm=new Cm,Lm=function(){function r(e,t,n,i,s,a,o,u){e===void 0&&(e=Nu.defaultCodec),t===void 0&&(t=void 0),n===void 0&&(n=kt),i===void 0&&(i=kt),s===void 0&&(s=kt),a===void 0&&(a=kt),o===void 0&&(o=kt),u===void 0&&(u=jm),this.extensionCodec=e,this.context=t,this.maxStrLength=n,this.maxBinLength=i,this.maxArrayLength=s,this.maxMapLength=a,this.maxExtLength=o,this.keyDecoder=u,this.totalPos=0,this.pos=0,this.view=ks,this.bytes=Dm,this.headByte=ar,this.stack=[]}return r.prototype.reinitializeState=function(){this.totalPos=0,this.headByte=ar,this.stack.length=0},r.prototype.setBuffer=function(e){this.bytes=Nn(e),this.view=Im(this.bytes),this.pos=0},r.prototype.appendBuffer=function(e){if(this.headByte===ar&&!this.hasRemaining(1))this.setBuffer(e);else{var t=this.bytes.subarray(this.pos),n=Nn(e),i=new Uint8Array(t.length+n.length);i.set(t),i.set(n,t.length),this.setBuffer(i)}},r.prototype.hasRemaining=function(e){return this.view.byteLength-this.pos>=e},r.prototype.createExtraByteError=function(e){var t=this,n=t.view,i=t.pos;return new RangeError("Extra ".concat(n.byteLength-i," of ").concat(n.byteLength," byte(s) found at buffer[").concat(e,"]"))},r.prototype.decode=function(e){this.reinitializeState(),this.setBuffer(e);var t=this.doDecodeSync();if(this.hasRemaining(1))throw this.createExtraByteError(this.pos);return t},r.prototype.decodeMulti=function(e){return Si(this,function(t){switch(t.label){case 0:this.reinitializeState(),this.setBuffer(e),t.label=1;case 1:return this.hasRemaining(1)?[4,this.doDecodeSync()]:[3,3];case 2:return t.sent(),[3,1];case 3:return[2]}})},r.prototype.decodeAsync=function(e){var t,n,i,s;return km(this,void 0,void 0,function(){var a,o,u,c,d,f,m,b;return Si(this,function(g){switch(g.label){case 0:a=!1,g.label=1;case 1:g.trys.push([1,6,7,12]),t=Da(e),g.label=2;case 2:return[4,t.next()];case 3:if(n=g.sent(),!!n.done)return[3,5];if(u=n.value,a)throw this.createExtraByteError(this.totalPos);this.appendBuffer(u);try{o=this.doDecodeSync(),a=!0}catch(_){if(!(_ instanceof Gi))throw _}this.totalPos+=this.pos,g.label=4;case 4:return[3,2];case 5:return[3,12];case 6:return c=g.sent(),i={error:c},[3,12];case 7:return g.trys.push([7,,10,11]),n&&!n.done&&(s=t.return)?[4,s.call(t)]:[3,9];case 8:g.sent(),g.label=9;case 9:return[3,11];case 10:if(i)throw i.error;return[7];case 11:return[7];case 12:if(a){if(this.hasRemaining(1))throw this.createExtraByteError(this.totalPos);return[2,o]}throw d=this,f=d.headByte,m=d.pos,b=d.totalPos,new RangeError("Insufficient data in parsing ".concat(xi(f)," at ").concat(b," (").concat(m," in the current buffer)"))}})})},r.prototype.decodeArrayStream=function(e){return this.decodeMultiAsync(e,!0)},r.prototype.decodeStream=function(e){return this.decodeMultiAsync(e,!1)},r.prototype.decodeMultiAsync=function(e,t){return Nm(this,arguments,function(){var i,s,a,o,u,c,d,f,m;return Si(this,function(b){switch(b.label){case 0:i=t,s=-1,b.label=1;case 1:b.trys.push([1,13,14,19]),a=Da(e),b.label=2;case 2:return[4,Qt(a.next())];case 3:if(o=b.sent(),!!o.done)return[3,12];if(u=o.value,t&&s===0)throw this.createExtraByteError(this.totalPos);this.appendBuffer(u),i&&(s=this.readArraySize(),i=!1,this.complete()),b.label=4;case 4:b.trys.push([4,9,,10]),b.label=5;case 5:return[4,Qt(this.doDecodeSync())];case 6:return[4,b.sent()];case 7:return b.sent(),--s===0?[3,8]:[3,5];case 8:return[3,10];case 9:if(c=b.sent(),!(c instanceof Gi))throw c;return[3,10];case 10:this.totalPos+=this.pos,b.label=11;case 11:return[3,2];case 12:return[3,19];case 13:return d=b.sent(),f={error:d},[3,19];case 14:return b.trys.push([14,,17,18]),o&&!o.done&&(m=a.return)?[4,Qt(m.call(a))]:[3,16];case 15:b.sent(),b.label=16;case 16:return[3,18];case 17:if(f)throw f.error;return[7];case 18:return[7];case 19:return[2]}})})},r.prototype.doDecodeSync=function(){e:for(;;){var e=this.readHeadByte(),t=void 0;if(e>=224)t=e-256;else if(e<192)if(e<128)t=e;else if(e<144){var n=e-128;if(n!==0){this.pushMapState(n),this.complete();continue e}else t={}}else if(e<160){var n=e-144;if(n!==0){this.pushArrayState(n),this.complete();continue e}else t=[]}else{var i=e-160;t=this.decodeUtf8String(i,0)}else if(e===192)t=null;else if(e===194)t=!1;else if(e===195)t=!0;else if(e===202)t=this.readF32();else if(e===203)t=this.readF64();else if(e===204)t=this.readU8();else if(e===205)t=this.readU16();else if(e===206)t=this.readU32();else if(e===207)t=this.readU64();else if(e===208)t=this.readI8();else if(e===209)t=this.readI16();else if(e===210)t=this.readI32();else if(e===211)t=this.readI64();else if(e===217){var i=this.lookU8();t=this.decodeUtf8String(i,1)}else if(e===218){var i=this.lookU16();t=this.decodeUtf8String(i,2)}else if(e===219){var i=this.lookU32();t=this.decodeUtf8String(i,4)}else if(e===220){var n=this.readU16();if(n!==0){this.pushArrayState(n),this.complete();continue e}else t=[]}else if(e===221){var n=this.readU32();if(n!==0){this.pushArrayState(n),this.complete();continue e}else t=[]}else if(e===222){var n=this.readU16();if(n!==0){this.pushMapState(n),this.complete();continue e}else t={}}else if(e===223){var n=this.readU32();if(n!==0){this.pushMapState(n),this.complete();continue e}else t={}}else if(e===196){var n=this.lookU8();t=this.decodeBinary(n,1)}else if(e===197){var n=this.lookU16();t=this.decodeBinary(n,2)}else if(e===198){var n=this.lookU32();t=this.decodeBinary(n,4)}else if(e===212)t=this.decodeExtension(1,0);else if(e===213)t=this.decodeExtension(2,0);else if(e===214)t=this.decodeExtension(4,0);else if(e===215)t=this.decodeExtension(8,0);else if(e===216)t=this.decodeExtension(16,0);else if(e===199){var n=this.lookU8();t=this.decodeExtension(n,1)}else if(e===200){var n=this.lookU16();t=this.decodeExtension(n,2)}else if(e===201){var n=this.lookU32();t=this.decodeExtension(n,4)}else throw new at("Unrecognized type byte: ".concat(xi(e)));this.complete();for(var s=this.stack;s.length>0;){var a=s[s.length-1];if(a.type===0)if(a.array[a.position]=t,a.position++,a.position===a.size)s.pop(),t=a.array;else continue e;else if(a.type===1){if(!Rm(t))throw new at("The type of key must be string or number but "+typeof t);if(t==="__proto__")throw new at("The key __proto__ is not allowed");a.key=t,a.type=2;continue e}else if(a.map[a.key]=t,a.readCount++,a.readCount===a.size)s.pop(),t=a.map;else{a.key=null,a.type=1;continue e}}return t}},r.prototype.readHeadByte=function(){return this.headByte===ar&&(this.headByte=this.readU8()),this.headByte},r.prototype.complete=function(){this.headByte=ar},r.prototype.readArraySize=function(){var e=this.readHeadByte();switch(e){case 220:return this.readU16();case 221:return this.readU32();default:{if(e<160)return e-144;throw new at("Unrecognized array type byte: ".concat(xi(e)))}}},r.prototype.pushMapState=function(e){if(e>this.maxMapLength)throw new at("Max length exceeded: map length (".concat(e,") > maxMapLengthLength (").concat(this.maxMapLength,")"));this.stack.push({type:1,size:e,key:null,readCount:0,map:{}})},r.prototype.pushArrayState=function(e){if(e>this.maxArrayLength)throw new at("Max length exceeded: array length (".concat(e,") > maxArrayLength (").concat(this.maxArrayLength,")"));this.stack.push({type:0,size:e,array:new Array(e),position:0})},r.prototype.decodeUtf8String=function(e,t){var n;if(e>this.maxStrLength)throw new at("Max length exceeded: UTF-8 byte length (".concat(e,") > maxStrLength (").concat(this.maxStrLength,")"));if(this.bytes.byteLength<this.pos+t+e)throw ja;var i=this.pos+t,s;return this.stateIsMapKey()&&(!((n=this.keyDecoder)===null||n===void 0)&&n.canBeCached(e))?s=this.keyDecoder.decode(this.bytes,i,e):e>lm?s=dm(this.bytes,i,e):s=ku(this.bytes,i,e),this.pos+=t+e,s},r.prototype.stateIsMapKey=function(){if(this.stack.length>0){var e=this.stack[this.stack.length-1];return e.type===1}return!1},r.prototype.decodeBinary=function(e,t){if(e>this.maxBinLength)throw new at("Max length exceeded: bin length (".concat(e,") > maxBinLength (").concat(this.maxBinLength,")"));if(!this.hasRemaining(e+t))throw ja;var n=this.pos+t,i=this.bytes.subarray(n,n+e);return this.pos+=t+e,i},r.prototype.decodeExtension=function(e,t){if(e>this.maxExtLength)throw new at("Max length exceeded: ext length (".concat(e,") > maxExtLength (").concat(this.maxExtLength,")"));var n=this.view.getInt8(this.pos+t),i=this.decodeBinary(e,t+1);return this.extensionCodec.decode(i,n,this.context)},r.prototype.lookU8=function(){return this.view.getUint8(this.pos)},r.prototype.lookU16=function(){return this.view.getUint16(this.pos)},r.prototype.lookU32=function(){return this.view.getUint32(this.pos)},r.prototype.readU8=function(){var e=this.view.getUint8(this.pos);return this.pos++,e},r.prototype.readI8=function(){var e=this.view.getInt8(this.pos);return this.pos++,e},r.prototype.readU16=function(){var e=this.view.getUint16(this.pos);return this.pos+=2,e},r.prototype.readI16=function(){var e=this.view.getInt16(this.pos);return this.pos+=2,e},r.prototype.readU32=function(){var e=this.view.getUint32(this.pos);return this.pos+=4,e},r.prototype.readI32=function(){var e=this.view.getInt32(this.pos);return this.pos+=4,e},r.prototype.readU64=function(){var e=rm(this.view,this.pos);return this.pos+=8,e},r.prototype.readI64=function(){var e=Cu(this.view,this.pos);return this.pos+=8,e},r.prototype.readF32=function(){var e=this.view.getFloat32(this.pos);return this.pos+=4,e},r.prototype.readF64=function(){var e=this.view.getFloat64(this.pos);return this.pos+=8,e},r}(),Um={};function Mm(r,e){e===void 0&&(e=Um);var t=new Lm(e.extensionCodec,e.context,e.maxStrLength,e.maxBinLength,e.maxArrayLength,e.maxMapLength,e.maxExtLength);return t.decode(r)}var $r={};(function(r){var e=0,t=3,n=2,i=1,s=7,a=0,o=3,u=4,c=5,d=6,f=7,m=8,b=9,g=11,_=13,h=500,T=12,j=14,S=15,R=1,M=typeof Symbol<"u"?Symbol.iterator:"__iterator_symbol__";function O(q){q||(q={});var Y=q.converterByConstructor;Y||(Y=new Map),Y.set(Map,{name:"Map",toValue:I}),Y.set(Set,{name:"Set",toValue:N}),Y.set(Date,{name:"Date",toValue:L}),q.outlet||q.avoidShareUpdate;var K=typeof Ie<"u"&&Ie.Buffer&&!(q&&q.encoding==="utf16le")?r.nodeCharEncoder(q):v(),V=K.writeString,B=K.writeToken,G=K.startSequence,W=K.endSequence,te=K.writeBuffer;q.forProperty;var ie;q.shared&&(ie=q.shared.propertyUsed,q.shared.propertyUsed);var ge=[],J,je=r.bufferSymbol||"_bufferSymbol_",Le=r.targetSymbol||"_targetSymbol_",we=R++,Ke=[0,1,2,3,4,5,ae,ve,E,D,X];function Q(U){B(i,U)}function y(U){B(n,U.length),V(U)}function E(U){var re,ee=J.values;if(ee){ee.resetTo>-1&&ee.serializer!==we&&(ee.serializer=we,ee.resetTo<ee.length&&(ee.length=ee.resetTo),B(t,_),B(i,ee.resetTo));var ne=ee.indexOf(U);if(ne>-1)return Q(ne)}if((re=typeof U)=="string"||re==="object"&&U){if(J.writeSharedValue){if(J.writeSharedValue(U,B,we))return}else if(ee){var le=ee.length;le<12&&(ee[le]=U)}}re==="string"?y(U):ae(U)}function D(U){var re=typeof U;if(re==="number")if(U>>>0===U||U>0&&U<70368744177664&&U%1===0)B(i,U);else{var ee=U.toString();y(ee)}else re==="object"?ae(U):z(U)}function z(U){U===null?B(t,a):U===!1?B(t,o):U===!0?B(t,u):U===void 0?B(t,c):F(U)}function F(U){var re=typeof U,ee;if(re==="object")if(U){var ne=U.constructor;if(ne!==Object)if(ne===Array)re="array";else if(ee=Y.get(ne),ee&&ee.toValue){if(U=ee.toValue(U),re=typeof U,U&&re==="object"&&U.constructor===Array&&(re="array"),J.type===re)return J.extendedType!==ee&&(J.extendedType=ee,B(t,g),y(ee.name)),Ke[J.code](U)}else ee=!1}else re="undefined";else re==="boolean"?re="undefined":re==="function"&&(U=U.toString(),re="string");J=ue(null,re,ee),Ke[J.code](U)}function X(){B(t,a)}function ae(U,re){var ee=typeof U;if(ee==="object"){if(!U)return B(t,a)}else return ee==="string"?y(U):ee==="number"&&(U>>>0===U||U>0&&U<70368744177664&&U%1===0)?B(i,U):z(U);var ne=U,le=ne.constructor,me;if(ne[Le])return ye(U);if(le===Object)me=!1;else{if(le===Array)return J=ue(J.key,"array"),Ke[J.code](U);if(ne.then)return ye(U);if(Ue=Y.get(le),Ue){if(Ue.toValue)return z(ne)}else{if(ne[M])return J=ue(J.key,"array"),fe(ne,re);Y.set(le,Ue={name:le.name})}J.constructs!==le&&(B(t,g),y(Ue.name),J.constructs=le),me=!0}var Z=J;Z.resetTo<Z.length&&Z.serializer!=we&&(Z.length=Z.resetTo,Z.serializer=we),G();var he=0,Ce=-2,be=0;for(var Xe in ne)if(!(me&&!ne.hasOwnProperty(Xe))){var U=ne[Xe];ee=typeof U,J=Z[be];var le,Ue=!1;if(ee==="object"&&(U?(le=U.constructor,le===Object||(le===Array?ee="array":(Ue=Y.get(le),Ue&&Ue.toValue?(U=Ue.toValue(U),ee=typeof U,U&&ee==="object"&&U.constructor===Array&&(ee="array")):U[M]&&!U.then?ee="array":Ue=!1))):ee="undefined"),!J||J.key!==Xe||J.type!==ee&&ee!=="boolean"&&ee!=="undefined"&&!(ee==="string"&&J.type!=="number")||Ue&&J.extendedType!==le){var st=be;Ce>-2&&(be=Ce);do J=Z[++be];while(J&&(J.key!==Xe||J.type!==ee&&ee!=="boolean"&&ee!=="undefined"&&!(ee==="string"&&J.type!=="number")||Ue&&J.extendedType!==le));if(J)B(e,be),Ce===-2&&(Ce=st-1);else if(Z.getProperty)J=Z.getProperty(U,Xe,ee,Ue,ue,B,st),be=J.index,st!==be&&Ce===-2&&(Ce=st-1);else{if(st===Z.length?be=st:(B(e,be=Z.length),Ce===-2&&(Ce=st-1)),be<Z.resetTo){debugger;throw new Error("overwriting frozen property")}J=Z[be]=ue(Xe,ee,Ue)}}ie&&ie(J,ne,we,he);var sr=J.code;sr>7?sr===8?E(U):D(U):sr===6?ae(U):ve(U),be++,he++}J=Z,W(he)}function ue(U,re,ee){var ne;return ne=[],ne.key=U,ne.type=re,re==="string"?(B(t,m),ne.values=[],ne.code=m):re==="number"?(B(t,b),ne.code=b):re==="object"?(B(t,d),ne.code=d):re==="array"?(B(t,f),ne.code=f):re==="boolean"||re==="undefined"?(ne.type="object",B(t,d),ne.code=d):(B(t,d),ne.code=10,console.error("Unable to write value of type "+re)),typeof U=="string"?y(U):U===null&&(re==="object"||re==="array")||ae(U),ee&&(ne.extendedType=ee,B(t,g),y(ee.name)),ne}function fe(U,re,ee){try{ee||(B(s,T),ee=U[M]());var ne=J;J=ne.child||(ne.child=ne);for(var le;!(le=ee.next()).done;)if(Ke[J.code](le.value,ne),re&&K.hasWritten){K.hasWritten=!1,J=ne,ge.unshift({then:function(me){return fe(null,!0,ee),me()}});return}}catch(me){throw B(t,g),B(i,h),ae(Object.assign(new(typeof me=="object"&&me?me.constructor:Error),{name:me&&me.name,message:me&&me.message||me})),me}J!==ne.child&&(ne.child=J),J=ne,B(s,j)}function ve(U){if(!U)z(U);else{if(U[Le])return ye(U);if(U.constructor===Array){var re=U.length,ee;re>11?(B(s,T),ee=!0):B(s,re);var ne=J;J=ne[0],ne.resetTo<ne.length&&ne.serializer!=we&&(ne.length=ne.resetTo,ne.serializer=we);for(var le=0,me=0;me<re;me++){var Z=U[me],he=typeof Z;if(he==="object")if(Z){var Ce=Z.constructor;if(Ce!==Object)if(Ce===Array)he="array";else{var be=Y.get(Ce);be&&be.toValue?(Z=be.toValue(Z),he=typeof Z,Z&&he==="object"&&Z.constructor===Array&&(he="array")):be=!1}}else he="undefined";if(!J)ne.getProperty?J=ne.getProperty(Z,null,he,be,ue,B,0):(he==="string"||he==="number"||he==="array"?J=ue(null,he,be):(J=[],J.type=he,J.key=null,J.code=d),ne[0]=J);else if(J.type!==he&&he!=="boolean"&&he!=="undefined"&&!(he==="string"&&J.type!=="number")||be&&J.extendedType!==Ce){le=-1;do J=ne[++le];while(J&&(J.type!==he&&he!=="boolean"&&he!=="undefined"&&!(he==="string"&&J.type!=="number")||be&&J.extendedType!==Ce));J?B(e,le):ne.getProperty?J=ne.getProperty(Z,null,he,be,ue,B,-1):(B(e,le),J=ue(null,he,be),ne[le]=J)}ie&&ie(J,U,we,me);var Xe=J.code;Xe>7?Xe===8?E(Z):D(Z):Xe===6?ae(Z):ve(Z)}ee&&B(s,j),J=ne}else{if(typeof U=="object"&&U[M])return fe(U);if(he==="string")return y(Z);if(he==="number"&&(Z>>>0===Z||Z>0&&Z<70368744177664&&Z%1===0))return B(i,Z);z(U)}}}function ye(U,re){B(s,S);var ee=J,ne=U[Le]?{then:le}:{then:function(me){return U.then(function(Z){U=Z,le(me)},function(Z){U=Object.assign(new(typeof Z=="object"&&Z?Z.constructor:Error),{name:Z&&Z.name,message:Z&&Z.message||Z}),ee.upgrade||(B(t,g),B(i,h)),le(me)})}};function le(me){if(q.forBlock&&U)q.forBlock(U,ee);else{var Z=U&&U[je]&&U[je](ee);if(Z)te(Z);else{J=ee;var he=ge;ge=[],ae(U,!0),he.unshift.apply(he,ge),ge=he}}me()}ge.push(ne)}var _e={serialize:function(U,re){var ee=U&&U[je]&&U[je](re);if(ee){K.writeBuffer(ee);return}re?(J=re,Ke[J.code](U)):(J=[],J.key=null,ae(U,!0))},getSerialized:function(){if(ge.length>0){for(var U=[];ge.length>0;){var re=!1,ee=ge.shift().then(function(){re=!0});re||U.push(ee)}if(U.length>0)return Promise.all(U).then(function(){return _e.getSerialized()})}return q&&q.encoding==="utf16le"?Buffer.from(K.getSerialized(),"utf16le"):K.getSerialized()},flush:K.flush,setOffset:K.setOffset,finish:K.finish,pendingEncodings:ge,getWriters:function(){return{writeProperty:ue,writeToken:B,writeAsDefault:ae,writeBuffer:te}}};return _e}function C(q,Y){var K=O(Y),V=Y&&Y.shared,B;V&&V.startWrite&&V.startWrite(Y.avoidShareUpdate,q),K.serialize(q,V),B=K.getSerialized(),V&&V.endWrite&&V.endWrite(Y.avoidShareUpdate,q),K.finish&&K.finish();var G=q&&q[r.sizeTableSymbol];return G&&(B.sizeTable=G),Y&&Y.lazy?Buffer.concat([q[r.sizeTableSymbol],B]):B}r.serialize=C,r.createSerializer=O;function v(){var q="";function Y(B,G){var W;if(G<16)W=String.fromCharCode((B<<4|G)^64);else if(G<1024)W=String.fromCharCode((B<<4)+(G>>>6),(G&63)+64);else if(G<65536)W=String.fromCharCode((B<<4)+(G>>>12),G>>>6&63,(G&63)+64);else if(G<4194304)W=String.fromCharCode((B<<4)+(G>>>18),G>>>12&63,G>>>6&63,(G&63)+64);else if(G<268435456)W=String.fromCharCode((B<<4)+(G>>>24),G>>>18&63,G>>>12&63,G>>>6&63,(G&63)+64);else if(G<4294967296)W=String.fromCharCode((B<<4)+(G>>>30),G>>>24&63,G>>>18&63,G>>>12&63,G>>>6&63,(G&63)+64);else if(G<17179869184)W=String.fromCharCode((B<<4)+(G/1073741824>>>0),G>>>24&63,G>>>18&63,G>>>12&63,G>>>6&63,(G&63)+64);else if(G<1099511627776)W=String.fromCharCode((B<<4)+(G/68719476736>>>0),G/1073741824&63,G>>>24&63,G>>>18&63,G>>>12&63,G>>>6&63,(G&63)+64);else if(G<70368744177664)W=String.fromCharCode((B<<4)+(G/4398046511104>>>0),G/68719476736&63,G/1073741824&63,G>>>24&63,G>>>18&63,G>>>12&63,G>>>6&63,(G&63)+64);else throw new Error("Too big of number");q+=W}function K(B){q+=B}function V(){return q}return{writeToken:Y,writeString:K,getSerialized:V,startSequence:function(){Y(s,T)},endSequence:function(){Y(s,j)},getOffset:function(){return-1}}}var A=Array.from||function(q,V){var K=[],V=q.constructor===Map;return q.forEach(function(B,G){V?K.push([G,B]):K.push(B)}),K};function I(q){for(var Y=A(q),K=0,V=Y.length;K<V;K++){var B=Y[K];Y[K]={key:B[0],value:B[1]}}return Y}function N(q){return A(q)}function L(q){return q.getTime()}})($r);var Ns={},$m=3,zm=4,La=6,Ua=7,Ma=8,$a=9,za=11,Bm=13,Zm=14,Vm=500,Fm=12,Km=14,qm=15;function Ru(r){r||(r={});var e,t,n,i=r.classByName||new Map;i.set("Map",Hm),i.set("Set",Wm),i.set("Date",Gm);var s,a;function o(g,_){if(g.previous=s,g.resume=!0,s=g,!n)throw new Error("Unexpected end of dpack stream");return b.onResume||(b.onResume=function(h,T,j){var S=s;return s=null,b.onResume=null,_<t.length?t=t.slice(_)+h:j?t=h.slice(0,1)+h.slice(1):t=h,n=T,f+=_,e=0,S.reader?S.reader(S):u(S.length,S)}),g.object}function u(g,_){var h=0;_=_||[];var T,j,S,R,M=0,O=0;if(_.resume){if(T=_.previous,T){var R=T.reader?T.reader(T):u(T.length,T),C=T.values;C&&(s?s.values=C:R.nextPosition>-1?C[C.nextPosition++]=R:C.push(R))}_.code&&_.code!==_.thisProperty.code?_.resume=!1:(M=_.i||0,S=_.object,h=_.propertyState||0,O=_.propertyIndex||0,_=_.thisProperty)}for(j=_.code===Ua,S=S||(_.constructs?new _.constructs:j?[]:{});M<g;){var v,A,I=e,N=t.charCodeAt(e++);if(N>=48)N>12288?(v=N>>>12^4,A=N&4095):(v=N>>>4^4,A=N&15);else if(v=N>>>4&11,A=N&15,N=t.charCodeAt(e++),A=(A<<6)+(N&63),!(N>=64)&&(N=t.charCodeAt(e++),A=(A<<6)+(N&63),!(N>=64)&&(N=t.charCodeAt(e++),A=(A<<6)+(N&63),!(N>=64)&&(N=t.charCodeAt(e++),A=(A<<6)+(N&63),!(N>=64)&&(N=t.charCodeAt(e++),A=A*64+(N&63),!(N>=64)&&(N=t.charCodeAt(e++),A=A*64+(N&63),!(N>=64)&&(N=t.charCodeAt(e++),A=A*64+(N&63),!(N>=0)&&e>t.length)))))))return o({length:g,thisProperty:_,i:M,object:S,propertyIndex:O,propertyState:h},I);if(v===0){O=A,h=0;continue}if(T=_[O],v===3)if(A<6)A<3?A===0?R=null:R="Unknown token, type: "+v+" number: "+A:A===zm?R=!0:A===$m?R=!1:R=void 0;else{if(A<=$a){if(h===1&&(O++,M++,T=_[O]),O<_.resetTo)throw new Error("Overwriting frozen property");T?T.resume||(R=T.key,T=_[O]=[],T.key=R):(T=_[O]=[],T.key=null),T.code=A,T.parent=_,h=2,A===Ma?T.values=[]:A===Ua&&(T[0]=[],T[0].key=null,T[0].code=La,T[0].parent=T)}else h=A;continue}else if(v===2){if(R=t.slice(e,e+=A),e>t.length)return o({length:g,thisProperty:_,i:M,object:S,propertyIndex:O,propertyState:h},I);h<2&&T.code===$a&&(R=+R)}else if(v===1)R=A;else if(A>13){if(A===Km)return S;A===qm&&(R=u(0,T),h=0,r.forDeferred?R=r.forDeferred(R,T):(a||(a=[])).push({property:T,value:R}))}else if(A>=Fm&&(A=2e9),h>1?h===2?(h=0,R=u(A,T)):h===za?R=u(A,[{key:null,code:6}]):T.resume&&(T.code||La)===T.thisProperty.code?R=u(A,T.thisProperty):R=u(A,T):R=u(A,T),s){if(R===void 0)return s=null,b.onResume=null,o({length:g,thisProperty:_,i:M,object:S,property:T,propertyIndex:O,previousProperty,propertyState:h},I);s.values=T.values instanceof Array?T.values:void 0}if(!T)throw new Error("No property defined for slot"+(_.key?" in "+_.key:""));if(h<2&&T&&T.code===Ma){var C=T.values;if(typeof R=="number"){if(R=C[A],R===void 0&&!(A in C))throw new Error("Referencing value that has not been read yet")}else(v===2||v===7)&&C&&(C.nextPosition>-1?(T.recordValueReference&&T.recordValueReference(C),C[C.nextPosition++]=R):C.push(R))}if(h>1){if(h===2)T.key=R;else if(h===za)if(typeof R=="string"){var L=i.get(R);if(L)L.fromValue?T.fromValue=L.fromValue:T.constructs=L;else if(r.errorOnUnknownClass)throw new Error("Attempt to deserialize to unknown class "+parameter);T.extendedType=L}else T.metadata=R,R===Vm&&(T.fromValue=d);else if(h===Bm){var C=T.values||(T.values=[]);C.nextPosition=R}else if(h!==Zm)throw new Error("Unknown property type "+h);h=1;continue}else h=0;T.fromValue&&(R=T.fromValue(R)),j&&T.key===null?S.push(R):R!==void 0&&(S[T.key]=R),M++,j||O++}return S}var c;function d(g){var _=typeof Ie<"u"?Ie:window;if(g&&g.name&&_[g.name]?g=new _[g.name](g.message):typeof g=="string"&&(g=new Error(g)),r.onError)r.onError(g);else throw c=!0,g}var f=0;function m(g){try{if(g&&g.resume){var _=g.previous;h=u(_.length,_),h=g.object||h,g=g.property}else{g=g||[r&&r.shared||{key:null,code:6}];var h=u(1,g)[g[0].key]}for(;;){if(s)return o({reader:m,object:h,property:g});if(!a)return h;var T=a.index||0,j=a[T];if(a.index=T+1,!j){a=a.parent;continue}var S=j.value,R=a;a=[],a.parent=R;var M=j.property,O=u(1,g=[{resume:!0,key:null,thisProperty:M,object:S}]);O=O.null||O[M.key],O!=S&&(Object.assign(S,O),s&&s.object===O&&(s.object=S),O&&O.constructor===Array&&(S.length=O.length,Object.setPrototypeOf(S,Object.getPrototypeOf(O))))}}catch(C){throw c||(C.message="DPack parsing error: "+C.message+" at position: "+(e+f)+" near: "+t.slice(e-10,e+10)),C}}var b={setSource:function(g,_,h){return t=g,e=_||0,f=0,n=h,this},hasMoreData:function(){return t.length>e},isPaused:function(){return s},hasUnfulfilledReferences:function(){return a&&a.length>a.index},getOffset:function(){return e+f},read:m};return b}Ns.parse=function(r,e){var t;if(typeof r=="string")t=r;else if(r&&r.toString)t=r.toString(e&&e.encoding||"utf8");else return r;var n=Ru(e).setSource(t);return e&&e.shared?n.read([e.shared]):n.read()};Ns.createParser=Ru;var Hm={fromValue:function(r){for(var e=new Map,t=0,n=r.length;t<n;t++){var i=r[t];e.set(i.key,i.value)}return e}},Wm={fromValue:function(r){var e=new Set(r);if(e.size===0&&r.length>0)for(var t=0,n=r.length;t<n;t++)e.add(r[t]);return e}},Gm={fromValue:function(r){return new Date(r)}};xc.Transform;var Du={},Ba=32768,Za=[];function Ym(r){var e=r.startOffset||0,t,n=r.outlet,i=Za.pop();i&&i.length>e+128?t=i.length:(t=(e>>12<<12)+8192,i=Buffer.allocUnsafeSlow(t));var s=r.encoding,a=[];function o(_){if(n)n.writeBytes(i.slice(0,e)),(t<Ba||_>Ba)&&(t=Math.max(t*4,_)),i=Buffer.allocUnsafeSlow(t),e=0,a=[],g.hasWritten=!0;else{t=Math.max(t*4,t+_,8192);var h=i;i=Buffer.allocUnsafeSlow(t),h.copy(i,0,0,e)}}function u(_){(_||n).writeBytes(i.slice(0,e)),e+128>i.length?i=Buffer.allocUnsafeSlow(t=Math.min(Math.max((e>>10<<10)+8192,t),32768)):(i=i.slice(e),t=i.length),e=0,a=[]}function c(_,h){if(h<16)i[e++]=(_<<4)+h^64;else if(h<1024)i[e++]=(_<<4)+(h>>>6),i[e++]=(h&63)+64;else if(h<65536)i[e++]=(_<<4)+(h>>>12),i[e++]=h>>>6&63,i[e++]=(h&63)+64;else if(h<4194304)i[e++]=(_<<4)+(h>>>18),i[e++]=h>>>12&63,i[e++]=h>>>6&63,i[e++]=(h&63)+64;else if(h<268435456)i[e++]=(_<<4)+(h>>>24),i[e++]=h>>>18&63,i[e++]=h>>>12&63,i[e++]=h>>>6&63,i[e++]=(h&63)+64;else if(h<4294967296)i[e++]=(_<<4)+(h>>>30),i[e++]=h>>>24&63,i[e++]=h>>>18&63,i[e++]=h>>>12&63,i[e++]=h>>>6&63,i[e++]=(h&63)+64;else if(h<17179869184)i[e++]=(_<<4)+(h/1073741824>>>0),i[e++]=h>>>24&63,i[e++]=h>>>18&63,i[e++]=h>>>12&63,i[e++]=h>>>6&63,i[e++]=(h&63)+64;else if(h<1099511627776)i[e++]=(_<<4)+(h/68719476736>>>0),i[e++]=h/1073741824&63,i[e++]=h>>>24&63,i[e++]=h>>>18&63,i[e++]=h>>>12&63,i[e++]=h>>>6&63,i[e++]=(h&63)+64;else if(h<70368744177664)i[e++]=(_<<4)+(h/4398046511104>>>0),i[e++]=h/68719476736&63,i[e++]=h/1073741824&63,i[e++]=h>>>24&63,i[e++]=h>>>18&63,i[e++]=h>>>12&63,i[e++]=h>>>6&63,i[e++]=(h&63)+64;else throw new Error("Invalid number "+h);e>t-10&&o(0)}function d(_){var h=_.length;h+e+10>t&&o(h+10),_.copy(i,e),e+=h}function f(_){var h=_.length,T=h*3+10;e+T>t&&o(T+10);var j=s?i.write(_,e,i.length,s):i.utf8Write(_,e,i.length);e+=j}function m(){return i.slice(0,e)}function b(_,h){var T=_.length;e+T+10>t&&o(T+10),i.copy(i,T+h,h,e),_.copy(i,h),e+=T}var g={writeToken:c,writeString:f,writeBuffer:d,getSerialized:m,insertBuffer:b,flush:u,startSequence(){var _=e;i[e++]=60,a.push(_),e>t-10&&o(0)},endSequence(_){var h=a.pop();if(_<12&&h>-1){i[h]=48+_;return}i[e++]=62},finish(){i.length-e>144&&Za.push(i.slice(e))},getOffset(){return e},setOffset(_){e=_}};return g}Du.nodeCharEncoder=Ym;function Jm(){this.classByName=new Map,this.converterByConstructor=new Map}Jm.prototype.addExtension=function(r,e,t){e&&r.name!==e&&(r.name=e),this.classByName.set(r.name,t&&t.fromArray?t:r),this.converterByConstructor.set(r,t&&t.toArray?t:r)};$r.createSerializer;$r.serialize;var Rs=typeof Symbol<"u"?Symbol:function(r){return"symbol-"+r},Xm=Rs("buffer"),Qm=Rs("sizeTable"),eg=Rs("target");process.env.NODE_ENV!="production";var zr=$r;zr.bufferSymbol=Xm;zr.targetSymbol=eg;zr.sizeTableSymbol=Qm;zr.serialize;zr.createSerializer;const Ds=$r;Ds.nodeCharEncoder=Du.nodeCharEncoder;const tg=Ns;var rg=Ds.serialize,ng=tg.parse;Ds.createSerializer;function ju(r){return`Unsupported serialization format: ${r}`}function Lu(){return typeof process<"u"&&process.versions!==void 0?"node":typeof Deno<"u"?"deno":typeof Bun<"u"?"bun":typeof window<"u"?"browser":"unknown"}const Yi={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,a:10,b:11,c:12,d:13,e:14,f:15},Va=Object.keys(Yi);function ig(r){const e=new Uint8Array(Math.floor(r.length/2));r=r.toLowerCase();for(let t=0;t<r.length;t++){const n=Yi[r[t*2]],i=Yi[r[t*2+1]];if(n===void 0||i===void 0)break;e[t]=n<<4|i}return e}function sg(r){return Array.from(r||[]).map(e=>Va[e>>4]+Va[e&15]).join("")}async function ag(r,e="binary",t){t||(t=Lu());const n=await em(r);let i;switch(e){case"json":i=JSON.stringify(n);break;case"dpack":i=rg(n);break;case"binary":{const s=Om(n);t==="node"?(i=Buffer.from(s.buffer,s.byteOffset,s.byteLength),i=i.toString("hex")):i=sg(s)}break;default:throw new Error(ju(e))}return i}async function og(r,e,t){t||(t=Lu());const n=await Pu({schema:{__placeholder:"string"}});let i;switch(r){case"json":i=JSON.parse(e.toString());break;case"dpack":i=ng(e);break;case"binary":t==="node"?e=Buffer.from(e.toString(),"hex"):e=ig(e),i=Mm(e);break;default:throw new Error(ju(r))}return await Qp(n,i),n}class ug extends Se{constructor(e){super(e),Object.defineProperty(this,"callbacks",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"tags",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"metadata",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"verbose",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.callbacks=e==null?void 0:e.callbacks,this.tags=(e==null?void 0:e.tags)??[],this.metadata=(e==null?void 0:e.metadata)??{},this.verbose=(e==null?void 0:e.verbose)??!1}_getRelevantDocuments(e,t){throw new Error("Not implemented!")}async invoke(e,t){return this.getRelevantDocuments(e,t)}async getRelevantDocuments(e,t){const n=ed(t),i=await Ve.configure(n.callbacks,this.callbacks,n.tags,this.tags,n.metadata,this.metadata,{verbose:this.verbose}),s=await(i==null?void 0:i.handleRetrieverStart(this.toJSON(),e,void 0,void 0,void 0,void 0,n.runName));try{const a=await this._getRelevantDocuments(e,s);return await(s==null?void 0:s.handleRetrieverEnd(a)),a}catch(a){throw await(s==null?void 0:s.handleRetrieverError(a)),a}}}class Ci extends ug{static lc_name(){return"VectorStoreRetriever"}get lc_namespace(){return["langchain","retrievers","base"]}_vectorstoreType(){return this.vectorStore._vectorstoreType()}constructor(e){super(e),Object.defineProperty(this,"vectorStore",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"k",{enumerable:!0,configurable:!0,writable:!0,value:4}),Object.defineProperty(this,"searchType",{enumerable:!0,configurable:!0,writable:!0,value:"similarity"}),Object.defineProperty(this,"searchKwargs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"filter",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.vectorStore=e.vectorStore,this.k=e.k??this.k,this.searchType=e.searchType??this.searchType,this.filter=e.filter,e.searchType==="mmr"&&(this.searchKwargs=e.searchKwargs)}async _getRelevantDocuments(e,t){if(this.searchType==="mmr"){if(typeof this.vectorStore.maxMarginalRelevanceSearch!="function")throw new Error(`The vector store backing this retriever, ${this._vectorstoreType()} does not support max marginal relevance search.`);return this.vectorStore.maxMarginalRelevanceSearch(e,{k:this.k,filter:this.filter,...this.searchKwargs},t==null?void 0:t.getChild("vectorstore"))}return this.vectorStore.similaritySearch(e,this.k,this.filter,t==null?void 0:t.getChild("vectorstore"))}async addDocuments(e,t){return this.vectorStore.addDocuments(e,t)}}class cg extends _t{constructor(e,t){super(t),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","vectorstores",this._vectorstoreType()]}),Object.defineProperty(this,"embeddings",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.embeddings=e}async delete(e){throw new Error("Not implemented.")}async similaritySearch(e,t=4,n=void 0,i=void 0){return(await this.similaritySearchVectorWithScore(await this.embeddings.embedQuery(e),t,n)).map(a=>a[0])}async similaritySearchWithScore(e,t=4,n=void 0,i=void 0){return this.similaritySearchVectorWithScore(await this.embeddings.embedQuery(e),t,n)}static fromTexts(e,t,n,i){throw new Error("the Langchain vectorstore implementation you are using forgot to override this, please report a bug")}static fromDocuments(e,t,n){throw new Error("the Langchain vectorstore implementation you are using forgot to override this, please report a bug")}asRetriever(e,t,n,i,s,a){if(typeof e=="number")return new Ci({vectorStore:this,k:e,filter:t,tags:[...i??[],this._vectorstoreType()],metadata:s,verbose:a,callbacks:n});{const o={vectorStore:this,k:e==null?void 0:e.k,filter:e==null?void 0:e.filter,tags:[...(e==null?void 0:e.tags)??[],this._vectorstoreType()],metadata:e==null?void 0:e.metadata,verbose:e==null?void 0:e.verbose,callbacks:e==null?void 0:e.callbacks,searchType:e==null?void 0:e.searchType};return(e==null?void 0:e.searchType)==="mmr"?new Ci({...o,searchKwargs:e.searchKwargs}):new Ci({...o})}}}class lg{constructor(e){Object.defineProperty(this,"caller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.caller=new zn(e??{})}}class dg extends lg{constructor(e,t){var c,d;const n={maxConcurrency:2,...e};super(n),Object.defineProperty(this,"modelName",{enumerable:!0,configurable:!0,writable:!0,value:"text-embedding-ada-002"}),Object.defineProperty(this,"batchSize",{enumerable:!0,configurable:!0,writable:!0,value:512}),Object.defineProperty(this,"stripNewLines",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"timeout",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiVersion",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiKey",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiInstanceName",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiDeploymentName",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIBasePath",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"client",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"clientConfig",{enumerable:!0,configurable:!0,writable:!0,value:void 0});let i=(n==null?void 0:n.openAIApiKey)??ce("OPENAI_API_KEY");const s=(n==null?void 0:n.azureOpenAIApiKey)??ce("AZURE_OPENAI_API_KEY");if(!s&&!i)throw new Error("OpenAI or Azure OpenAI API key not found");const a=(n==null?void 0:n.azureOpenAIApiInstanceName)??ce("AZURE_OPENAI_API_INSTANCE_NAME"),o=((n==null?void 0:n.azureOpenAIApiEmbeddingsDeploymentName)||(n==null?void 0:n.azureOpenAIApiDeploymentName))??(ce("AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME")||ce("AZURE_OPENAI_API_DEPLOYMENT_NAME")),u=(n==null?void 0:n.azureOpenAIApiVersion)??ce("AZURE_OPENAI_API_VERSION");if(this.azureOpenAIBasePath=(n==null?void 0:n.azureOpenAIBasePath)??ce("AZURE_OPENAI_BASE_PATH"),this.modelName=(n==null?void 0:n.modelName)??this.modelName,this.batchSize=(n==null?void 0:n.batchSize)??(s?1:this.batchSize),this.stripNewLines=(n==null?void 0:n.stripNewLines)??this.stripNewLines,this.timeout=n==null?void 0:n.timeout,this.azureOpenAIApiVersion=u,this.azureOpenAIApiKey=s,this.azureOpenAIApiInstanceName=a,this.azureOpenAIApiDeploymentName=o,this.azureOpenAIApiKey){if(!this.azureOpenAIApiInstanceName&&!this.azureOpenAIBasePath)throw new Error("Azure OpenAI API instance name not found");if(!this.azureOpenAIApiDeploymentName)throw new Error("Azure OpenAI API deployment name not found");if(!this.azureOpenAIApiVersion)throw new Error("Azure OpenAI API version not found");i=i??""}this.clientConfig={apiKey:i,baseURL:t==null?void 0:t.basePath,dangerouslyAllowBrowser:!0,defaultHeaders:(c=t==null?void 0:t.baseOptions)==null?void 0:c.headers,defaultQuery:(d=t==null?void 0:t.baseOptions)==null?void 0:d.params,...t}}async embedDocuments(e){const t=qi(this.stripNewLines?e.map(a=>a.replace(/\n/g," ")):e,this.batchSize),n=t.map(a=>this.embeddingWithRetry({model:this.modelName,input:a})),i=await Promise.all(n),s=[];for(let a=0;a<i.length;a+=1){const o=t[a],{data:u}=i[a];for(let c=0;c<o.length;c+=1)s.push(u[c].embedding)}return s}async embedQuery(e){const{data:t}=await this.embeddingWithRetry({model:this.modelName,input:this.stripNewLines?e.replace(/\n/g," "):e});return t[0].embedding}async embeddingWithRetry(e){if(!this.client){const n={azureOpenAIApiDeploymentName:this.azureOpenAIApiDeploymentName,azureOpenAIApiInstanceName:this.azureOpenAIApiInstanceName,azureOpenAIApiKey:this.azureOpenAIApiKey,azureOpenAIBasePath:this.azureOpenAIBasePath,baseURL:this.clientConfig.baseURL},i=Kn(n),s={...this.clientConfig,baseURL:i,timeout:this.timeout,maxRetries:0};s.baseURL||delete s.baseURL,this.client=new Pe(s)}const t={};return this.azureOpenAIApiKey&&(t.headers={"api-key":this.azureOpenAIApiKey,...t.headers},t.query={"api-version":this.azureOpenAIApiVersion,...t.query}),this.caller.call(async()=>{try{return await this.client.embeddings.create(e,t)}catch(n){throw qn(n)}})}}class fg extends Se{parseResultWithPrompt(e,t,n){return this.parseResult(e,n)}async invoke(e,t){return typeof e=="string"?this._callWithConfig(async n=>this.parseResult([{text:n}]),e,{...t,runType:"parser"}):this._callWithConfig(async n=>this.parseResult([{message:n,text:n.content}]),e,{...t,runType:"parser"})}}class hg extends fg{parseResult(e,t){return this.parse(e[0].text,t)}async parseWithPrompt(e,t,n){return this.parse(e,n)}_type(){throw new Error("_type not implemented")}}class pg extends hg{async*_transform(e){for await(const t of e)typeof t=="string"?yield this.parseResult([{text:t}]):yield this.parseResult([{message:t,text:t.content}])}async*transform(e,t){yield*this._transformStreamWithConfig(e,this._transform.bind(this),{...t,runType:"parser"})}}class mg extends pg{constructor(){super(...arguments),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","schema","output_parser"]}),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0})}static lc_name(){return"StrOutputParser"}parse(e){return Promise.resolve(e)}getFormatInstructions(){return""}}var gg={id:"string",filename:"string",content:"string",embedding:"vector[1536]"},yg=class extends cg{constructor(r,e){super(r,e),this.embeddings=r,this.db=Pu({schema:gg,id:e.indexName})}_vectorstoreType(){return"OramaStore"}async removeDocuments(r){console.log("Removing documents",r);const e=await Sa(await this.db,r.map(t=>t.metadata.id));console.log("Removed documents with ids",e)}async addVectors(r,e){const n=e.map(a=>a.metadata.filename).filter((a,o,u)=>u.indexOf(a)===o);for(const a of n){const o=await Gp(await this.db,{properties:["filename"],term:a,exact:!0,limit:1e4});console.log("Removed documents",o,"for filename",a),await Sa(await this.db,o.hits.map(u=>u.document.id))}const i=e.map((a,o)=>({id:a.metadata.id,filename:a.metadata.filename,content:a.pageContent,embedding:r[o]})),s=await $p(await this.db,i);return console.log("Inserted documents with ids",s),s}async addDocuments(r){await this.addVectors(await this.embeddings.embedDocuments(r.map(e=>e.pageContent)),r),console.log((await this.db).data.docs)}static async fromDocuments(r,e,t){const n=new this(e,t);return await n.addDocuments(r),n}async similaritySearchVectorWithScore(r,e){return(await Xp(await this.db,{vector:r,property:"embedding",limit:e,similarity:.3})).hits.map(n=>[new $f({pageContent:n.document.content}),n.score])}async getJson(){return await ag(await this.db,"json")}async loadFromJson(r){this.db=og("json",r),console.log("Loaded vector store from JSON",await this.db)}},bg=class{constructor(r){if(!r.openAIApiKey)throw new Error("No OpenAI API key provided");this.vectorStore=new yg(new dg({openAIApiKey:r.openAIApiKey,batchSize:2048}),{indexName:"obsidiandb"}),r.vectorStoreJson&&this.vectorStore.loadFromJson(r.vectorStoreJson),this.retriever=this.vectorStore.asRetriever({k:7});const e=new Os({openAIApiKey:r.openAIApiKey}),t=vt.fromTemplate(`Antworte als mein Assistent auf meine Frage ausschließlich basierend auf meinem Wissen im folgenden Markdown formatierten Kontext. Bitte erstelle links im folgenden format [[<Notename>#<Header1>##<Header2>###...]] aus den Note Headern und füge sie deiner Antwort als Referenz bei:
        {context}

        Frage: {question}`);this.ragChain=Dt.from([{context:this.retriever.pipe(n=>n.map(i=>i.pageContent).join(`

`)),question:new bd},t,e,new mg])}async embedDocuments(r){console.log("Embedding documents..."),await this.vectorStore.addDocuments(r),console.log("Done embedding documents")}async removeDocuments(r){await this.vectorStore.removeDocuments(r)}async runRAG(r){return console.log("Running RAG..."),this.ragChain.invoke(r,{callbacks:[{handleRetrieverEnd:async t=>{console.log(JSON.stringify(t,null,2))},handleLLMStart:async(t,n)=>{console.log(JSON.stringify(n,null,2))},handleLLMEnd:async t=>{console.log(JSON.stringify(t,null,2))},handleLLMError:async t=>{console.error(t)}}]})}async retrieveDocuments(r){return await this.vectorStore.similaritySearch(r,3)}async getVectorStoreJson(){return await this.vectorStore.getJson()}static async loadFromData(r){return new this(r)}};async function ki(r,e){let t=[];for(const n of e){const i=r.metadataCache.getFileCache(n);if(!i)continue;t.push({metadata:{id:n.basename+" metadata",filename:n.basename},pageContent:"Note: "+n.basename+`
Erstellt am: `+new Date(n.stat.ctime)+`
Metadaten: `+JSON.stringify(i.frontmatter||{})});const s=await r.vault.cachedRead(n);let a=0,o=0,u=[];u.push(n.basename);let c=0;for(const d of i.sections||[])if(d.type==="heading"){const f=i.headings[a];f.level>c?(u.push(s.slice(f.position.start.offset,f.position.end.offset)),c=f.level):f.level<c?(u.pop(),u.pop(),u.push(s.slice(f.position.start.offset,f.position.end.offset)),c=f.level):(u.pop(),u.push(s.slice(f.position.start.offset,f.position.end.offset))),o=0,a++}else t.push({metadata:{id:u.join("")+" ID"+o,filename:n.basename},pageContent:"Notename: "+u.join(`
`)+`
`+s.slice(d.position.start.offset,d.position.end.offset)}),o++}return console.log("Loaded "+t.length+" documents from Obsidian",t),t}let en=is([{role:"system",content:"Hi, this is your Second Brain!",context:null}]),Ar=is();const Uu=is();function vg(r){let e,t,n,i,s,a,o,u;return s=new Jc({}),{c(){e=We("form"),t=We("input"),n=Lt(),i=We("button"),wt(s.$$.fragment),Ae(t,"id","chat-view-user-input-element"),Ae(t,"type","text"),Ae(t,"class","flex-1"),Ae(t,"placeholder",wg),Ae(i,"type","submit"),Ae(i,"class","px-4 py-2 rounded-r-md hover:bg-primary transition duration-300 ease-in-out"),Ae(e,"class","sticky flex w-full gap-1")},m(c,d){tt(c,e,d),Ne(e,t),zs(t,r[0]),Ne(e,n),Ne(e,i),mt(s,i,null),a=!0,o||(u=[Gt(t,"input",r[3]),Gt(t,"keyup",r[2]),Gt(e,"submit",Li(r[1]))],o=!0)},p(c,[d]){d&1&&t.value!==c[0]&&zs(t,c[0])},i(c){a||(He(s.$$.fragment,c),a=!0)},o(c){Ye(s.$$.fragment,c),a=!1},d(c){c&&Ge(e),gt(s),o=!1,It(u)}}}let wg="Chat with your second Brain...";function _g(r,e,t){let n;Di(r,en,c=>t(5,n=c));let i="",s;async function a(){if(s){new Be.Notice("Please wait while your Second Brain is thinking...");return}if(s=!0,document.getElementById("chat-view-user-input-element"),i.trim()!==""){let c=i;t(0,i=""),en.update(d=>[...d,{role:"user",content:c}]),console.log(n),Ar.subscribe(async d=>{const f=await d.runRAG(c);f&&en.update(m=>[...m,{role:"assistant",content:f}])})}else new Be.Notice("Your Second Brain does not understand empty messages!");s=!1}function o(c){c.key==="["&&new js(app).open()}function u(){i=this.value,t(0,i)}return[i,a,o,u]}class Mu extends $t{constructor(e){super(),Mt(this,e,_g,vg,At,{})}}class Ig extends Be.Modal{constructor(t){super(t);Ee(this,"component");Ee(this,"onSubmit")}onOpen(){this.component=new Mu({target:this.contentEl})}async onClose(){this.component.$destroy()}}function Ag(r){let e;return{c(){e=Rr("path"),Ae(e,"d","M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z")},m(t,n){tt(t,e,n)},p:Ze,d(t){t&&Ge(e)}}}function Eg(r){let e,t;const n=[{viewBox:"0 0 24 24"},r[0]];let i={$$slots:{default:[Ag]},$$scope:{ctx:r}};for(let s=0;s<n.length;s+=1)i=ft(i,n[s]);return e=new ns({props:i}),{c(){wt(e.$$.fragment)},m(s,a){mt(e,s,a),t=!0},p(s,[a]){const o=a&1?ts(n,[n[0],rs(s[0])]):{};a&2&&(o.$$scope={dirty:a,ctx:s}),e.$set(o)},i(s){t||(He(e.$$.fragment,s),t=!0)},o(s){Ye(e.$$.fragment,s),t=!1},d(s){gt(e,s)}}}function Tg(r,e,t){return r.$$set=n=>{t(0,e=ft(ft({},e),er(n)))},e=er(e),[e]}class Pg extends $t{constructor(e){super(),Mt(this,e,Tg,Eg,At,{})}}function Og(r){let e;return{c(){e=Rr("path"),Ae(e,"d","M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 9H9V9h10v2zm-4 4H9v-2h6v2zm4-8H9V5h10v2z")},m(t,n){tt(t,e,n)},p:Ze,d(t){t&&Ge(e)}}}function xg(r){let e,t;const n=[{viewBox:"0 0 24 24"},r[0]];let i={$$slots:{default:[Og]},$$scope:{ctx:r}};for(let s=0;s<n.length;s+=1)i=ft(i,n[s]);return e=new ns({props:i}),{c(){wt(e.$$.fragment)},m(s,a){mt(e,s,a),t=!0},p(s,[a]){const o=a&1?ts(n,[n[0],rs(s[0])]):{};a&2&&(o.$$scope={dirty:a,ctx:s}),e.$set(o)},i(s){t||(He(e.$$.fragment,s),t=!0)},o(s){Ye(e.$$.fragment,s),t=!1},d(s){gt(e,s)}}}function Sg(r,e,t){return r.$$set=n=>{t(0,e=ft(ft({},e),er(n)))},e=er(e),[e]}class Cg extends $t{constructor(e){super(),Mt(this,e,Sg,xg,At,{})}}function Fa(r,e,t){const n=r.slice();return n[8]=e[t],n}function kg(r){let e,t,n,i,s,a,o,u,c,d,f,m,b,g;return o=new Pg({}),d=new Cg({}),{c(){e=We("div"),t=We("div"),n=We("p"),s=Lt(),a=We("button"),wt(o.$$.fragment),u=Lt(),c=We("button"),wt(d.$$.fragment),f=Lt(),Ae(n,"class","text-slate-0"),Jr(a,"background-color","transparent"),Jr(c,"background-color","transparent"),Ae(t,"id","test"),Ae(t,"class","p-2 break-words rounded-t-md rounded-br-md w-fit max-w-[80%]"),Jr(t,"background",r[1]),Ae(e,"class","mb-3")},m(_,h){tt(_,e,h),Ne(e,t),Ne(t,n),Ne(t,s),Ne(t,a),mt(o,a,null),Ne(t,u),Ne(t,c),mt(d,c,null),Ne(e,f),m=!0,b||(g=[jc(i=r[5].call(null,n,r[8].content)),Gt(a,"click",Li(function(){Wt(r[3](r[8].content))&&r[3](r[8].content).apply(this,arguments)})),Gt(c,"click",Li(function(){Wt(r[3](r[8].context))&&r[3](r[8].context).apply(this,arguments)}))],b=!0)},p(_,h){r=_,i&&Wt(i.update)&&h&1&&i.update.call(null,r[8].content)},i(_){m||(He(o.$$.fragment,_),He(d.$$.fragment,_),m=!0)},o(_){Ye(o.$$.fragment,_),Ye(d.$$.fragment,_),m=!1},d(_){_&&Ge(e),gt(o),gt(d),b=!1,It(g)}}}function Ng(r){let e,t,n,i,s;return{c(){e=We("div"),t=We("button"),n=Lt(),Ae(t,"class","p-2 break-words rounded-t-md rounded-bl-md max-w-[80%] text-slate-0"),Jr(t,"background",r[2]),Ae(e,"class","flex justify-end mb-3")},m(a,o){tt(a,e,o),Ne(e,t),Ne(e,n),i||(s=Gt(t,"click",r[4]),i=!0)},p:Ze,i:Ze,o:Ze,d(a){a&&Ge(e),i=!1,s()}}}function Ka(r,e){let t,n,i,s,a;const o=[Ng,kg],u=[];function c(d,f){return d[8].role==="user"?0:1}return n=c(e),i=u[n]=o[n](e),{key:r,first:null,c(){t=ji(),i.c(),s=ji(),this.first=t},m(d,f){tt(d,t,f),u[n].m(d,f),tt(d,s,f),a=!0},p(d,f){e=d;let m=n;n=c(e),n===m?u[n].p(e,f):(mo(),Ye(u[m],1,1,()=>{u[m]=null}),go(),i=u[n],i?i.p(e,f):(i=u[n]=o[n](e),i.c()),He(i,1),i.m(s.parentNode,s))},i(d){a||(He(i),a=!0)},o(d){Ye(i),a=!1},d(d){d&&(Ge(t),Ge(s)),u[n].d(d)}}}function Rg(r){let e,t=[],n=new Map,i,s=Vs(r[0]);const a=o=>o[8].content;for(let o=0;o<s.length;o+=1){let u=Fa(r,s,o),c=a(u);n.set(c,t[o]=Ka(c,u))}return{c(){e=We("div");for(let o=0;o<t.length;o+=1)t[o].c();Ae(e,"class","chat-window flex-grow w-full overflow-scroll border-2 border-solid roundedmd border-slate-30 mb-1 p-4")},m(o,u){tt(o,e,u);for(let c=0;c<t.length;c+=1)t[c]&&t[c].m(e,null);i=!0},p(o,[u]){u&31&&(s=Vs(o[0]),mo(),t=Vc(t,u,a,1,o,s,n,e,Zc,Ka,null,Fa),go())},i(o){if(!i){for(let u=0;u<s.length;u+=1)He(t[u]);i=!0}},o(o){for(let u=0;u<t.length;u+=1)Ye(t[u]);i=!1},d(o){o&&Ge(e);for(let u=0;u<t.length;u+=1)t[u].d()}}}function Dg(r,e,t){let n,i;Di(r,Uu,f=>t(6,n=f)),Di(r,en,f=>t(0,i=f));const s=f=>getComputedStyle(document.body).getPropertyValue(f),a=s("--color-accent"),o=s("--color-base-40");function u(f){if(!f){new Be.Notice("Only for Valid Messages! Implement that you lazy fuck!");return}Oc.clipboard.writeText(f)}function c(){const f=n.app.metadataCache.getFirstLinkpathDest("Meetingrollen","/"),m=Be.Keymap.isModEvent(event);n.app.workspace.getLeaf(m).openFile(f)}return[i,a,o,u,c,(f,m)=>{f.click=()=>{const b=n.app.metadataCache.getFirstLinkpathDest("Meetingrollen#Test","/");n.app.workspace.getLeaf(mod).openFile(b)},Be.MarkdownRenderer.render(n.app,Be.htmlToMarkdown(m),f,"",n)}]}class jg extends $t{constructor(e){super(),Mt(this,e,Dg,Rg,At,{})}}function Lg(r){let e,t,n,i,s,a,o;return i=new jg({}),a=new Mu({}),{c(){e=We("div"),t=We("h1"),t.textContent="Second Brain Interface",n=Lt(),wt(i.$$.fragment),s=Lt(),wt(a.$$.fragment),Ae(e,"class","h-full flex flex-col --background-modifier-border")},m(u,c){tt(u,e,c),Ne(e,t),Ne(e,n),mt(i,e,null),Ne(e,s),mt(a,e,null),o=!0},p:Ze,i(u){o||(He(i.$$.fragment,u),He(a.$$.fragment,u),o=!0)},o(u){Ye(i.$$.fragment,u),Ye(a.$$.fragment,u),o=!1},d(u){u&&Ge(e),gt(i),gt(a)}}}let Ug=class extends $t{constructor(e){super(),Mt(this,e,null,Lg,At,{})}};const Er="chat-view";class Mg extends Be.ItemView{constructor(t){super(t);Ee(this,"component");Ee(this,"AiBubbleColor");Ee(this,"UserBubbleColor");this.icon="message-square"}getViewType(){return Er}getDisplayText(){return"Chat view"}async onOpen(){this.component=new Ug({target:this.contentEl})}async onClose(){this.component.$destroy()}}class $g extends Be.PluginSettingTab{constructor(t,n){super(t,n);Ee(this,"plugin");this.plugin=n}display(){let{containerEl:t}=this;t.empty(),new Be.Setting(t).setName("AI Color").addExtraButton(n=>n.setIcon("reset").onClick(async()=>{this.plugin.data.AIcolor=Rn.AIcolor,await this.plugin.saveSettings()})).addColorPicker(n=>n.setValue(this.plugin.data.AIcolor).onChange(async i=>{this.plugin.data.AIcolor=i,await this.plugin.saveSettings()})),new Be.Setting(t).setName("User Color").addExtraButton(n=>n.setIcon("reset").onClick(()=>this.plugin.data.UserColor=Rn.UserColor)).addColorPicker(n=>n.setValue(this.plugin.data.UserColor).onChange(async i=>{this.plugin.data.UserColor=i,await this.plugin.saveSettings()})),new Be.Setting(t).setName("LLM").addDropdown(n=>{n.addOptions({LLama:"LLama",Anthropic:"Anthropic"}).setValue(this.plugin.data.llm).onChange(async i=>{this.plugin.data.llm=i,await this.plugin.saveSettings()})}),new Be.Setting(t).setName("OpenAI API Key").addText(n=>n.setPlaceholder("OpenAI API Key").setValue(this.plugin.data.secondBrain.openAIApiKey||"").onChange(async i=>{this.plugin.data.secondBrain.openAIApiKey=i,await this.plugin.saveSettings()}))}}const Rn={secondBrain:{openAIApiKey:"Your key"}};class zg extends Be.Plugin{constructor(){super(...arguments);Ee(this,"data")}async loadSettings(){this.data=Object.assign({},Rn,await this.loadData())}async saveSettings(){await this.saveData(this.data)}async onload(){await this.loadSettings(),Ar.set(await bg.loadFromData(this.data.secondBrain)),Uu.set(this),this.app.vault.on("modify",t=>{setTimeout(async()=>{Ar.subscribe(async n=>{const i=await ki(this.app,[t]);await n.embedDocuments(i),this.data.secondBrain.vectorStoreJson=await n.getVectorStoreJson(),await this.saveSettings()})},1e3)}),this.app.vault.on("delete",t=>{Ar.subscribe(async n=>{const i=await ki(this.app,[t]);await n.removeDocuments(i),this.data.secondBrain.vectorStoreJson=await n.getVectorStoreJson(),await this.saveSettings()})}),this.registerView(Er,t=>new Mg(t)),this.addRibbonIcon("brain-circuit","Smart Second Brain",()=>{this.activateView()}),this.addSettingTab(new $g(this.app,this)),this.addCommand({id:"chat-modal",name:"Chat with AI",callback:()=>{new Ig(this.app).open()}}),this.addCommand({id:"find-files",name:"ff",callback:()=>{new js(this.app).open()}}),this.data.embeddedAllOnce||(setTimeout(()=>{Ar.subscribe(async t=>{const n=await ki(this.app,this.app.vault.getMarkdownFiles());await t.embedDocuments(n),this.data.secondBrain.vectorStoreJson=await t.getVectorStoreJson(),await this.saveSettings()})},1e3),this.data.embeddedAllOnce=!0,await this.saveSettings())}onunload(){console.log("unloading plugin")}async activateView(){this.app.workspace.detachLeavesOfType(Er),await this.app.workspace.getRightLeaf(!1).setViewState({type:Er,active:!0}),this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(Er)[0])}}class js extends Be.FuzzySuggestModal{constructor(e){super(e),this.app=e,this.setPlaceholder("Type the name of a file...")}getItems(){return this.app.vault.getMarkdownFiles().sort((e,t)=>e.basename.localeCompare(t.basename))}getItemText(e){return e.basename}onChooseItem(e){const t=document.getElementById("chat-view-user-input-element");t.value=t.value+`[${e.basename}]]`}}var $u={},Gn={},or={},Yn={},Ji={},lt={},Jn={},Br={};(function(r){Object.defineProperty(r,"__esModule",{value:!0}),r.getParsedType=r.ZodParsedType=r.objectUtil=r.util=void 0;var e;(function(n){n.assertEqual=o=>o;function i(o){}n.assertIs=i;function s(o){throw new Error}n.assertNever=s,n.arrayToEnum=o=>{const u={};for(const c of o)u[c]=c;return u},n.getValidEnumValues=o=>{const u=n.objectKeys(o).filter(d=>typeof o[o[d]]!="number"),c={};for(const d of u)c[d]=o[d];return n.objectValues(c)},n.objectValues=o=>n.objectKeys(o).map(function(u){return o[u]}),n.objectKeys=typeof Object.keys=="function"?o=>Object.keys(o):o=>{const u=[];for(const c in o)Object.prototype.hasOwnProperty.call(o,c)&&u.push(c);return u},n.find=(o,u)=>{for(const c of o)if(u(c))return c},n.isInteger=typeof Number.isInteger=="function"?o=>Number.isInteger(o):o=>typeof o=="number"&&isFinite(o)&&Math.floor(o)===o;function a(o,u=" | "){return o.map(c=>typeof c=="string"?`'${c}'`:c).join(u)}n.joinValues=a,n.jsonStringifyReplacer=(o,u)=>typeof u=="bigint"?u.toString():u})(e=r.util||(r.util={})),function(n){n.mergeShapes=(i,s)=>({...i,...s})}(r.objectUtil||(r.objectUtil={})),r.ZodParsedType=e.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]);const t=n=>{switch(typeof n){case"undefined":return r.ZodParsedType.undefined;case"string":return r.ZodParsedType.string;case"number":return isNaN(n)?r.ZodParsedType.nan:r.ZodParsedType.number;case"boolean":return r.ZodParsedType.boolean;case"function":return r.ZodParsedType.function;case"bigint":return r.ZodParsedType.bigint;case"symbol":return r.ZodParsedType.symbol;case"object":return Array.isArray(n)?r.ZodParsedType.array:n===null?r.ZodParsedType.null:n.then&&typeof n.then=="function"&&n.catch&&typeof n.catch=="function"?r.ZodParsedType.promise:typeof Map<"u"&&n instanceof Map?r.ZodParsedType.map:typeof Set<"u"&&n instanceof Set?r.ZodParsedType.set:typeof Date<"u"&&n instanceof Date?r.ZodParsedType.date:r.ZodParsedType.object;default:return r.ZodParsedType.unknown}};r.getParsedType=t})(Br);var dt={};Object.defineProperty(dt,"__esModule",{value:!0});dt.ZodError=dt.quotelessJson=dt.ZodIssueCode=void 0;const zu=Br;dt.ZodIssueCode=zu.util.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);const Bg=r=>JSON.stringify(r,null,2).replace(/"([^"]+)":/g,"$1:");dt.quotelessJson=Bg;class Xi extends Error{constructor(e){super(),this.issues=[],this.addIssue=n=>{this.issues=[...this.issues,n]},this.addIssues=(n=[])=>{this.issues=[...this.issues,...n]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}get errors(){return this.issues}format(e){const t=e||function(s){return s.message},n={_errors:[]},i=s=>{for(const a of s.issues)if(a.code==="invalid_union")a.unionErrors.map(i);else if(a.code==="invalid_return_type")i(a.returnTypeError);else if(a.code==="invalid_arguments")i(a.argumentsError);else if(a.path.length===0)n._errors.push(t(a));else{let o=n,u=0;for(;u<a.path.length;){const c=a.path[u];u===a.path.length-1?(o[c]=o[c]||{_errors:[]},o[c]._errors.push(t(a))):o[c]=o[c]||{_errors:[]},o=o[c],u++}}};return i(this),n}toString(){return this.message}get message(){return JSON.stringify(this.issues,zu.util.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},n=[];for(const i of this.issues)i.path.length>0?(t[i.path[0]]=t[i.path[0]]||[],t[i.path[0]].push(e(i))):n.push(e(i));return{formErrors:n,fieldErrors:t}}get formErrors(){return this.flatten()}}dt.ZodError=Xi;Xi.create=r=>new Xi(r);Object.defineProperty(Jn,"__esModule",{value:!0});const Ot=Br,Me=dt,Zg=(r,e)=>{let t;switch(r.code){case Me.ZodIssueCode.invalid_type:r.received===Ot.ZodParsedType.undefined?t="Required":t=`Expected ${r.expected}, received ${r.received}`;break;case Me.ZodIssueCode.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(r.expected,Ot.util.jsonStringifyReplacer)}`;break;case Me.ZodIssueCode.unrecognized_keys:t=`Unrecognized key(s) in object: ${Ot.util.joinValues(r.keys,", ")}`;break;case Me.ZodIssueCode.invalid_union:t="Invalid input";break;case Me.ZodIssueCode.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${Ot.util.joinValues(r.options)}`;break;case Me.ZodIssueCode.invalid_enum_value:t=`Invalid enum value. Expected ${Ot.util.joinValues(r.options)}, received '${r.received}'`;break;case Me.ZodIssueCode.invalid_arguments:t="Invalid function arguments";break;case Me.ZodIssueCode.invalid_return_type:t="Invalid function return type";break;case Me.ZodIssueCode.invalid_date:t="Invalid date";break;case Me.ZodIssueCode.invalid_string:typeof r.validation=="object"?"includes"in r.validation?(t=`Invalid input: must include "${r.validation.includes}"`,typeof r.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${r.validation.position}`)):"startsWith"in r.validation?t=`Invalid input: must start with "${r.validation.startsWith}"`:"endsWith"in r.validation?t=`Invalid input: must end with "${r.validation.endsWith}"`:Ot.util.assertNever(r.validation):r.validation!=="regex"?t=`Invalid ${r.validation}`:t="Invalid";break;case Me.ZodIssueCode.too_small:r.type==="array"?t=`Array must contain ${r.exact?"exactly":r.inclusive?"at least":"more than"} ${r.minimum} element(s)`:r.type==="string"?t=`String must contain ${r.exact?"exactly":r.inclusive?"at least":"over"} ${r.minimum} character(s)`:r.type==="number"?t=`Number must be ${r.exact?"exactly equal to ":r.inclusive?"greater than or equal to ":"greater than "}${r.minimum}`:r.type==="date"?t=`Date must be ${r.exact?"exactly equal to ":r.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(r.minimum))}`:t="Invalid input";break;case Me.ZodIssueCode.too_big:r.type==="array"?t=`Array must contain ${r.exact?"exactly":r.inclusive?"at most":"less than"} ${r.maximum} element(s)`:r.type==="string"?t=`String must contain ${r.exact?"exactly":r.inclusive?"at most":"under"} ${r.maximum} character(s)`:r.type==="number"?t=`Number must be ${r.exact?"exactly":r.inclusive?"less than or equal to":"less than"} ${r.maximum}`:r.type==="bigint"?t=`BigInt must be ${r.exact?"exactly":r.inclusive?"less than or equal to":"less than"} ${r.maximum}`:r.type==="date"?t=`Date must be ${r.exact?"exactly":r.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(r.maximum))}`:t="Invalid input";break;case Me.ZodIssueCode.custom:t="Invalid input";break;case Me.ZodIssueCode.invalid_intersection_types:t="Intersection results could not be merged";break;case Me.ZodIssueCode.not_multiple_of:t=`Number must be a multiple of ${r.multipleOf}`;break;case Me.ZodIssueCode.not_finite:t="Number must be finite";break;default:t=e.defaultError,Ot.util.assertNever(r)}return{message:t}};Jn.default=Zg;var Vg=Ie&&Ie.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(lt,"__esModule",{value:!0});lt.getErrorMap=lt.setErrorMap=lt.defaultErrorMap=void 0;const Bu=Vg(Jn);lt.defaultErrorMap=Bu.default;let Zu=Bu.default;function Fg(r){Zu=r}lt.setErrorMap=Fg;function Kg(){return Zu}lt.getErrorMap=Kg;var Ls={};(function(r){var e=Ie&&Ie.__importDefault||function(b){return b&&b.__esModule?b:{default:b}};Object.defineProperty(r,"__esModule",{value:!0}),r.isAsync=r.isValid=r.isDirty=r.isAborted=r.OK=r.DIRTY=r.INVALID=r.ParseStatus=r.addIssueToContext=r.EMPTY_PATH=r.makeIssue=void 0;const t=lt,n=e(Jn),i=b=>{const{data:g,path:_,errorMaps:h,issueData:T}=b,j=[..._,...T.path||[]],S={...T,path:j};let R="";const M=h.filter(O=>!!O).slice().reverse();for(const O of M)R=O(S,{data:g,defaultError:R}).message;return{...T,path:j,message:T.message||R}};r.makeIssue=i,r.EMPTY_PATH=[];function s(b,g){const _=(0,r.makeIssue)({issueData:g,data:b.data,path:b.path,errorMaps:[b.common.contextualErrorMap,b.schemaErrorMap,(0,t.getErrorMap)(),n.default].filter(h=>!!h)});b.common.issues.push(_)}r.addIssueToContext=s;class a{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(g,_){const h=[];for(const T of _){if(T.status==="aborted")return r.INVALID;T.status==="dirty"&&g.dirty(),h.push(T.value)}return{status:g.value,value:h}}static async mergeObjectAsync(g,_){const h=[];for(const T of _)h.push({key:await T.key,value:await T.value});return a.mergeObjectSync(g,h)}static mergeObjectSync(g,_){const h={};for(const T of _){const{key:j,value:S}=T;if(j.status==="aborted"||S.status==="aborted")return r.INVALID;j.status==="dirty"&&g.dirty(),S.status==="dirty"&&g.dirty(),j.value!=="__proto__"&&(typeof S.value<"u"||T.alwaysSet)&&(h[j.value]=S.value)}return{status:g.value,value:h}}}r.ParseStatus=a,r.INVALID=Object.freeze({status:"aborted"});const o=b=>({status:"dirty",value:b});r.DIRTY=o;const u=b=>({status:"valid",value:b});r.OK=u;const c=b=>b.status==="aborted";r.isAborted=c;const d=b=>b.status==="dirty";r.isDirty=d;const f=b=>b.status==="valid";r.isValid=f;const m=b=>typeof Promise<"u"&&b instanceof Promise;r.isAsync=m})(Ls);var Vu={};Object.defineProperty(Vu,"__esModule",{value:!0});var Fu={},Ku={};(function(r){Object.defineProperty(r,"__esModule",{value:!0}),r.errorUtil=void 0,function(e){e.errToObj=t=>typeof t=="string"?{message:t}:t||{},e.toString=t=>typeof t=="string"?t:t==null?void 0:t.message}(r.errorUtil||(r.errorUtil={}))})(Ku);(function(r){Object.defineProperty(r,"__esModule",{value:!0}),r.date=r.boolean=r.bigint=r.array=r.any=r.coerce=r.ZodFirstPartyTypeKind=r.late=r.ZodSchema=r.Schema=r.custom=r.ZodReadonly=r.ZodPipeline=r.ZodBranded=r.BRAND=r.ZodNaN=r.ZodCatch=r.ZodDefault=r.ZodNullable=r.ZodOptional=r.ZodTransformer=r.ZodEffects=r.ZodPromise=r.ZodNativeEnum=r.ZodEnum=r.ZodLiteral=r.ZodLazy=r.ZodFunction=r.ZodSet=r.ZodMap=r.ZodRecord=r.ZodTuple=r.ZodIntersection=r.ZodDiscriminatedUnion=r.ZodUnion=r.ZodObject=r.ZodArray=r.ZodVoid=r.ZodNever=r.ZodUnknown=r.ZodAny=r.ZodNull=r.ZodUndefined=r.ZodSymbol=r.ZodDate=r.ZodBoolean=r.ZodBigInt=r.ZodNumber=r.ZodString=r.ZodType=void 0,r.NEVER=r.void=r.unknown=r.union=r.undefined=r.tuple=r.transformer=r.symbol=r.string=r.strictObject=r.set=r.record=r.promise=r.preprocess=r.pipeline=r.ostring=r.optional=r.onumber=r.oboolean=r.object=r.number=r.nullable=r.null=r.never=r.nativeEnum=r.nan=r.map=r.literal=r.lazy=r.intersection=r.instanceof=r.function=r.enum=r.effect=r.discriminatedUnion=void 0;const e=lt,t=Ku,n=Ls,i=Br,s=dt;class a{constructor(l,p,w,k){this._cachedPath=[],this.parent=l,this.data=p,this._path=w,this._key=k}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const o=(P,l)=>{if((0,n.isValid)(l))return{success:!0,data:l.value};if(!P.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const p=new s.ZodError(P.common.issues);return this._error=p,this._error}}};function u(P){if(!P)return{};const{errorMap:l,invalid_type_error:p,required_error:w,description:k}=P;if(l&&(p||w))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return l?{errorMap:l,description:k}:{errorMap:(H,$)=>H.code!=="invalid_type"?{message:$.defaultError}:typeof $.data>"u"?{message:w??$.defaultError}:{message:p??$.defaultError},description:k}}class c{constructor(l){this.spa=this.safeParseAsync,this._def=l,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this)}get description(){return this._def.description}_getType(l){return(0,i.getParsedType)(l.data)}_getOrReturnCtx(l,p){return p||{common:l.parent.common,data:l.data,parsedType:(0,i.getParsedType)(l.data),schemaErrorMap:this._def.errorMap,path:l.path,parent:l.parent}}_processInputParams(l){return{status:new n.ParseStatus,ctx:{common:l.parent.common,data:l.data,parsedType:(0,i.getParsedType)(l.data),schemaErrorMap:this._def.errorMap,path:l.path,parent:l.parent}}}_parseSync(l){const p=this._parse(l);if((0,n.isAsync)(p))throw new Error("Synchronous parse encountered promise.");return p}_parseAsync(l){const p=this._parse(l);return Promise.resolve(p)}parse(l,p){const w=this.safeParse(l,p);if(w.success)return w.data;throw w.error}safeParse(l,p){var w;const k={common:{issues:[],async:(w=p==null?void 0:p.async)!==null&&w!==void 0?w:!1,contextualErrorMap:p==null?void 0:p.errorMap},path:(p==null?void 0:p.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:l,parsedType:(0,i.getParsedType)(l)},x=this._parseSync({data:l,path:k.path,parent:k});return o(k,x)}async parseAsync(l,p){const w=await this.safeParseAsync(l,p);if(w.success)return w.data;throw w.error}async safeParseAsync(l,p){const w={common:{issues:[],contextualErrorMap:p==null?void 0:p.errorMap,async:!0},path:(p==null?void 0:p.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:l,parsedType:(0,i.getParsedType)(l)},k=this._parse({data:l,path:w.path,parent:w}),x=await((0,n.isAsync)(k)?k:Promise.resolve(k));return o(w,x)}refine(l,p){const w=k=>typeof p=="string"||typeof p>"u"?{message:p}:typeof p=="function"?p(k):p;return this._refinement((k,x)=>{const H=l(k),$=()=>x.addIssue({code:s.ZodIssueCode.custom,...w(k)});return typeof Promise<"u"&&H instanceof Promise?H.then(oe=>oe?!0:($(),!1)):H?!0:($(),!1)})}refinement(l,p){return this._refinement((w,k)=>l(w)?!0:(k.addIssue(typeof p=="function"?p(w,k):p),!1))}_refinement(l){return new fe({schema:this,typeName:Z.ZodEffects,effect:{type:"refinement",refinement:l}})}superRefine(l){return this._refinement(l)}optional(){return ve.create(this,this._def)}nullable(){return ye.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return G.create(this,this._def)}promise(){return ue.create(this,this._def)}or(l){return ie.create([this,l],this._def)}and(l){return Le.create(this,l,this._def)}transform(l){return new fe({...u(this._def),schema:this,typeName:Z.ZodEffects,effect:{type:"transform",transform:l}})}default(l){const p=typeof l=="function"?l:()=>l;return new _e({...u(this._def),innerType:this,defaultValue:p,typeName:Z.ZodDefault})}brand(){return new ee({typeName:Z.ZodBranded,type:this,...u(this._def)})}catch(l){const p=typeof l=="function"?l:()=>l;return new U({...u(this._def),innerType:this,catchValue:p,typeName:Z.ZodCatch})}describe(l){const p=this.constructor;return new p({...this._def,description:l})}pipe(l){return ne.create(this,l)}readonly(){return le.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}r.ZodType=c,r.Schema=c,r.ZodSchema=c;const d=/^c[^\s-]{8,}$/i,f=/^[a-z][a-z0-9]*$/,m=/^[0-9A-HJKMNP-TV-Z]{26}$/,b=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,g=/^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,_="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let h;const T=/^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/,j=/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,S=P=>P.precision?P.offset?new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${P.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`):new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${P.precision}}Z$`):P.precision===0?P.offset?new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$"):new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"):P.offset?new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$"):new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$");function R(P,l){return!!((l==="v4"||!l)&&T.test(P)||(l==="v6"||!l)&&j.test(P))}class M extends c{_parse(l){if(this._def.coerce&&(l.data=String(l.data)),this._getType(l)!==i.ZodParsedType.string){const x=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(x,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.string,received:x.parsedType}),n.INVALID}const w=new n.ParseStatus;let k;for(const x of this._def.checks)if(x.kind==="min")l.data.length<x.value&&(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{code:s.ZodIssueCode.too_small,minimum:x.value,type:"string",inclusive:!0,exact:!1,message:x.message}),w.dirty());else if(x.kind==="max")l.data.length>x.value&&(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{code:s.ZodIssueCode.too_big,maximum:x.value,type:"string",inclusive:!0,exact:!1,message:x.message}),w.dirty());else if(x.kind==="length"){const H=l.data.length>x.value,$=l.data.length<x.value;(H||$)&&(k=this._getOrReturnCtx(l,k),H?(0,n.addIssueToContext)(k,{code:s.ZodIssueCode.too_big,maximum:x.value,type:"string",inclusive:!0,exact:!0,message:x.message}):$&&(0,n.addIssueToContext)(k,{code:s.ZodIssueCode.too_small,minimum:x.value,type:"string",inclusive:!0,exact:!0,message:x.message}),w.dirty())}else if(x.kind==="email")g.test(l.data)||(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{validation:"email",code:s.ZodIssueCode.invalid_string,message:x.message}),w.dirty());else if(x.kind==="emoji")h||(h=new RegExp(_,"u")),h.test(l.data)||(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{validation:"emoji",code:s.ZodIssueCode.invalid_string,message:x.message}),w.dirty());else if(x.kind==="uuid")b.test(l.data)||(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{validation:"uuid",code:s.ZodIssueCode.invalid_string,message:x.message}),w.dirty());else if(x.kind==="cuid")d.test(l.data)||(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{validation:"cuid",code:s.ZodIssueCode.invalid_string,message:x.message}),w.dirty());else if(x.kind==="cuid2")f.test(l.data)||(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{validation:"cuid2",code:s.ZodIssueCode.invalid_string,message:x.message}),w.dirty());else if(x.kind==="ulid")m.test(l.data)||(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{validation:"ulid",code:s.ZodIssueCode.invalid_string,message:x.message}),w.dirty());else if(x.kind==="url")try{new URL(l.data)}catch{k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{validation:"url",code:s.ZodIssueCode.invalid_string,message:x.message}),w.dirty()}else x.kind==="regex"?(x.regex.lastIndex=0,x.regex.test(l.data)||(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{validation:"regex",code:s.ZodIssueCode.invalid_string,message:x.message}),w.dirty())):x.kind==="trim"?l.data=l.data.trim():x.kind==="includes"?l.data.includes(x.value,x.position)||(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{code:s.ZodIssueCode.invalid_string,validation:{includes:x.value,position:x.position},message:x.message}),w.dirty()):x.kind==="toLowerCase"?l.data=l.data.toLowerCase():x.kind==="toUpperCase"?l.data=l.data.toUpperCase():x.kind==="startsWith"?l.data.startsWith(x.value)||(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{code:s.ZodIssueCode.invalid_string,validation:{startsWith:x.value},message:x.message}),w.dirty()):x.kind==="endsWith"?l.data.endsWith(x.value)||(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{code:s.ZodIssueCode.invalid_string,validation:{endsWith:x.value},message:x.message}),w.dirty()):x.kind==="datetime"?S(x).test(l.data)||(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{code:s.ZodIssueCode.invalid_string,validation:"datetime",message:x.message}),w.dirty()):x.kind==="ip"?R(l.data,x.version)||(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{validation:"ip",code:s.ZodIssueCode.invalid_string,message:x.message}),w.dirty()):i.util.assertNever(x);return{status:w.value,value:l.data}}_regex(l,p,w){return this.refinement(k=>l.test(k),{validation:p,code:s.ZodIssueCode.invalid_string,...t.errorUtil.errToObj(w)})}_addCheck(l){return new M({...this._def,checks:[...this._def.checks,l]})}email(l){return this._addCheck({kind:"email",...t.errorUtil.errToObj(l)})}url(l){return this._addCheck({kind:"url",...t.errorUtil.errToObj(l)})}emoji(l){return this._addCheck({kind:"emoji",...t.errorUtil.errToObj(l)})}uuid(l){return this._addCheck({kind:"uuid",...t.errorUtil.errToObj(l)})}cuid(l){return this._addCheck({kind:"cuid",...t.errorUtil.errToObj(l)})}cuid2(l){return this._addCheck({kind:"cuid2",...t.errorUtil.errToObj(l)})}ulid(l){return this._addCheck({kind:"ulid",...t.errorUtil.errToObj(l)})}ip(l){return this._addCheck({kind:"ip",...t.errorUtil.errToObj(l)})}datetime(l){var p;return typeof l=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,message:l}):this._addCheck({kind:"datetime",precision:typeof(l==null?void 0:l.precision)>"u"?null:l==null?void 0:l.precision,offset:(p=l==null?void 0:l.offset)!==null&&p!==void 0?p:!1,...t.errorUtil.errToObj(l==null?void 0:l.message)})}regex(l,p){return this._addCheck({kind:"regex",regex:l,...t.errorUtil.errToObj(p)})}includes(l,p){return this._addCheck({kind:"includes",value:l,position:p==null?void 0:p.position,...t.errorUtil.errToObj(p==null?void 0:p.message)})}startsWith(l,p){return this._addCheck({kind:"startsWith",value:l,...t.errorUtil.errToObj(p)})}endsWith(l,p){return this._addCheck({kind:"endsWith",value:l,...t.errorUtil.errToObj(p)})}min(l,p){return this._addCheck({kind:"min",value:l,...t.errorUtil.errToObj(p)})}max(l,p){return this._addCheck({kind:"max",value:l,...t.errorUtil.errToObj(p)})}length(l,p){return this._addCheck({kind:"length",value:l,...t.errorUtil.errToObj(p)})}nonempty(l){return this.min(1,t.errorUtil.errToObj(l))}trim(){return new M({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new M({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new M({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(l=>l.kind==="datetime")}get isEmail(){return!!this._def.checks.find(l=>l.kind==="email")}get isURL(){return!!this._def.checks.find(l=>l.kind==="url")}get isEmoji(){return!!this._def.checks.find(l=>l.kind==="emoji")}get isUUID(){return!!this._def.checks.find(l=>l.kind==="uuid")}get isCUID(){return!!this._def.checks.find(l=>l.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(l=>l.kind==="cuid2")}get isULID(){return!!this._def.checks.find(l=>l.kind==="ulid")}get isIP(){return!!this._def.checks.find(l=>l.kind==="ip")}get minLength(){let l=null;for(const p of this._def.checks)p.kind==="min"&&(l===null||p.value>l)&&(l=p.value);return l}get maxLength(){let l=null;for(const p of this._def.checks)p.kind==="max"&&(l===null||p.value<l)&&(l=p.value);return l}}r.ZodString=M,M.create=P=>{var l;return new M({checks:[],typeName:Z.ZodString,coerce:(l=P==null?void 0:P.coerce)!==null&&l!==void 0?l:!1,...u(P)})};function O(P,l){const p=(P.toString().split(".")[1]||"").length,w=(l.toString().split(".")[1]||"").length,k=p>w?p:w,x=parseInt(P.toFixed(k).replace(".","")),H=parseInt(l.toFixed(k).replace(".",""));return x%H/Math.pow(10,k)}class C extends c{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(l){if(this._def.coerce&&(l.data=Number(l.data)),this._getType(l)!==i.ZodParsedType.number){const x=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(x,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.number,received:x.parsedType}),n.INVALID}let w;const k=new n.ParseStatus;for(const x of this._def.checks)x.kind==="int"?i.util.isInteger(l.data)||(w=this._getOrReturnCtx(l,w),(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.invalid_type,expected:"integer",received:"float",message:x.message}),k.dirty()):x.kind==="min"?(x.inclusive?l.data<x.value:l.data<=x.value)&&(w=this._getOrReturnCtx(l,w),(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.too_small,minimum:x.value,type:"number",inclusive:x.inclusive,exact:!1,message:x.message}),k.dirty()):x.kind==="max"?(x.inclusive?l.data>x.value:l.data>=x.value)&&(w=this._getOrReturnCtx(l,w),(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.too_big,maximum:x.value,type:"number",inclusive:x.inclusive,exact:!1,message:x.message}),k.dirty()):x.kind==="multipleOf"?O(l.data,x.value)!==0&&(w=this._getOrReturnCtx(l,w),(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.not_multiple_of,multipleOf:x.value,message:x.message}),k.dirty()):x.kind==="finite"?Number.isFinite(l.data)||(w=this._getOrReturnCtx(l,w),(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.not_finite,message:x.message}),k.dirty()):i.util.assertNever(x);return{status:k.value,value:l.data}}gte(l,p){return this.setLimit("min",l,!0,t.errorUtil.toString(p))}gt(l,p){return this.setLimit("min",l,!1,t.errorUtil.toString(p))}lte(l,p){return this.setLimit("max",l,!0,t.errorUtil.toString(p))}lt(l,p){return this.setLimit("max",l,!1,t.errorUtil.toString(p))}setLimit(l,p,w,k){return new C({...this._def,checks:[...this._def.checks,{kind:l,value:p,inclusive:w,message:t.errorUtil.toString(k)}]})}_addCheck(l){return new C({...this._def,checks:[...this._def.checks,l]})}int(l){return this._addCheck({kind:"int",message:t.errorUtil.toString(l)})}positive(l){return this._addCheck({kind:"min",value:0,inclusive:!1,message:t.errorUtil.toString(l)})}negative(l){return this._addCheck({kind:"max",value:0,inclusive:!1,message:t.errorUtil.toString(l)})}nonpositive(l){return this._addCheck({kind:"max",value:0,inclusive:!0,message:t.errorUtil.toString(l)})}nonnegative(l){return this._addCheck({kind:"min",value:0,inclusive:!0,message:t.errorUtil.toString(l)})}multipleOf(l,p){return this._addCheck({kind:"multipleOf",value:l,message:t.errorUtil.toString(p)})}finite(l){return this._addCheck({kind:"finite",message:t.errorUtil.toString(l)})}safe(l){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:t.errorUtil.toString(l)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:t.errorUtil.toString(l)})}get minValue(){let l=null;for(const p of this._def.checks)p.kind==="min"&&(l===null||p.value>l)&&(l=p.value);return l}get maxValue(){let l=null;for(const p of this._def.checks)p.kind==="max"&&(l===null||p.value<l)&&(l=p.value);return l}get isInt(){return!!this._def.checks.find(l=>l.kind==="int"||l.kind==="multipleOf"&&i.util.isInteger(l.value))}get isFinite(){let l=null,p=null;for(const w of this._def.checks){if(w.kind==="finite"||w.kind==="int"||w.kind==="multipleOf")return!0;w.kind==="min"?(p===null||w.value>p)&&(p=w.value):w.kind==="max"&&(l===null||w.value<l)&&(l=w.value)}return Number.isFinite(p)&&Number.isFinite(l)}}r.ZodNumber=C,C.create=P=>new C({checks:[],typeName:Z.ZodNumber,coerce:(P==null?void 0:P.coerce)||!1,...u(P)});class v extends c{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(l){if(this._def.coerce&&(l.data=BigInt(l.data)),this._getType(l)!==i.ZodParsedType.bigint){const x=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(x,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.bigint,received:x.parsedType}),n.INVALID}let w;const k=new n.ParseStatus;for(const x of this._def.checks)x.kind==="min"?(x.inclusive?l.data<x.value:l.data<=x.value)&&(w=this._getOrReturnCtx(l,w),(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.too_small,type:"bigint",minimum:x.value,inclusive:x.inclusive,message:x.message}),k.dirty()):x.kind==="max"?(x.inclusive?l.data>x.value:l.data>=x.value)&&(w=this._getOrReturnCtx(l,w),(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.too_big,type:"bigint",maximum:x.value,inclusive:x.inclusive,message:x.message}),k.dirty()):x.kind==="multipleOf"?l.data%x.value!==BigInt(0)&&(w=this._getOrReturnCtx(l,w),(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.not_multiple_of,multipleOf:x.value,message:x.message}),k.dirty()):i.util.assertNever(x);return{status:k.value,value:l.data}}gte(l,p){return this.setLimit("min",l,!0,t.errorUtil.toString(p))}gt(l,p){return this.setLimit("min",l,!1,t.errorUtil.toString(p))}lte(l,p){return this.setLimit("max",l,!0,t.errorUtil.toString(p))}lt(l,p){return this.setLimit("max",l,!1,t.errorUtil.toString(p))}setLimit(l,p,w,k){return new v({...this._def,checks:[...this._def.checks,{kind:l,value:p,inclusive:w,message:t.errorUtil.toString(k)}]})}_addCheck(l){return new v({...this._def,checks:[...this._def.checks,l]})}positive(l){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:t.errorUtil.toString(l)})}negative(l){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:t.errorUtil.toString(l)})}nonpositive(l){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:t.errorUtil.toString(l)})}nonnegative(l){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:t.errorUtil.toString(l)})}multipleOf(l,p){return this._addCheck({kind:"multipleOf",value:l,message:t.errorUtil.toString(p)})}get minValue(){let l=null;for(const p of this._def.checks)p.kind==="min"&&(l===null||p.value>l)&&(l=p.value);return l}get maxValue(){let l=null;for(const p of this._def.checks)p.kind==="max"&&(l===null||p.value<l)&&(l=p.value);return l}}r.ZodBigInt=v,v.create=P=>{var l;return new v({checks:[],typeName:Z.ZodBigInt,coerce:(l=P==null?void 0:P.coerce)!==null&&l!==void 0?l:!1,...u(P)})};class A extends c{_parse(l){if(this._def.coerce&&(l.data=!!l.data),this._getType(l)!==i.ZodParsedType.boolean){const w=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.boolean,received:w.parsedType}),n.INVALID}return(0,n.OK)(l.data)}}r.ZodBoolean=A,A.create=P=>new A({typeName:Z.ZodBoolean,coerce:(P==null?void 0:P.coerce)||!1,...u(P)});class I extends c{_parse(l){if(this._def.coerce&&(l.data=new Date(l.data)),this._getType(l)!==i.ZodParsedType.date){const x=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(x,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.date,received:x.parsedType}),n.INVALID}if(isNaN(l.data.getTime())){const x=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(x,{code:s.ZodIssueCode.invalid_date}),n.INVALID}const w=new n.ParseStatus;let k;for(const x of this._def.checks)x.kind==="min"?l.data.getTime()<x.value&&(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{code:s.ZodIssueCode.too_small,message:x.message,inclusive:!0,exact:!1,minimum:x.value,type:"date"}),w.dirty()):x.kind==="max"?l.data.getTime()>x.value&&(k=this._getOrReturnCtx(l,k),(0,n.addIssueToContext)(k,{code:s.ZodIssueCode.too_big,message:x.message,inclusive:!0,exact:!1,maximum:x.value,type:"date"}),w.dirty()):i.util.assertNever(x);return{status:w.value,value:new Date(l.data.getTime())}}_addCheck(l){return new I({...this._def,checks:[...this._def.checks,l]})}min(l,p){return this._addCheck({kind:"min",value:l.getTime(),message:t.errorUtil.toString(p)})}max(l,p){return this._addCheck({kind:"max",value:l.getTime(),message:t.errorUtil.toString(p)})}get minDate(){let l=null;for(const p of this._def.checks)p.kind==="min"&&(l===null||p.value>l)&&(l=p.value);return l!=null?new Date(l):null}get maxDate(){let l=null;for(const p of this._def.checks)p.kind==="max"&&(l===null||p.value<l)&&(l=p.value);return l!=null?new Date(l):null}}r.ZodDate=I,I.create=P=>new I({checks:[],coerce:(P==null?void 0:P.coerce)||!1,typeName:Z.ZodDate,...u(P)});class N extends c{_parse(l){if(this._getType(l)!==i.ZodParsedType.symbol){const w=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.symbol,received:w.parsedType}),n.INVALID}return(0,n.OK)(l.data)}}r.ZodSymbol=N,N.create=P=>new N({typeName:Z.ZodSymbol,...u(P)});class L extends c{_parse(l){if(this._getType(l)!==i.ZodParsedType.undefined){const w=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.undefined,received:w.parsedType}),n.INVALID}return(0,n.OK)(l.data)}}r.ZodUndefined=L,L.create=P=>new L({typeName:Z.ZodUndefined,...u(P)});class q extends c{_parse(l){if(this._getType(l)!==i.ZodParsedType.null){const w=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.null,received:w.parsedType}),n.INVALID}return(0,n.OK)(l.data)}}r.ZodNull=q,q.create=P=>new q({typeName:Z.ZodNull,...u(P)});class Y extends c{constructor(){super(...arguments),this._any=!0}_parse(l){return(0,n.OK)(l.data)}}r.ZodAny=Y,Y.create=P=>new Y({typeName:Z.ZodAny,...u(P)});class K extends c{constructor(){super(...arguments),this._unknown=!0}_parse(l){return(0,n.OK)(l.data)}}r.ZodUnknown=K,K.create=P=>new K({typeName:Z.ZodUnknown,...u(P)});class V extends c{_parse(l){const p=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(p,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.never,received:p.parsedType}),n.INVALID}}r.ZodNever=V,V.create=P=>new V({typeName:Z.ZodNever,...u(P)});class B extends c{_parse(l){if(this._getType(l)!==i.ZodParsedType.undefined){const w=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.void,received:w.parsedType}),n.INVALID}return(0,n.OK)(l.data)}}r.ZodVoid=B,B.create=P=>new B({typeName:Z.ZodVoid,...u(P)});class G extends c{_parse(l){const{ctx:p,status:w}=this._processInputParams(l),k=this._def;if(p.parsedType!==i.ZodParsedType.array)return(0,n.addIssueToContext)(p,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.array,received:p.parsedType}),n.INVALID;if(k.exactLength!==null){const H=p.data.length>k.exactLength.value,$=p.data.length<k.exactLength.value;(H||$)&&((0,n.addIssueToContext)(p,{code:H?s.ZodIssueCode.too_big:s.ZodIssueCode.too_small,minimum:$?k.exactLength.value:void 0,maximum:H?k.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:k.exactLength.message}),w.dirty())}if(k.minLength!==null&&p.data.length<k.minLength.value&&((0,n.addIssueToContext)(p,{code:s.ZodIssueCode.too_small,minimum:k.minLength.value,type:"array",inclusive:!0,exact:!1,message:k.minLength.message}),w.dirty()),k.maxLength!==null&&p.data.length>k.maxLength.value&&((0,n.addIssueToContext)(p,{code:s.ZodIssueCode.too_big,maximum:k.maxLength.value,type:"array",inclusive:!0,exact:!1,message:k.maxLength.message}),w.dirty()),p.common.async)return Promise.all([...p.data].map((H,$)=>k.type._parseAsync(new a(p,H,p.path,$)))).then(H=>n.ParseStatus.mergeArray(w,H));const x=[...p.data].map((H,$)=>k.type._parseSync(new a(p,H,p.path,$)));return n.ParseStatus.mergeArray(w,x)}get element(){return this._def.type}min(l,p){return new G({...this._def,minLength:{value:l,message:t.errorUtil.toString(p)}})}max(l,p){return new G({...this._def,maxLength:{value:l,message:t.errorUtil.toString(p)}})}length(l,p){return new G({...this._def,exactLength:{value:l,message:t.errorUtil.toString(p)}})}nonempty(l){return this.min(1,l)}}r.ZodArray=G,G.create=(P,l)=>new G({type:P,minLength:null,maxLength:null,exactLength:null,typeName:Z.ZodArray,...u(l)});function W(P){if(P instanceof te){const l={};for(const p in P.shape){const w=P.shape[p];l[p]=ve.create(W(w))}return new te({...P._def,shape:()=>l})}else return P instanceof G?new G({...P._def,type:W(P.element)}):P instanceof ve?ve.create(W(P.unwrap())):P instanceof ye?ye.create(W(P.unwrap())):P instanceof we?we.create(P.items.map(l=>W(l))):P}class te extends c{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const l=this._def.shape(),p=i.util.objectKeys(l);return this._cached={shape:l,keys:p}}_parse(l){if(this._getType(l)!==i.ZodParsedType.object){const se=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(se,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.object,received:se.parsedType}),n.INVALID}const{status:w,ctx:k}=this._processInputParams(l),{shape:x,keys:H}=this._getCached(),$=[];if(!(this._def.catchall instanceof V&&this._def.unknownKeys==="strip"))for(const se in k.data)H.includes(se)||$.push(se);const oe=[];for(const se of H){const de=x[se],Qe=k.data[se];oe.push({key:{status:"valid",value:se},value:de._parse(new a(k,Qe,k.path,se)),alwaysSet:se in k.data})}if(this._def.catchall instanceof V){const se=this._def.unknownKeys;if(se==="passthrough")for(const de of $)oe.push({key:{status:"valid",value:de},value:{status:"valid",value:k.data[de]}});else if(se==="strict")$.length>0&&((0,n.addIssueToContext)(k,{code:s.ZodIssueCode.unrecognized_keys,keys:$}),w.dirty());else if(se!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const se=this._def.catchall;for(const de of $){const Qe=k.data[de];oe.push({key:{status:"valid",value:de},value:se._parse(new a(k,Qe,k.path,de)),alwaysSet:de in k.data})}}return k.common.async?Promise.resolve().then(async()=>{const se=[];for(const de of oe){const Qe=await de.key;se.push({key:Qe,value:await de.value,alwaysSet:de.alwaysSet})}return se}).then(se=>n.ParseStatus.mergeObjectSync(w,se)):n.ParseStatus.mergeObjectSync(w,oe)}get shape(){return this._def.shape()}strict(l){return t.errorUtil.errToObj,new te({...this._def,unknownKeys:"strict",...l!==void 0?{errorMap:(p,w)=>{var k,x,H,$;const oe=(H=(x=(k=this._def).errorMap)===null||x===void 0?void 0:x.call(k,p,w).message)!==null&&H!==void 0?H:w.defaultError;return p.code==="unrecognized_keys"?{message:($=t.errorUtil.errToObj(l).message)!==null&&$!==void 0?$:oe}:{message:oe}}}:{}})}strip(){return new te({...this._def,unknownKeys:"strip"})}passthrough(){return new te({...this._def,unknownKeys:"passthrough"})}extend(l){return new te({...this._def,shape:()=>({...this._def.shape(),...l})})}merge(l){return new te({unknownKeys:l._def.unknownKeys,catchall:l._def.catchall,shape:()=>({...this._def.shape(),...l._def.shape()}),typeName:Z.ZodObject})}setKey(l,p){return this.augment({[l]:p})}catchall(l){return new te({...this._def,catchall:l})}pick(l){const p={};return i.util.objectKeys(l).forEach(w=>{l[w]&&this.shape[w]&&(p[w]=this.shape[w])}),new te({...this._def,shape:()=>p})}omit(l){const p={};return i.util.objectKeys(this.shape).forEach(w=>{l[w]||(p[w]=this.shape[w])}),new te({...this._def,shape:()=>p})}deepPartial(){return W(this)}partial(l){const p={};return i.util.objectKeys(this.shape).forEach(w=>{const k=this.shape[w];l&&!l[w]?p[w]=k:p[w]=k.optional()}),new te({...this._def,shape:()=>p})}required(l){const p={};return i.util.objectKeys(this.shape).forEach(w=>{if(l&&!l[w])p[w]=this.shape[w];else{let x=this.shape[w];for(;x instanceof ve;)x=x._def.innerType;p[w]=x}}),new te({...this._def,shape:()=>p})}keyof(){return F(i.util.objectKeys(this.shape))}}r.ZodObject=te,te.create=(P,l)=>new te({shape:()=>P,unknownKeys:"strip",catchall:V.create(),typeName:Z.ZodObject,...u(l)}),te.strictCreate=(P,l)=>new te({shape:()=>P,unknownKeys:"strict",catchall:V.create(),typeName:Z.ZodObject,...u(l)}),te.lazycreate=(P,l)=>new te({shape:P,unknownKeys:"strip",catchall:V.create(),typeName:Z.ZodObject,...u(l)});class ie extends c{_parse(l){const{ctx:p}=this._processInputParams(l),w=this._def.options;function k(x){for(const $ of x)if($.result.status==="valid")return $.result;for(const $ of x)if($.result.status==="dirty")return p.common.issues.push(...$.ctx.common.issues),$.result;const H=x.map($=>new s.ZodError($.ctx.common.issues));return(0,n.addIssueToContext)(p,{code:s.ZodIssueCode.invalid_union,unionErrors:H}),n.INVALID}if(p.common.async)return Promise.all(w.map(async x=>{const H={...p,common:{...p.common,issues:[]},parent:null};return{result:await x._parseAsync({data:p.data,path:p.path,parent:H}),ctx:H}})).then(k);{let x;const H=[];for(const oe of w){const se={...p,common:{...p.common,issues:[]},parent:null},de=oe._parseSync({data:p.data,path:p.path,parent:se});if(de.status==="valid")return de;de.status==="dirty"&&!x&&(x={result:de,ctx:se}),se.common.issues.length&&H.push(se.common.issues)}if(x)return p.common.issues.push(...x.ctx.common.issues),x.result;const $=H.map(oe=>new s.ZodError(oe));return(0,n.addIssueToContext)(p,{code:s.ZodIssueCode.invalid_union,unionErrors:$}),n.INVALID}}get options(){return this._def.options}}r.ZodUnion=ie,ie.create=(P,l)=>new ie({options:P,typeName:Z.ZodUnion,...u(l)});const ge=P=>P instanceof D?ge(P.schema):P instanceof fe?ge(P.innerType()):P instanceof z?[P.value]:P instanceof X?P.options:P instanceof ae?Object.keys(P.enum):P instanceof _e?ge(P._def.innerType):P instanceof L?[void 0]:P instanceof q?[null]:null;class J extends c{_parse(l){const{ctx:p}=this._processInputParams(l);if(p.parsedType!==i.ZodParsedType.object)return(0,n.addIssueToContext)(p,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.object,received:p.parsedType}),n.INVALID;const w=this.discriminator,k=p.data[w],x=this.optionsMap.get(k);return x?p.common.async?x._parseAsync({data:p.data,path:p.path,parent:p}):x._parseSync({data:p.data,path:p.path,parent:p}):((0,n.addIssueToContext)(p,{code:s.ZodIssueCode.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[w]}),n.INVALID)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(l,p,w){const k=new Map;for(const x of p){const H=ge(x.shape[l]);if(!H)throw new Error(`A discriminator value for key \`${l}\` could not be extracted from all schema options`);for(const $ of H){if(k.has($))throw new Error(`Discriminator property ${String(l)} has duplicate value ${String($)}`);k.set($,x)}}return new J({typeName:Z.ZodDiscriminatedUnion,discriminator:l,options:p,optionsMap:k,...u(w)})}}r.ZodDiscriminatedUnion=J;function je(P,l){const p=(0,i.getParsedType)(P),w=(0,i.getParsedType)(l);if(P===l)return{valid:!0,data:P};if(p===i.ZodParsedType.object&&w===i.ZodParsedType.object){const k=i.util.objectKeys(l),x=i.util.objectKeys(P).filter($=>k.indexOf($)!==-1),H={...P,...l};for(const $ of x){const oe=je(P[$],l[$]);if(!oe.valid)return{valid:!1};H[$]=oe.data}return{valid:!0,data:H}}else if(p===i.ZodParsedType.array&&w===i.ZodParsedType.array){if(P.length!==l.length)return{valid:!1};const k=[];for(let x=0;x<P.length;x++){const H=P[x],$=l[x],oe=je(H,$);if(!oe.valid)return{valid:!1};k.push(oe.data)}return{valid:!0,data:k}}else return p===i.ZodParsedType.date&&w===i.ZodParsedType.date&&+P==+l?{valid:!0,data:P}:{valid:!1}}class Le extends c{_parse(l){const{status:p,ctx:w}=this._processInputParams(l),k=(x,H)=>{if((0,n.isAborted)(x)||(0,n.isAborted)(H))return n.INVALID;const $=je(x.value,H.value);return $.valid?(((0,n.isDirty)(x)||(0,n.isDirty)(H))&&p.dirty(),{status:p.value,value:$.data}):((0,n.addIssueToContext)(w,{code:s.ZodIssueCode.invalid_intersection_types}),n.INVALID)};return w.common.async?Promise.all([this._def.left._parseAsync({data:w.data,path:w.path,parent:w}),this._def.right._parseAsync({data:w.data,path:w.path,parent:w})]).then(([x,H])=>k(x,H)):k(this._def.left._parseSync({data:w.data,path:w.path,parent:w}),this._def.right._parseSync({data:w.data,path:w.path,parent:w}))}}r.ZodIntersection=Le,Le.create=(P,l,p)=>new Le({left:P,right:l,typeName:Z.ZodIntersection,...u(p)});class we extends c{_parse(l){const{status:p,ctx:w}=this._processInputParams(l);if(w.parsedType!==i.ZodParsedType.array)return(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.array,received:w.parsedType}),n.INVALID;if(w.data.length<this._def.items.length)return(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),n.INVALID;!this._def.rest&&w.data.length>this._def.items.length&&((0,n.addIssueToContext)(w,{code:s.ZodIssueCode.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),p.dirty());const x=[...w.data].map((H,$)=>{const oe=this._def.items[$]||this._def.rest;return oe?oe._parse(new a(w,H,w.path,$)):null}).filter(H=>!!H);return w.common.async?Promise.all(x).then(H=>n.ParseStatus.mergeArray(p,H)):n.ParseStatus.mergeArray(p,x)}get items(){return this._def.items}rest(l){return new we({...this._def,rest:l})}}r.ZodTuple=we,we.create=(P,l)=>{if(!Array.isArray(P))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new we({items:P,typeName:Z.ZodTuple,rest:null,...u(l)})};class Ke extends c{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(l){const{status:p,ctx:w}=this._processInputParams(l);if(w.parsedType!==i.ZodParsedType.object)return(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.object,received:w.parsedType}),n.INVALID;const k=[],x=this._def.keyType,H=this._def.valueType;for(const $ in w.data)k.push({key:x._parse(new a(w,$,w.path,$)),value:H._parse(new a(w,w.data[$],w.path,$))});return w.common.async?n.ParseStatus.mergeObjectAsync(p,k):n.ParseStatus.mergeObjectSync(p,k)}get element(){return this._def.valueType}static create(l,p,w){return p instanceof c?new Ke({keyType:l,valueType:p,typeName:Z.ZodRecord,...u(w)}):new Ke({keyType:M.create(),valueType:l,typeName:Z.ZodRecord,...u(p)})}}r.ZodRecord=Ke;class Q extends c{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(l){const{status:p,ctx:w}=this._processInputParams(l);if(w.parsedType!==i.ZodParsedType.map)return(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.map,received:w.parsedType}),n.INVALID;const k=this._def.keyType,x=this._def.valueType,H=[...w.data.entries()].map(([$,oe],se)=>({key:k._parse(new a(w,$,w.path,[se,"key"])),value:x._parse(new a(w,oe,w.path,[se,"value"]))}));if(w.common.async){const $=new Map;return Promise.resolve().then(async()=>{for(const oe of H){const se=await oe.key,de=await oe.value;if(se.status==="aborted"||de.status==="aborted")return n.INVALID;(se.status==="dirty"||de.status==="dirty")&&p.dirty(),$.set(se.value,de.value)}return{status:p.value,value:$}})}else{const $=new Map;for(const oe of H){const se=oe.key,de=oe.value;if(se.status==="aborted"||de.status==="aborted")return n.INVALID;(se.status==="dirty"||de.status==="dirty")&&p.dirty(),$.set(se.value,de.value)}return{status:p.value,value:$}}}}r.ZodMap=Q,Q.create=(P,l,p)=>new Q({valueType:l,keyType:P,typeName:Z.ZodMap,...u(p)});class y extends c{_parse(l){const{status:p,ctx:w}=this._processInputParams(l);if(w.parsedType!==i.ZodParsedType.set)return(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.set,received:w.parsedType}),n.INVALID;const k=this._def;k.minSize!==null&&w.data.size<k.minSize.value&&((0,n.addIssueToContext)(w,{code:s.ZodIssueCode.too_small,minimum:k.minSize.value,type:"set",inclusive:!0,exact:!1,message:k.minSize.message}),p.dirty()),k.maxSize!==null&&w.data.size>k.maxSize.value&&((0,n.addIssueToContext)(w,{code:s.ZodIssueCode.too_big,maximum:k.maxSize.value,type:"set",inclusive:!0,exact:!1,message:k.maxSize.message}),p.dirty());const x=this._def.valueType;function H(oe){const se=new Set;for(const de of oe){if(de.status==="aborted")return n.INVALID;de.status==="dirty"&&p.dirty(),se.add(de.value)}return{status:p.value,value:se}}const $=[...w.data.values()].map((oe,se)=>x._parse(new a(w,oe,w.path,se)));return w.common.async?Promise.all($).then(oe=>H(oe)):H($)}min(l,p){return new y({...this._def,minSize:{value:l,message:t.errorUtil.toString(p)}})}max(l,p){return new y({...this._def,maxSize:{value:l,message:t.errorUtil.toString(p)}})}size(l,p){return this.min(l,p).max(l,p)}nonempty(l){return this.min(1,l)}}r.ZodSet=y,y.create=(P,l)=>new y({valueType:P,minSize:null,maxSize:null,typeName:Z.ZodSet,...u(l)});class E extends c{constructor(){super(...arguments),this.validate=this.implement}_parse(l){const{ctx:p}=this._processInputParams(l);if(p.parsedType!==i.ZodParsedType.function)return(0,n.addIssueToContext)(p,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.function,received:p.parsedType}),n.INVALID;function w($,oe){return(0,n.makeIssue)({data:$,path:p.path,errorMaps:[p.common.contextualErrorMap,p.schemaErrorMap,(0,e.getErrorMap)(),e.defaultErrorMap].filter(se=>!!se),issueData:{code:s.ZodIssueCode.invalid_arguments,argumentsError:oe}})}function k($,oe){return(0,n.makeIssue)({data:$,path:p.path,errorMaps:[p.common.contextualErrorMap,p.schemaErrorMap,(0,e.getErrorMap)(),e.defaultErrorMap].filter(se=>!!se),issueData:{code:s.ZodIssueCode.invalid_return_type,returnTypeError:oe}})}const x={errorMap:p.common.contextualErrorMap},H=p.data;if(this._def.returns instanceof ue){const $=this;return(0,n.OK)(async function(...oe){const se=new s.ZodError([]),de=await $._def.args.parseAsync(oe,x).catch(di=>{throw se.addIssue(w(oe,di)),se}),Qe=await Reflect.apply(H,this,de);return await $._def.returns._def.type.parseAsync(Qe,x).catch(di=>{throw se.addIssue(k(Qe,di)),se})})}else{const $=this;return(0,n.OK)(function(...oe){const se=$._def.args.safeParse(oe,x);if(!se.success)throw new s.ZodError([w(oe,se.error)]);const de=Reflect.apply(H,this,se.data),Qe=$._def.returns.safeParse(de,x);if(!Qe.success)throw new s.ZodError([k(de,Qe.error)]);return Qe.data})}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...l){return new E({...this._def,args:we.create(l).rest(K.create())})}returns(l){return new E({...this._def,returns:l})}implement(l){return this.parse(l)}strictImplement(l){return this.parse(l)}static create(l,p,w){return new E({args:l||we.create([]).rest(K.create()),returns:p||K.create(),typeName:Z.ZodFunction,...u(w)})}}r.ZodFunction=E;class D extends c{get schema(){return this._def.getter()}_parse(l){const{ctx:p}=this._processInputParams(l);return this._def.getter()._parse({data:p.data,path:p.path,parent:p})}}r.ZodLazy=D,D.create=(P,l)=>new D({getter:P,typeName:Z.ZodLazy,...u(l)});class z extends c{_parse(l){if(l.data!==this._def.value){const p=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(p,{received:p.data,code:s.ZodIssueCode.invalid_literal,expected:this._def.value}),n.INVALID}return{status:"valid",value:l.data}}get value(){return this._def.value}}r.ZodLiteral=z,z.create=(P,l)=>new z({value:P,typeName:Z.ZodLiteral,...u(l)});function F(P,l){return new X({values:P,typeName:Z.ZodEnum,...u(l)})}class X extends c{_parse(l){if(typeof l.data!="string"){const p=this._getOrReturnCtx(l),w=this._def.values;return(0,n.addIssueToContext)(p,{expected:i.util.joinValues(w),received:p.parsedType,code:s.ZodIssueCode.invalid_type}),n.INVALID}if(this._def.values.indexOf(l.data)===-1){const p=this._getOrReturnCtx(l),w=this._def.values;return(0,n.addIssueToContext)(p,{received:p.data,code:s.ZodIssueCode.invalid_enum_value,options:w}),n.INVALID}return(0,n.OK)(l.data)}get options(){return this._def.values}get enum(){const l={};for(const p of this._def.values)l[p]=p;return l}get Values(){const l={};for(const p of this._def.values)l[p]=p;return l}get Enum(){const l={};for(const p of this._def.values)l[p]=p;return l}extract(l){return X.create(l)}exclude(l){return X.create(this.options.filter(p=>!l.includes(p)))}}r.ZodEnum=X,X.create=F;class ae extends c{_parse(l){const p=i.util.getValidEnumValues(this._def.values),w=this._getOrReturnCtx(l);if(w.parsedType!==i.ZodParsedType.string&&w.parsedType!==i.ZodParsedType.number){const k=i.util.objectValues(p);return(0,n.addIssueToContext)(w,{expected:i.util.joinValues(k),received:w.parsedType,code:s.ZodIssueCode.invalid_type}),n.INVALID}if(p.indexOf(l.data)===-1){const k=i.util.objectValues(p);return(0,n.addIssueToContext)(w,{received:w.data,code:s.ZodIssueCode.invalid_enum_value,options:k}),n.INVALID}return(0,n.OK)(l.data)}get enum(){return this._def.values}}r.ZodNativeEnum=ae,ae.create=(P,l)=>new ae({values:P,typeName:Z.ZodNativeEnum,...u(l)});class ue extends c{unwrap(){return this._def.type}_parse(l){const{ctx:p}=this._processInputParams(l);if(p.parsedType!==i.ZodParsedType.promise&&p.common.async===!1)return(0,n.addIssueToContext)(p,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.promise,received:p.parsedType}),n.INVALID;const w=p.parsedType===i.ZodParsedType.promise?p.data:Promise.resolve(p.data);return(0,n.OK)(w.then(k=>this._def.type.parseAsync(k,{path:p.path,errorMap:p.common.contextualErrorMap})))}}r.ZodPromise=ue,ue.create=(P,l)=>new ue({type:P,typeName:Z.ZodPromise,...u(l)});class fe extends c{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===Z.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(l){const{status:p,ctx:w}=this._processInputParams(l),k=this._def.effect||null,x={addIssue:H=>{(0,n.addIssueToContext)(w,H),H.fatal?p.abort():p.dirty()},get path(){return w.path}};if(x.addIssue=x.addIssue.bind(x),k.type==="preprocess"){const H=k.transform(w.data,x);return w.common.issues.length?{status:"dirty",value:w.data}:w.common.async?Promise.resolve(H).then($=>this._def.schema._parseAsync({data:$,path:w.path,parent:w})):this._def.schema._parseSync({data:H,path:w.path,parent:w})}if(k.type==="refinement"){const H=$=>{const oe=k.refinement($,x);if(w.common.async)return Promise.resolve(oe);if(oe instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return $};if(w.common.async===!1){const $=this._def.schema._parseSync({data:w.data,path:w.path,parent:w});return $.status==="aborted"?n.INVALID:($.status==="dirty"&&p.dirty(),H($.value),{status:p.value,value:$.value})}else return this._def.schema._parseAsync({data:w.data,path:w.path,parent:w}).then($=>$.status==="aborted"?n.INVALID:($.status==="dirty"&&p.dirty(),H($.value).then(()=>({status:p.value,value:$.value}))))}if(k.type==="transform")if(w.common.async===!1){const H=this._def.schema._parseSync({data:w.data,path:w.path,parent:w});if(!(0,n.isValid)(H))return H;const $=k.transform(H.value,x);if($ instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:p.value,value:$}}else return this._def.schema._parseAsync({data:w.data,path:w.path,parent:w}).then(H=>(0,n.isValid)(H)?Promise.resolve(k.transform(H.value,x)).then($=>({status:p.value,value:$})):H);i.util.assertNever(k)}}r.ZodEffects=fe,r.ZodTransformer=fe,fe.create=(P,l,p)=>new fe({schema:P,typeName:Z.ZodEffects,effect:l,...u(p)}),fe.createWithPreprocess=(P,l,p)=>new fe({schema:l,effect:{type:"preprocess",transform:P},typeName:Z.ZodEffects,...u(p)});class ve extends c{_parse(l){return this._getType(l)===i.ZodParsedType.undefined?(0,n.OK)(void 0):this._def.innerType._parse(l)}unwrap(){return this._def.innerType}}r.ZodOptional=ve,ve.create=(P,l)=>new ve({innerType:P,typeName:Z.ZodOptional,...u(l)});class ye extends c{_parse(l){return this._getType(l)===i.ZodParsedType.null?(0,n.OK)(null):this._def.innerType._parse(l)}unwrap(){return this._def.innerType}}r.ZodNullable=ye,ye.create=(P,l)=>new ye({innerType:P,typeName:Z.ZodNullable,...u(l)});class _e extends c{_parse(l){const{ctx:p}=this._processInputParams(l);let w=p.data;return p.parsedType===i.ZodParsedType.undefined&&(w=this._def.defaultValue()),this._def.innerType._parse({data:w,path:p.path,parent:p})}removeDefault(){return this._def.innerType}}r.ZodDefault=_e,_e.create=(P,l)=>new _e({innerType:P,typeName:Z.ZodDefault,defaultValue:typeof l.default=="function"?l.default:()=>l.default,...u(l)});class U extends c{_parse(l){const{ctx:p}=this._processInputParams(l),w={...p,common:{...p.common,issues:[]}},k=this._def.innerType._parse({data:w.data,path:w.path,parent:{...w}});return(0,n.isAsync)(k)?k.then(x=>({status:"valid",value:x.status==="valid"?x.value:this._def.catchValue({get error(){return new s.ZodError(w.common.issues)},input:w.data})})):{status:"valid",value:k.status==="valid"?k.value:this._def.catchValue({get error(){return new s.ZodError(w.common.issues)},input:w.data})}}removeCatch(){return this._def.innerType}}r.ZodCatch=U,U.create=(P,l)=>new U({innerType:P,typeName:Z.ZodCatch,catchValue:typeof l.catch=="function"?l.catch:()=>l.catch,...u(l)});class re extends c{_parse(l){if(this._getType(l)!==i.ZodParsedType.nan){const w=this._getOrReturnCtx(l);return(0,n.addIssueToContext)(w,{code:s.ZodIssueCode.invalid_type,expected:i.ZodParsedType.nan,received:w.parsedType}),n.INVALID}return{status:"valid",value:l.data}}}r.ZodNaN=re,re.create=P=>new re({typeName:Z.ZodNaN,...u(P)}),r.BRAND=Symbol("zod_brand");class ee extends c{_parse(l){const{ctx:p}=this._processInputParams(l),w=p.data;return this._def.type._parse({data:w,path:p.path,parent:p})}unwrap(){return this._def.type}}r.ZodBranded=ee;class ne extends c{_parse(l){const{status:p,ctx:w}=this._processInputParams(l);if(w.common.async)return(async()=>{const x=await this._def.in._parseAsync({data:w.data,path:w.path,parent:w});return x.status==="aborted"?n.INVALID:x.status==="dirty"?(p.dirty(),(0,n.DIRTY)(x.value)):this._def.out._parseAsync({data:x.value,path:w.path,parent:w})})();{const k=this._def.in._parseSync({data:w.data,path:w.path,parent:w});return k.status==="aborted"?n.INVALID:k.status==="dirty"?(p.dirty(),{status:"dirty",value:k.value}):this._def.out._parseSync({data:k.value,path:w.path,parent:w})}}static create(l,p){return new ne({in:l,out:p,typeName:Z.ZodPipeline})}}r.ZodPipeline=ne;class le extends c{_parse(l){const p=this._def.innerType._parse(l);return(0,n.isValid)(p)&&(p.value=Object.freeze(p.value)),p}}r.ZodReadonly=le,le.create=(P,l)=>new le({innerType:P,typeName:Z.ZodReadonly,...u(l)});const me=(P,l={},p)=>P?Y.create().superRefine((w,k)=>{var x,H;if(!P(w)){const $=typeof l=="function"?l(w):typeof l=="string"?{message:l}:l,oe=(H=(x=$.fatal)!==null&&x!==void 0?x:p)!==null&&H!==void 0?H:!0,se=typeof $=="string"?{message:$}:$;k.addIssue({code:"custom",...se,fatal:oe})}}):Y.create();r.custom=me,r.late={object:te.lazycreate};var Z;(function(P){P.ZodString="ZodString",P.ZodNumber="ZodNumber",P.ZodNaN="ZodNaN",P.ZodBigInt="ZodBigInt",P.ZodBoolean="ZodBoolean",P.ZodDate="ZodDate",P.ZodSymbol="ZodSymbol",P.ZodUndefined="ZodUndefined",P.ZodNull="ZodNull",P.ZodAny="ZodAny",P.ZodUnknown="ZodUnknown",P.ZodNever="ZodNever",P.ZodVoid="ZodVoid",P.ZodArray="ZodArray",P.ZodObject="ZodObject",P.ZodUnion="ZodUnion",P.ZodDiscriminatedUnion="ZodDiscriminatedUnion",P.ZodIntersection="ZodIntersection",P.ZodTuple="ZodTuple",P.ZodRecord="ZodRecord",P.ZodMap="ZodMap",P.ZodSet="ZodSet",P.ZodFunction="ZodFunction",P.ZodLazy="ZodLazy",P.ZodLiteral="ZodLiteral",P.ZodEnum="ZodEnum",P.ZodEffects="ZodEffects",P.ZodNativeEnum="ZodNativeEnum",P.ZodOptional="ZodOptional",P.ZodNullable="ZodNullable",P.ZodDefault="ZodDefault",P.ZodCatch="ZodCatch",P.ZodPromise="ZodPromise",P.ZodBranded="ZodBranded",P.ZodPipeline="ZodPipeline",P.ZodReadonly="ZodReadonly"})(Z=r.ZodFirstPartyTypeKind||(r.ZodFirstPartyTypeKind={}));const he=(P,l={message:`Input not instance of ${P.name}`})=>(0,r.custom)(p=>p instanceof P,l);r.instanceof=he;const Ce=M.create;r.string=Ce;const be=C.create;r.number=be;const Xe=re.create;r.nan=Xe;const Ue=v.create;r.bigint=Ue;const st=A.create;r.boolean=st;const sr=I.create;r.date=sr;const Gu=N.create;r.symbol=Gu;const Yu=L.create;r.undefined=Yu;const Ju=q.create;r.null=Ju;const Xu=Y.create;r.any=Xu;const Qu=K.create;r.unknown=Qu;const ec=V.create;r.never=ec;const tc=B.create;r.void=tc;const rc=G.create;r.array=rc;const nc=te.create;r.object=nc;const ic=te.strictCreate;r.strictObject=ic;const sc=ie.create;r.union=sc;const ac=J.create;r.discriminatedUnion=ac;const oc=Le.create;r.intersection=oc;const uc=we.create;r.tuple=uc;const cc=Ke.create;r.record=cc;const lc=Q.create;r.map=lc;const dc=y.create;r.set=dc;const fc=E.create;r.function=fc;const hc=D.create;r.lazy=hc;const pc=z.create;r.literal=pc;const mc=X.create;r.enum=mc;const gc=ae.create;r.nativeEnum=gc;const yc=ue.create;r.promise=yc;const Ms=fe.create;r.effect=Ms,r.transformer=Ms;const bc=ve.create;r.optional=bc;const vc=ye.create;r.nullable=vc;const wc=fe.createWithPreprocess;r.preprocess=wc;const _c=ne.create;r.pipeline=_c;const Ic=()=>Ce().optional();r.ostring=Ic;const Ac=()=>be().optional();r.onumber=Ac;const Ec=()=>st().optional();r.oboolean=Ec,r.coerce={string:P=>M.create({...P,coerce:!0}),number:P=>C.create({...P,coerce:!0}),boolean:P=>A.create({...P,coerce:!0}),bigint:P=>v.create({...P,coerce:!0}),date:P=>I.create({...P,coerce:!0})},r.NEVER=n.INVALID})(Fu);(function(r){var e=Ie&&Ie.__createBinding||(Object.create?function(n,i,s,a){a===void 0&&(a=s),Object.defineProperty(n,a,{enumerable:!0,get:function(){return i[s]}})}:function(n,i,s,a){a===void 0&&(a=s),n[a]=i[s]}),t=Ie&&Ie.__exportStar||function(n,i){for(var s in n)s!=="default"&&!Object.prototype.hasOwnProperty.call(i,s)&&e(i,n,s)};Object.defineProperty(r,"__esModule",{value:!0}),t(lt,r),t(Ls,r),t(Vu,r),t(Br,r),t(Fu,r),t(dt,r)})(Ji);(function(r){var e=Ie&&Ie.__createBinding||(Object.create?function(a,o,u,c){c===void 0&&(c=u),Object.defineProperty(a,c,{enumerable:!0,get:function(){return o[u]}})}:function(a,o,u,c){c===void 0&&(c=u),a[c]=o[u]}),t=Ie&&Ie.__setModuleDefault||(Object.create?function(a,o){Object.defineProperty(a,"default",{enumerable:!0,value:o})}:function(a,o){a.default=o}),n=Ie&&Ie.__importStar||function(a){if(a&&a.__esModule)return a;var o={};if(a!=null)for(var u in a)u!=="default"&&Object.prototype.hasOwnProperty.call(a,u)&&e(o,a,u);return t(o,a),o},i=Ie&&Ie.__exportStar||function(a,o){for(var u in a)u!=="default"&&!Object.prototype.hasOwnProperty.call(o,u)&&e(o,a,u)};Object.defineProperty(r,"__esModule",{value:!0}),r.z=void 0;const s=n(Ji);r.z=s,i(Ji,r),r.default=s})(Yn);var Xn={};Object.defineProperty(Xn,"__esModule",{value:!0});Xn.parseAnyDef=void 0;function qg(){return{}}Xn.parseAnyDef=qg;var ur={},it={};Object.defineProperty(it,"__esModule",{value:!0});it.setResponseValueAndErrors=it.addErrorMessage=void 0;function qu(r,e,t,n){n!=null&&n.errorMessages&&t&&(r.errorMessage=Object.assign(Object.assign({},r.errorMessage),{[e]:t}))}it.addErrorMessage=qu;function Hg(r,e,t,n,i){r[e]=t,qu(r,e,n,i)}it.setResponseValueAndErrors=Hg;var qa;function Wg(){if(qa)return ur;qa=1,Object.defineProperty(ur,"__esModule",{value:!0}),ur.parseArrayDef=void 0;const r=Yn,e=it,t=De();function n(i,s){var a,o;const u={type:"array"};return((o=(a=i.type)===null||a===void 0?void 0:a._def)===null||o===void 0?void 0:o.typeName)!==r.ZodFirstPartyTypeKind.ZodAny&&(u.items=(0,t.parseDef)(i.type._def,Object.assign(Object.assign({},s),{currentPath:[...s.currentPath,"items"]}))),i.minLength&&(0,e.setResponseValueAndErrors)(u,"minItems",i.minLength.value,i.minLength.message,s),i.maxLength&&(0,e.setResponseValueAndErrors)(u,"maxItems",i.maxLength.value,i.maxLength.message,s),i.exactLength&&((0,e.setResponseValueAndErrors)(u,"minItems",i.exactLength.value,i.exactLength.message,s),(0,e.setResponseValueAndErrors)(u,"maxItems",i.exactLength.value,i.exactLength.message,s)),u}return ur.parseArrayDef=n,ur}var Qn={};Object.defineProperty(Qn,"__esModule",{value:!0});Qn.parseBigintDef=void 0;const xt=it;function Gg(r,e){const t={type:"integer",format:"int64"};if(!r.checks)return t;for(const n of r.checks)switch(n.kind){case"min":e.target==="jsonSchema7"?n.inclusive?(0,xt.setResponseValueAndErrors)(t,"minimum",n.value,n.message,e):(0,xt.setResponseValueAndErrors)(t,"exclusiveMinimum",n.value,n.message,e):(n.inclusive||(t.exclusiveMinimum=!0),(0,xt.setResponseValueAndErrors)(t,"minimum",n.value,n.message,e));break;case"max":e.target==="jsonSchema7"?n.inclusive?(0,xt.setResponseValueAndErrors)(t,"maximum",n.value,n.message,e):(0,xt.setResponseValueAndErrors)(t,"exclusiveMaximum",n.value,n.message,e):(n.inclusive||(t.exclusiveMaximum=!0),(0,xt.setResponseValueAndErrors)(t,"maximum",n.value,n.message,e));break;case"multipleOf":(0,xt.setResponseValueAndErrors)(t,"multipleOf",n.value,n.message,e);break}return t}Qn.parseBigintDef=Gg;var ei={};Object.defineProperty(ei,"__esModule",{value:!0});ei.parseBooleanDef=void 0;function Yg(){return{type:"boolean"}}ei.parseBooleanDef=Yg;var cr={},Ha;function Jg(){if(Ha)return cr;Ha=1,Object.defineProperty(cr,"__esModule",{value:!0}),cr.parseBrandedDef=void 0;const r=De();function e(t,n){return(0,r.parseDef)(t.type._def,n)}return cr.parseBrandedDef=e,cr}var lr={},Wa;function Xg(){if(Wa)return lr;Wa=1,Object.defineProperty(lr,"__esModule",{value:!0}),lr.parseCatchDef=void 0;const r=De(),e=(t,n)=>(0,r.parseDef)(t.innerType._def,n);return lr.parseCatchDef=e,lr}var ti={};Object.defineProperty(ti,"__esModule",{value:!0});ti.parseDateDef=void 0;const Ga=it;function Qg(r,e){return e.dateStrategy=="integer"?ey(r,e):{type:"string",format:"date-time"}}ti.parseDateDef=Qg;const ey=(r,e)=>{const t={type:"integer",format:"unix-time"};for(const n of r.checks)switch(n.kind){case"min":e.target==="jsonSchema7"&&(0,Ga.setResponseValueAndErrors)(t,"minimum",n.value,n.message,e);break;case"max":e.target==="jsonSchema7"&&(0,Ga.setResponseValueAndErrors)(t,"maximum",n.value,n.message,e);break}return t};var dr={},Ya;function ty(){if(Ya)return dr;Ya=1,Object.defineProperty(dr,"__esModule",{value:!0}),dr.parseDefaultDef=void 0;const r=De();function e(t,n){return Object.assign(Object.assign({},(0,r.parseDef)(t.innerType._def,n)),{default:t.defaultValue()})}return dr.parseDefaultDef=e,dr}var fr={},Ja;function ry(){if(Ja)return fr;Ja=1,Object.defineProperty(fr,"__esModule",{value:!0}),fr.parseEffectsDef=void 0;const r=De();function e(t,n){return n.effectStrategy==="input"?(0,r.parseDef)(t.schema._def,n):{}}return fr.parseEffectsDef=e,fr}var ri={};Object.defineProperty(ri,"__esModule",{value:!0});ri.parseEnumDef=void 0;function ny(r){return{type:"string",enum:r.values}}ri.parseEnumDef=ny;var hr={},Xa;function iy(){if(Xa)return hr;Xa=1;var r=Ie&&Ie.__rest||function(i,s){var a={};for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&s.indexOf(o)<0&&(a[o]=i[o]);if(i!=null&&typeof Object.getOwnPropertySymbols=="function")for(var u=0,o=Object.getOwnPropertySymbols(i);u<o.length;u++)s.indexOf(o[u])<0&&Object.prototype.propertyIsEnumerable.call(i,o[u])&&(a[o[u]]=i[o[u]]);return a};Object.defineProperty(hr,"__esModule",{value:!0}),hr.parseIntersectionDef=void 0;const e=De(),t=i=>"type"in i&&i.type==="string"?!1:"allOf"in i;function n(i,s){const a=[(0,e.parseDef)(i.left._def,Object.assign(Object.assign({},s),{currentPath:[...s.currentPath,"allOf","0"]})),(0,e.parseDef)(i.right._def,Object.assign(Object.assign({},s),{currentPath:[...s.currentPath,"allOf","1"]}))].filter(c=>!!c);let o=s.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0;const u=[];return a.forEach(c=>{if(t(c))u.push(...c.allOf),c.unevaluatedProperties===void 0&&(o=void 0);else{let d=c;"additionalProperties"in c&&c.additionalProperties===!1?d=r(c,["additionalProperties"]):o=void 0,u.push(d)}}),u.length?Object.assign({allOf:u},o):void 0}return hr.parseIntersectionDef=n,hr}var ni={};Object.defineProperty(ni,"__esModule",{value:!0});ni.parseLiteralDef=void 0;function sy(r,e){const t=typeof r.value;return t!=="bigint"&&t!=="number"&&t!=="boolean"&&t!=="string"?{type:Array.isArray(r.value)?"array":"object"}:e.target==="openApi3"?{type:t==="bigint"?"integer":t,enum:[r.value]}:{type:t==="bigint"?"integer":t,const:r.value}}ni.parseLiteralDef=sy;var pr={},Qa;function ay(){if(Qa)return pr;Qa=1,Object.defineProperty(pr,"__esModule",{value:!0}),pr.parseMapDef=void 0;const r=De();function e(t,n){const i=(0,r.parseDef)(t.keyType._def,Object.assign(Object.assign({},n),{currentPath:[...n.currentPath,"items","items","0"]}))||{},s=(0,r.parseDef)(t.valueType._def,Object.assign(Object.assign({},n),{currentPath:[...n.currentPath,"items","items","1"]}))||{};return{type:"array",maxItems:125,items:{type:"array",items:[i,s],minItems:2,maxItems:2}}}return pr.parseMapDef=e,pr}var ii={};Object.defineProperty(ii,"__esModule",{value:!0});ii.parseNativeEnumDef=void 0;function oy(r){const e=r.values,n=Object.keys(r.values).filter(s=>typeof e[e[s]]!="number").map(s=>e[s]),i=Array.from(new Set(n.map(s=>typeof s)));return{type:i.length===1?i[0]==="string"?"string":"number":["string","number"],enum:n}}ii.parseNativeEnumDef=oy;var si={};Object.defineProperty(si,"__esModule",{value:!0});si.parseNeverDef=void 0;function uy(){return{not:{}}}si.parseNeverDef=uy;var ai={};Object.defineProperty(ai,"__esModule",{value:!0});ai.parseNullDef=void 0;function cy(r){return r.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}ai.parseNullDef=cy;var mr={},Ni={},eo;function Hu(){return eo||(eo=1,function(r){Object.defineProperty(r,"__esModule",{value:!0}),r.parseUnionDef=r.primitiveMappings=void 0;const e=De();r.primitiveMappings={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function t(i,s){if(s.target==="openApi3")return n(i,s);const a=i.options instanceof Map?Array.from(i.options.values()):i.options;if(a.every(o=>o._def.typeName in r.primitiveMappings&&(!o._def.checks||!o._def.checks.length))){const o=a.reduce((u,c)=>{const d=r.primitiveMappings[c._def.typeName];return d&&!u.includes(d)?[...u,d]:u},[]);return{type:o.length>1?o:o[0]}}else if(a.every(o=>o._def.typeName==="ZodLiteral"&&!o.description)){const o=a.reduce((u,c)=>{const d=typeof c._def.value;switch(d){case"string":case"number":case"boolean":return[...u,d];case"bigint":return[...u,"integer"];case"object":if(c._def.value===null)return[...u,"null"];case"symbol":case"undefined":case"function":default:return u}},[]);if(o.length===a.length){const u=o.filter((c,d,f)=>f.indexOf(c)===d);return{type:u.length>1?u:u[0],enum:a.reduce((c,d)=>c.includes(d._def.value)?c:[...c,d._def.value],[])}}}else if(a.every(o=>o._def.typeName==="ZodEnum"))return{type:"string",enum:a.reduce((o,u)=>[...o,...u._def.values.filter(c=>!o.includes(c))],[])};return n(i,s)}r.parseUnionDef=t;const n=(i,s)=>{const a=(i.options instanceof Map?Array.from(i.options.values()):i.options).map((o,u)=>(0,e.parseDef)(o._def,Object.assign(Object.assign({},s),{currentPath:[...s.currentPath,"anyOf",`${u}`]}))).filter(o=>!!o&&(!s.strictUnions||typeof o=="object"&&Object.keys(o).length>0));return a.length?{anyOf:a}:void 0}}(Ni)),Ni}var to;function ly(){if(to)return mr;to=1,Object.defineProperty(mr,"__esModule",{value:!0}),mr.parseNullableDef=void 0;const r=De(),e=Hu();function t(n,i){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(n.innerType._def.typeName)&&(!n.innerType._def.checks||!n.innerType._def.checks.length))return i.target==="openApi3"?{type:e.primitiveMappings[n.innerType._def.typeName],nullable:!0}:{type:[e.primitiveMappings[n.innerType._def.typeName],"null"]};if(i.target==="openApi3"){const a=(0,r.parseDef)(n.innerType._def,Object.assign(Object.assign({},i),{currentPath:[...i.currentPath]}));return a&&Object.assign(Object.assign({},a),{nullable:!0})}const s=(0,r.parseDef)(n.innerType._def,Object.assign(Object.assign({},i),{currentPath:[...i.currentPath,"anyOf","0"]}));return s&&{anyOf:[s,{type:"null"}]}}return mr.parseNullableDef=t,mr}var oi={};Object.defineProperty(oi,"__esModule",{value:!0});oi.parseNumberDef=void 0;const bt=it;function dy(r,e){const t={type:"number"};if(!r.checks)return t;for(const n of r.checks)switch(n.kind){case"int":t.type="integer",(0,bt.addErrorMessage)(t,"type",n.message,e);break;case"min":e.target==="jsonSchema7"?n.inclusive?(0,bt.setResponseValueAndErrors)(t,"minimum",n.value,n.message,e):(0,bt.setResponseValueAndErrors)(t,"exclusiveMinimum",n.value,n.message,e):(n.inclusive||(t.exclusiveMinimum=!0),(0,bt.setResponseValueAndErrors)(t,"minimum",n.value,n.message,e));break;case"max":e.target==="jsonSchema7"?n.inclusive?(0,bt.setResponseValueAndErrors)(t,"maximum",n.value,n.message,e):(0,bt.setResponseValueAndErrors)(t,"exclusiveMaximum",n.value,n.message,e):(n.inclusive||(t.exclusiveMaximum=!0),(0,bt.setResponseValueAndErrors)(t,"maximum",n.value,n.message,e));break;case"multipleOf":(0,bt.setResponseValueAndErrors)(t,"multipleOf",n.value,n.message,e);break}return t}oi.parseNumberDef=dy;var St={},ro;function fy(){if(ro)return St;ro=1,Object.defineProperty(St,"__esModule",{value:!0}),St.parseObjectDef=St.parseObjectDefX=void 0;const r=De();function e(n,i){var s,a;Object.keys(n.shape()).reduce((u,c)=>{let d=n.shape()[c];const f=d.isOptional();f||(d=Object.assign({},d._def.innerSchema));const m=(0,r.parseDef)(d._def,Object.assign(Object.assign({},i),{currentPath:[...i.currentPath,"properties",c],propertyPath:[...i.currentPath,"properties",c]}));return m!==void 0&&(u.properties[c]=m,f||(u.required||(u.required=[]),u.required.push(c))),u},{type:"object",properties:{},additionalProperties:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":(s=(0,r.parseDef)(n.catchall._def,Object.assign(Object.assign({},i),{currentPath:[...i.currentPath,"additionalProperties"]})))!==null&&s!==void 0?s:!0});const o=Object.assign(Object.assign({type:"object"},Object.entries(n.shape()).reduce((u,[c,d])=>{if(d===void 0||d._def===void 0)return u;const f=(0,r.parseDef)(d._def,Object.assign(Object.assign({},i),{currentPath:[...i.currentPath,"properties",c],propertyPath:[...i.currentPath,"properties",c]}));return f===void 0?u:{properties:Object.assign(Object.assign({},u.properties),{[c]:f}),required:d.isOptional()?u.required:[...u.required,c]}},{properties:{},required:[]})),{additionalProperties:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":(a=(0,r.parseDef)(n.catchall._def,Object.assign(Object.assign({},i),{currentPath:[...i.currentPath,"additionalProperties"]})))!==null&&a!==void 0?a:!0});return o.required.length||delete o.required,o}St.parseObjectDefX=e;function t(n,i){var s;const a=Object.assign(Object.assign({type:"object"},Object.entries(n.shape()).reduce((o,[u,c])=>{if(c===void 0||c._def===void 0)return o;const d=(0,r.parseDef)(c._def,Object.assign(Object.assign({},i),{currentPath:[...i.currentPath,"properties",u],propertyPath:[...i.currentPath,"properties",u]}));return d===void 0?o:{properties:Object.assign(Object.assign({},o.properties),{[u]:d}),required:c.isOptional()?o.required:[...o.required,u]}},{properties:{},required:[]})),{additionalProperties:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":(s=(0,r.parseDef)(n.catchall._def,Object.assign(Object.assign({},i),{currentPath:[...i.currentPath,"additionalProperties"]})))!==null&&s!==void 0?s:!0});return a.required.length||delete a.required,a}return St.parseObjectDef=t,St}var gr={},no;function hy(){if(no)return gr;no=1,Object.defineProperty(gr,"__esModule",{value:!0}),gr.parseOptionalDef=void 0;const r=De(),e=(t,n)=>{var i;if(n.currentPath.toString()===((i=n.propertyPath)===null||i===void 0?void 0:i.toString()))return(0,r.parseDef)(t.innerType._def,n);const s=(0,r.parseDef)(t.innerType._def,Object.assign(Object.assign({},n),{currentPath:[...n.currentPath,"anyOf","1"]}));return s?{anyOf:[{not:{}},s]}:{}};return gr.parseOptionalDef=e,gr}var yr={},io;function py(){if(io)return yr;io=1,Object.defineProperty(yr,"__esModule",{value:!0}),yr.parsePipelineDef=void 0;const r=De(),e=(t,n)=>{if(n.pipeStrategy==="input")return(0,r.parseDef)(t.in._def,n);const i=(0,r.parseDef)(t.in._def,Object.assign(Object.assign({},n),{currentPath:[...n.currentPath,"allOf","0"]})),s=(0,r.parseDef)(t.out._def,Object.assign(Object.assign({},n),{currentPath:[...n.currentPath,"allOf",i?"1":"0"]}));return{allOf:[i,s].filter(a=>a!==void 0)}};return yr.parsePipelineDef=e,yr}var br={},so;function my(){if(so)return br;so=1,Object.defineProperty(br,"__esModule",{value:!0}),br.parsePromiseDef=void 0;const r=De();function e(t,n){return(0,r.parseDef)(t.type._def,n)}return br.parsePromiseDef=e,br}var vr={},Us={};(function(r){Object.defineProperty(r,"__esModule",{value:!0}),r.parseStringDef=r.emojiPattern=r.ulidPattern=r.cuid2Pattern=r.cuidPattern=r.emailPattern=void 0;const e=it;r.emailPattern='^(([^<>()[\\]\\\\.,;:\\s@\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\"]+)*)|(\\".+\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$',r.cuidPattern="^c[^\\s-]{8,}$",r.cuid2Pattern="^[a-z][a-z0-9]*$",r.ulidPattern="/[0-9A-HJKMNP-TV-Z]{26}/",r.emojiPattern="/^(p{Extended_Pictographic}|p{Emoji_Component})+$/u";function t(a,o){const u={type:"string"};if(a.checks)for(const c of a.checks)switch(c.kind){case"min":(0,e.setResponseValueAndErrors)(u,"minLength",typeof u.minLength=="number"?Math.max(u.minLength,c.value):c.value,c.message,o);break;case"max":(0,e.setResponseValueAndErrors)(u,"maxLength",typeof u.maxLength=="number"?Math.min(u.maxLength,c.value):c.value,c.message,o);break;case"email":switch(o.emailStrategy){case"format:email":i(u,"email",c.message,o);break;case"format:idn-email":i(u,"idn-email",c.message,o);break;case"pattern:zod":s(u,r.emailPattern,c.message,o);break}break;case"url":i(u,"uri",c.message,o);break;case"uuid":i(u,"uuid",c.message,o);break;case"regex":s(u,c.regex.source,c.message,o);break;case"cuid":s(u,r.cuidPattern,c.message,o);break;case"cuid2":s(u,r.cuid2Pattern,c.message,o);break;case"startsWith":s(u,"^"+n(c.value),c.message,o);break;case"endsWith":s(u,n(c.value)+"$",c.message,o);break;case"datetime":i(u,"date-time",c.message,o);break;case"length":(0,e.setResponseValueAndErrors)(u,"minLength",typeof u.minLength=="number"?Math.max(u.minLength,c.value):c.value,c.message,o),(0,e.setResponseValueAndErrors)(u,"maxLength",typeof u.maxLength=="number"?Math.min(u.maxLength,c.value):c.value,c.message,o);break;case"includes":{s(u,n(c.value),c.message,o);break}case"ip":{c.version!=="v6"&&i(u,"ipv4",c.message,o),c.version!=="v4"&&i(u,"ipv6",c.message,o);break}case"emoji":s(u,r.emojiPattern,c.message,o);break;case"ulid":{s(u,r.ulidPattern,c.message,o);break}}return u}r.parseStringDef=t;const n=a=>Array.from(a).map(o=>/[a-zA-Z0-9]/.test(o)?o:`\\${o}`).join(""),i=(a,o,u,c)=>{var d;a.format||!((d=a.anyOf)===null||d===void 0)&&d.some(f=>f.format)?(a.anyOf||(a.anyOf=[]),a.format&&(a.anyOf.push(Object.assign({format:a.format},a.errorMessage&&c.errorMessages&&{errorMessage:{format:a.errorMessage.format}})),delete a.format,a.errorMessage&&(delete a.errorMessage.format,Object.keys(a.errorMessage).length===0&&delete a.errorMessage)),a.anyOf.push(Object.assign({format:o},u&&c.errorMessages&&{errorMessage:{format:u}}))):(0,e.setResponseValueAndErrors)(a,"format",o,u,c)},s=(a,o,u,c)=>{var d;a.pattern||!((d=a.allOf)===null||d===void 0)&&d.some(f=>f.pattern)?(a.allOf||(a.allOf=[]),a.pattern&&(a.allOf.push(Object.assign({pattern:a.pattern},a.errorMessage&&c.errorMessages&&{errorMessage:{pattern:a.errorMessage.pattern}})),delete a.pattern,a.errorMessage&&(delete a.errorMessage.pattern,Object.keys(a.errorMessage).length===0&&delete a.errorMessage)),a.allOf.push(Object.assign({pattern:o},u&&c.errorMessages&&{errorMessage:{pattern:u}}))):(0,e.setResponseValueAndErrors)(a,"pattern",o,u,c)}})(Us);var ao;function gy(){if(ao)return vr;ao=1,Object.defineProperty(vr,"__esModule",{value:!0}),vr.parseRecordDef=void 0;const r=Yn,e=De(),t=Us;function n(i,s){var a,o,u,c,d;if(s.target==="openApi3"&&((a=i.keyType)===null||a===void 0?void 0:a._def.typeName)===r.ZodFirstPartyTypeKind.ZodEnum)return{type:"object",required:i.keyType._def.values,properties:i.keyType._def.values.reduce((m,b)=>{var g;return Object.assign(Object.assign({},m),{[b]:(g=(0,e.parseDef)(i.valueType._def,Object.assign(Object.assign({},s),{currentPath:[...s.currentPath,"properties",b]})))!==null&&g!==void 0?g:{}})},{}),additionalProperties:!1};const f={type:"object",additionalProperties:(o=(0,e.parseDef)(i.valueType._def,Object.assign(Object.assign({},s),{currentPath:[...s.currentPath,"additionalProperties"]})))!==null&&o!==void 0?o:{}};if(s.target==="openApi3")return f;if(((u=i.keyType)===null||u===void 0?void 0:u._def.typeName)===r.ZodFirstPartyTypeKind.ZodString&&(!((c=i.keyType._def.checks)===null||c===void 0)&&c.length)){const m=Object.entries((0,t.parseStringDef)(i.keyType._def,s)).reduce((b,[g,_])=>g==="type"?b:Object.assign(Object.assign({},b),{[g]:_}),{});return Object.assign(Object.assign({},f),{propertyNames:m})}else if(((d=i.keyType)===null||d===void 0?void 0:d._def.typeName)===r.ZodFirstPartyTypeKind.ZodEnum)return Object.assign(Object.assign({},f),{propertyNames:{enum:i.keyType._def.values}});return f}return vr.parseRecordDef=n,vr}var wr={},oo;function yy(){if(oo)return wr;oo=1,Object.defineProperty(wr,"__esModule",{value:!0}),wr.parseSetDef=void 0;const r=it,e=De();function t(n,i){const a={type:"array",uniqueItems:!0,items:(0,e.parseDef)(n.valueType._def,Object.assign(Object.assign({},i),{currentPath:[...i.currentPath,"items"]}))};return n.minSize&&(0,r.setResponseValueAndErrors)(a,"minItems",n.minSize.value,n.minSize.message,i),n.maxSize&&(0,r.setResponseValueAndErrors)(a,"maxItems",n.maxSize.value,n.maxSize.message,i),a}return wr.parseSetDef=t,wr}var _r={},uo;function by(){if(uo)return _r;uo=1,Object.defineProperty(_r,"__esModule",{value:!0}),_r.parseTupleDef=void 0;const r=De();function e(t,n){return t.rest?{type:"array",minItems:t.items.length,items:t.items.map((i,s)=>(0,r.parseDef)(i._def,Object.assign(Object.assign({},n),{currentPath:[...n.currentPath,"items",`${s}`]}))).reduce((i,s)=>s===void 0?i:[...i,s],[]),additionalItems:(0,r.parseDef)(t.rest._def,Object.assign(Object.assign({},n),{currentPath:[...n.currentPath,"additionalItems"]}))}:{type:"array",minItems:t.items.length,maxItems:t.items.length,items:t.items.map((i,s)=>(0,r.parseDef)(i._def,Object.assign(Object.assign({},n),{currentPath:[...n.currentPath,"items",`${s}`]}))).reduce((i,s)=>s===void 0?i:[...i,s],[])}}return _r.parseTupleDef=e,_r}var ui={};Object.defineProperty(ui,"__esModule",{value:!0});ui.parseUndefinedDef=void 0;function vy(){return{not:{}}}ui.parseUndefinedDef=vy;var ci={};Object.defineProperty(ci,"__esModule",{value:!0});ci.parseUnknownDef=void 0;function wy(){return{}}ci.parseUnknownDef=wy;var co;function De(){if(co)return or;co=1,Object.defineProperty(or,"__esModule",{value:!0}),or.parseDef=void 0;const r=Yn,e=Xn,t=Wg(),n=Qn,i=ei,s=Jg(),a=Xg(),o=ti,u=ty(),c=ry(),d=ri,f=iy(),m=ni,b=ay(),g=ii,_=si,h=ai,T=ly(),j=oi,S=fy(),R=hy(),M=py(),O=my(),C=gy(),v=yy(),A=Us,I=by(),N=ui,L=Hu(),q=ci;function Y(W,te,ie=!1){const ge=te.seen.get(W);if(ge&&!ie){const Le=K(ge,te);if(Le!==void 0)return Le}const J={def:W,path:te.currentPath,jsonSchema:void 0};te.seen.set(W,J);const je=B(W,W.typeName,te);return je&&G(W,te,je),J.jsonSchema=je,je}or.parseDef=Y;const K=(W,te)=>{switch(te.$refStrategy){case"root":return{$ref:W.path.length===0?"":W.path.length===1?`${W.path[0]}/`:W.path.join("/")};case"relative":return{$ref:V(te.currentPath,W.path)};case"none":return W.path.length<te.currentPath.length&&W.path.every((ie,ge)=>te.currentPath[ge]===ie)?(console.warn(`Recursive reference detected at ${te.currentPath.join("/")}! Defaulting to any`),{}):void 0;case"seen":return W.path.length<te.currentPath.length&&W.path.every((ie,ge)=>te.currentPath[ge]===ie)?(console.warn(`Recursive reference detected at ${te.currentPath.join("/")}! Defaulting to any`),{}):W.jsonSchema}},V=(W,te)=>{let ie=0;for(;ie<W.length&&ie<te.length&&W[ie]===te[ie];ie++);return[(W.length-ie).toString(),...te.slice(ie)].join("/")},B=(W,te,ie)=>{switch(te){case r.ZodFirstPartyTypeKind.ZodString:return(0,A.parseStringDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodNumber:return(0,j.parseNumberDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodObject:return(0,S.parseObjectDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodBigInt:return(0,n.parseBigintDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodBoolean:return(0,i.parseBooleanDef)();case r.ZodFirstPartyTypeKind.ZodDate:return(0,o.parseDateDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodUndefined:return(0,N.parseUndefinedDef)();case r.ZodFirstPartyTypeKind.ZodNull:return(0,h.parseNullDef)(ie);case r.ZodFirstPartyTypeKind.ZodArray:return(0,t.parseArrayDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodUnion:case r.ZodFirstPartyTypeKind.ZodDiscriminatedUnion:return(0,L.parseUnionDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodIntersection:return(0,f.parseIntersectionDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodTuple:return(0,I.parseTupleDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodRecord:return(0,C.parseRecordDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodLiteral:return(0,m.parseLiteralDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodEnum:return(0,d.parseEnumDef)(W);case r.ZodFirstPartyTypeKind.ZodNativeEnum:return(0,g.parseNativeEnumDef)(W);case r.ZodFirstPartyTypeKind.ZodNullable:return(0,T.parseNullableDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodOptional:return(0,R.parseOptionalDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodMap:return(0,b.parseMapDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodSet:return(0,v.parseSetDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodLazy:return Y(W.getter()._def,ie);case r.ZodFirstPartyTypeKind.ZodPromise:return(0,O.parsePromiseDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodNaN:case r.ZodFirstPartyTypeKind.ZodNever:return(0,_.parseNeverDef)();case r.ZodFirstPartyTypeKind.ZodEffects:return(0,c.parseEffectsDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodAny:return(0,e.parseAnyDef)();case r.ZodFirstPartyTypeKind.ZodUnknown:return(0,q.parseUnknownDef)();case r.ZodFirstPartyTypeKind.ZodDefault:return(0,u.parseDefaultDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodBranded:return(0,s.parseBrandedDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodCatch:return(0,a.parseCatchDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodPipeline:return(0,M.parsePipelineDef)(W,ie);case r.ZodFirstPartyTypeKind.ZodFunction:case r.ZodFirstPartyTypeKind.ZodVoid:case r.ZodFirstPartyTypeKind.ZodSymbol:return;default:return(ge=>{})()}},G=(W,te,ie)=>(W.description&&(ie.description=W.description,te.markdownDescription&&(ie.markdownDescription=W.description)),ie);return or}var li={},Wu={};(function(r){Object.defineProperty(r,"__esModule",{value:!0}),r.getDefaultOptions=r.defaultOptions=void 0,r.defaultOptions={name:void 0,$refStrategy:"root",basePath:["#"],effectStrategy:"input",pipeStrategy:"all",dateStrategy:"string",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,definitions:{},errorMessages:!1,markdownDescription:!1,emailStrategy:"format:email"};const e=t=>typeof t=="string"?Object.assign(Object.assign({},r.defaultOptions),{name:t}):Object.assign(Object.assign({},r.defaultOptions),t);r.getDefaultOptions=e})(Wu);Object.defineProperty(li,"__esModule",{value:!0});li.getRefs=void 0;const _y=Wu,Iy=r=>{const e=(0,_y.getDefaultOptions)(r),t=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return Object.assign(Object.assign({},e),{currentPath:t,propertyPath:void 0,seen:new Map(Object.entries(e.definitions).map(([n,i])=>[i._def,{def:i._def,path:[...e.basePath,e.definitionPath,n],jsonSchema:void 0}]))})};li.getRefs=Iy;Object.defineProperty(Gn,"__esModule",{value:!0});Gn.zodToJsonSchema=void 0;const lo=De(),Ay=li,Ey=(r,e)=>{var t;const n=(0,Ay.getRefs)(e),i=typeof e=="object"&&e.definitions?Object.entries(e.definitions).reduce((u,[c,d])=>{var f;return Object.assign(Object.assign({},u),{[c]:(f=(0,lo.parseDef)(d._def,Object.assign(Object.assign({},n),{currentPath:[...n.basePath,n.definitionPath,c]}),!0))!==null&&f!==void 0?f:{}})},{}):void 0,s=typeof e=="string"?e:e==null?void 0:e.name,a=(t=(0,lo.parseDef)(r._def,s===void 0?n:Object.assign(Object.assign({},n),{currentPath:[...n.basePath,n.definitionPath,s]}),!1))!==null&&t!==void 0?t:{},o=s===void 0?i?Object.assign(Object.assign({},a),{[n.definitionPath]:i}):a:{$ref:[...n.$refStrategy==="relative"?[]:n.basePath,n.definitionPath,s].join("/"),[n.definitionPath]:Object.assign(Object.assign({},i),{[s]:a})};return n.target==="jsonSchema7"?o.$schema="http://json-schema.org/draft-07/schema#":n.target==="jsonSchema2019-09"&&(o.$schema="https://json-schema.org/draft/2019-09/schema#"),o};Gn.zodToJsonSchema=Ey;(function(r){Object.defineProperty(r,"__esModule",{value:!0}),r.zodToJsonSchema=void 0;const e=Gn;Object.defineProperty(r,"zodToJsonSchema",{enumerable:!0,get:function(){return e.zodToJsonSchema}}),r.default=e.zodToJsonSchema})($u);function Ty(r){return{name:r.name,description:r.description,parameters:$u.zodToJsonSchema(r.schema)}}class Nt extends iu{constructor(e){super(e),Object.defineProperty(this,"lc_namespace",{enumerable:!0,configurable:!0,writable:!0,value:["langchain","chat_models",this._llmType()]})}_separateRunnableConfigFromCallOptions(e){const[t,n]=super._separateRunnableConfigFromCallOptions(e);return n!=null&&n.timeout&&!n.signal&&(n.signal=AbortSignal.timeout(n.timeout)),[t,n]}async invoke(e,t){const n=Nt._convertInputToPromptValue(e);return(await this.generatePrompt([n],t,t==null?void 0:t.callbacks)).generations[0][0].message}async*_streamResponseChunks(e,t,n){throw new Error("Not implemented.")}async*_streamIterator(e,t){if(this._streamResponseChunks===Nt.prototype._streamResponseChunks)yield this.invoke(e,t);else{const i=Nt._convertInputToPromptValue(e).toChatMessages(),[s,a]=this._separateRunnableConfigFromCallOptions(t),o=await Ve.configure(s.callbacks,this.callbacks,s.tags,this.tags,s.metadata,this.metadata,{verbose:this.verbose}),u={options:a,invocation_params:this==null?void 0:this.invocationParams(a)},c=await(o==null?void 0:o.handleChatModelStart(this.toJSON(),[i],void 0,void 0,u,void 0,void 0,s.runName));let d;try{for await(const f of this._streamResponseChunks(i,a,c==null?void 0:c[0]))yield f.message,d?d=d.concat(f):d=f}catch(f){throw await Promise.all((c??[]).map(m=>m==null?void 0:m.handleLLMError(f))),f}await Promise.all((c??[]).map(f=>f==null?void 0:f.handleLLMEnd({generations:[[d]]})))}}async _generateUncached(e,t,n){var m;const i=e.map(b=>b.map(Qr)),s=await Ve.configure(n.callbacks,this.callbacks,n.tags,this.tags,n.metadata,this.metadata,{verbose:this.verbose}),a={options:t,invocation_params:this==null?void 0:this.invocationParams(t)},o=await(s==null?void 0:s.handleChatModelStart(this.toJSON(),i,void 0,void 0,a,void 0,void 0,n.runName)),u=await Promise.allSettled(i.map((b,g)=>this._generate(b,{...t,promptIndex:g},o==null?void 0:o[g]))),c=[],d=[];await Promise.all(u.map(async(b,g)=>{var _,h;if(b.status==="fulfilled"){const T=b.value;return c[g]=T.generations,d[g]=T.llmOutput,(_=o==null?void 0:o[g])==null?void 0:_.handleLLMEnd({generations:[T.generations],llmOutput:T.llmOutput})}else return await((h=o==null?void 0:o[g])==null?void 0:h.handleLLMError(b.reason)),Promise.reject(b.reason)}));const f={generations:c,llmOutput:d.length?(m=this._combineLLMOutput)==null?void 0:m.call(this,...d):void 0};return Object.defineProperty(f,Go,{value:o?{runIds:o==null?void 0:o.map(b=>b.runId)}:void 0,configurable:!0}),f}async generate(e,t,n){let i;Array.isArray(t)?i={stop:t}:i=t;const s=e.map(b=>b.map(Qr)),[a,o]=this._separateRunnableConfigFromCallOptions(i);if(a.callbacks=a.callbacks??n,!this.cache)return this._generateUncached(s,o,a);const{cache:u}=this,c=this._getSerializedCacheKeyParametersForCall(o),d=[],f=await Promise.all(s.map(async(b,g)=>{const _=Nt._convertInputToPromptValue(b).toString(),h=await u.lookup(_,c);return h||d.push(g),h}));let m={};if(d.length>0){const b=await this._generateUncached(d.map(g=>s[g]),o,a);await Promise.all(b.generations.map(async(g,_)=>{const h=d[_];f[h]=g;const T=Nt._convertInputToPromptValue(s[h]).toString();return u.update(T,c,g)})),m=b.llmOutput??{}}return{generations:f,llmOutput:m}}invocationParams(e){return{}}_modelType(){return"base_chat_model"}serialize(){return{...this.invocationParams(),_type:this._llmType(),_model:this._modelType()}}async generatePrompt(e,t,n){const i=e.map(s=>s.toChatMessages());return this.generate(i,t,n)}async call(e,t,n){return(await this.generate([e.map(Qr)],t,n)).generations[0][0].message}async callPrompt(e,t,n){const i=e.toChatMessages();return this.call(i,t,n)}async predictMessages(e,t,n){return this.call(e,t,n)}async predict(e,t,n){const i=new kr(e);return(await this.call([i],t,n)).content}}function Py(r){return r.role!=="system"&&r.role!=="assistant"&&r.role!=="user"&&r.role!=="function"&&console.warn(`Unknown message role: ${r.role}`),r.role}function Ri(r){const e=r._getType();switch(e){case"system":return"system";case"ai":return"assistant";case"human":return"user";case"function":return"function";case"generic":{if(!Jo.isInstance(r))throw new Error("Invalid generic chat message");return Py(r)}default:throw new Error(`Unknown message type: ${e}`)}}function Oy(r){switch(r.role){case"user":return new kr(r.content||"");case"assistant":return new As(r.content||"",{function_call:r.function_call});case"system":return new Yo(r.content||"");default:return new Jo(r.content||"",r.role??"unknown")}}function xy(r,e){const t=r.role??e,n=r.content??"";let i;return r.function_call?i={function_call:r.function_call}:i={},t==="user"?new In({content:n}):t==="assistant"?new An({content:n,additional_kwargs:i}):t==="system"?new En({content:n}):t==="function"?new Tn({content:n,additional_kwargs:i,name:r.name}):new Pn({content:n,role:t})}class Sy extends Nt{static lc_name(){return"ChatOpenAI"}get callKeys(){return[...super.callKeys,"options","function_call","functions","tools","promptIndex"]}get lc_secrets(){return{openAIApiKey:"OPENAI_API_KEY",azureOpenAIApiKey:"AZURE_OPENAI_API_KEY",organization:"OPENAI_ORGANIZATION"}}get lc_aliases(){return{modelName:"model",openAIApiKey:"openai_api_key",azureOpenAIApiVersion:"azure_openai_api_version",azureOpenAIApiKey:"azure_openai_api_key",azureOpenAIApiInstanceName:"azure_openai_api_instance_name",azureOpenAIApiDeploymentName:"azure_openai_api_deployment_name"}}constructor(e,t){var n,i,s,a,o,u,c,d;if(super(e??{}),Object.defineProperty(this,"lc_serializable",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,"temperature",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,"topP",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,"frequencyPenalty",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"presencePenalty",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"n",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,"logitBias",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"modelName",{enumerable:!0,configurable:!0,writable:!0,value:"gpt-3.5-turbo"}),Object.defineProperty(this,"modelKwargs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"stop",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"user",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"timeout",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"streaming",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"maxTokens",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"openAIApiKey",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiVersion",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiKey",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiInstanceName",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIApiDeploymentName",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"azureOpenAIBasePath",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"organization",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"client",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"clientConfig",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.openAIApiKey=(e==null?void 0:e.openAIApiKey)??ce("OPENAI_API_KEY"),this.azureOpenAIApiKey=(e==null?void 0:e.azureOpenAIApiKey)??ce("AZURE_OPENAI_API_KEY"),!this.azureOpenAIApiKey&&!this.openAIApiKey)throw new Error("OpenAI or Azure OpenAI API key not found");if(this.azureOpenAIApiInstanceName=(e==null?void 0:e.azureOpenAIApiInstanceName)??ce("AZURE_OPENAI_API_INSTANCE_NAME"),this.azureOpenAIApiDeploymentName=(e==null?void 0:e.azureOpenAIApiDeploymentName)??ce("AZURE_OPENAI_API_DEPLOYMENT_NAME"),this.azureOpenAIApiVersion=(e==null?void 0:e.azureOpenAIApiVersion)??ce("AZURE_OPENAI_API_VERSION"),this.azureOpenAIBasePath=(e==null?void 0:e.azureOpenAIBasePath)??ce("AZURE_OPENAI_BASE_PATH"),this.organization=((n=e==null?void 0:e.configuration)==null?void 0:n.organization)??ce("OPENAI_ORGANIZATION"),this.modelName=(e==null?void 0:e.modelName)??this.modelName,this.modelKwargs=(e==null?void 0:e.modelKwargs)??{},this.timeout=e==null?void 0:e.timeout,this.temperature=(e==null?void 0:e.temperature)??this.temperature,this.topP=(e==null?void 0:e.topP)??this.topP,this.frequencyPenalty=(e==null?void 0:e.frequencyPenalty)??this.frequencyPenalty,this.presencePenalty=(e==null?void 0:e.presencePenalty)??this.presencePenalty,this.maxTokens=e==null?void 0:e.maxTokens,this.n=(e==null?void 0:e.n)??this.n,this.logitBias=e==null?void 0:e.logitBias,this.stop=e==null?void 0:e.stop,this.user=e==null?void 0:e.user,this.streaming=(e==null?void 0:e.streaming)??!1,this.azureOpenAIApiKey){if(!this.azureOpenAIApiInstanceName&&!this.azureOpenAIBasePath)throw new Error("Azure OpenAI API instance name not found");if(!this.azureOpenAIApiDeploymentName)throw new Error("Azure OpenAI API deployment name not found");if(!this.azureOpenAIApiVersion)throw new Error("Azure OpenAI API version not found");this.openAIApiKey=this.openAIApiKey??""}this.clientConfig={apiKey:this.openAIApiKey,organization:this.organization,baseURL:(t==null?void 0:t.basePath)??((i=e==null?void 0:e.configuration)==null?void 0:i.basePath),dangerouslyAllowBrowser:!0,defaultHeaders:((s=t==null?void 0:t.baseOptions)==null?void 0:s.headers)??((o=(a=e==null?void 0:e.configuration)==null?void 0:a.baseOptions)==null?void 0:o.headers),defaultQuery:((u=t==null?void 0:t.baseOptions)==null?void 0:u.params)??((d=(c=e==null?void 0:e.configuration)==null?void 0:c.baseOptions)==null?void 0:d.params),...t,...e==null?void 0:e.configuration}}invocationParams(e){return{model:this.modelName,temperature:this.temperature,top_p:this.topP,frequency_penalty:this.frequencyPenalty,presence_penalty:this.presencePenalty,max_tokens:this.maxTokens===-1?void 0:this.maxTokens,n:this.n,logit_bias:this.logitBias,stop:(e==null?void 0:e.stop)??this.stop,user:this.user,stream:this.streaming,functions:(e==null?void 0:e.functions)??(e!=null&&e.tools?e==null?void 0:e.tools.map(Ty):void 0),function_call:e==null?void 0:e.function_call,...this.modelKwargs}}_identifyingParams(){return{model_name:this.modelName,...this.invocationParams(),...this.clientConfig}}async*_streamResponseChunks(e,t,n){var u;const i=e.map(c=>({role:Ri(c),content:c.content,name:c.name,function_call:c.additional_kwargs.function_call})),s={...this.invocationParams(t),messages:i,stream:!0};let a;const o=await this.completionWithRetry(s,t);for await(const c of o){const d=c==null?void 0:c.choices[0];if(!d)continue;const{delta:f}=d,m=xy(f,a);a=f.role??a;const b={prompt:t.promptIndex??0,completion:d.index??0},g=new Es({message:m,text:m.content,generationInfo:b});yield g,n==null||n.handleLLMNewToken(g.text??"",b,void 0,void 0,void 0,{chunk:g})}if((u=t.signal)!=null&&u.aborted)throw new Error("AbortError")}identifyingParams(){return this._identifyingParams()}async _generate(e,t,n){var o,u;const i={},s=this.invocationParams(t),a=e.map(c=>({role:Ri(c),content:c.content,name:c.name,function_call:c.additional_kwargs.function_call}));if(s.stream){const c=await this._streamResponseChunks(e,t,n),d={};for await(const m of c){const b=((o=m.generationInfo)==null?void 0:o.completion)??0;d[b]===void 0?d[b]=m:d[b]=d[b].concat(m)}return{generations:Object.entries(d).sort(([m],[b])=>parseInt(m,10)-parseInt(b,10)).map(([m,b])=>b)}}else{const c=await this.completionWithRetry({...s,stream:!1,messages:a},{signal:t==null?void 0:t.signal,...t==null?void 0:t.options}),{completion_tokens:d,prompt_tokens:f,total_tokens:m}=(c==null?void 0:c.usage)??{};d&&(i.completionTokens=(i.completionTokens??0)+d),f&&(i.promptTokens=(i.promptTokens??0)+f),m&&(i.totalTokens=(i.totalTokens??0)+m);const b=[];for(const g of(c==null?void 0:c.choices)??[]){const h={text:((u=g.message)==null?void 0:u.content)??"",message:Oy(g.message??{role:"assistant"})};g.finish_reason&&(h.generationInfo={finish_reason:g.finish_reason}),b.push(h)}return{generations:b,llmOutput:{tokenUsage:i}}}}async getNumTokensFromMessages(e){let t=0,n=0,i=0;Cr(this.modelName)==="gpt-3.5-turbo"?(n=4,i=-1):Cr(this.modelName).startsWith("gpt-4")&&(n=3,i=1);const s=await Promise.all(e.map(async a=>{const o=await this.getNumTokens(a.content),u=await this.getNumTokens(Ri(a)),c=a.name!==void 0?i+await this.getNumTokens(a.name):0,d=o+n+u+c;return t+=d,d}));return t+=3,{totalCount:t,countPerMessage:s}}async completionWithRetry(e,t){const n=this._getClientOptions(t);return this.caller.call(async()=>{try{return await this.client.chat.completions.create(e,n)}catch(i){throw qn(i)}})}_getClientOptions(e){if(!this.client){const n={azureOpenAIApiDeploymentName:this.azureOpenAIApiDeploymentName,azureOpenAIApiInstanceName:this.azureOpenAIApiInstanceName,azureOpenAIApiKey:this.azureOpenAIApiKey,azureOpenAIBasePath:this.azureOpenAIBasePath,baseURL:this.clientConfig.baseURL},i=Kn(n),s={...this.clientConfig,baseURL:i,timeout:this.timeout,maxRetries:0};s.baseURL||delete s.baseURL,this.client=new Pe(s)}const t={...this.clientConfig,...e};return this.azureOpenAIApiKey&&(t.headers={"api-key":this.azureOpenAIApiKey,...t.headers},t.query={"api-version":this.azureOpenAIApiVersion,...t.query}),t}_llmType(){return"openai"}_combineLLMOutput(...e){return e.reduce((t,n)=>(n&&n.tokenUsage&&(t.tokenUsage.completionTokens+=n.tokenUsage.completionTokens??0,t.tokenUsage.promptTokens+=n.tokenUsage.promptTokens??0,t.tokenUsage.totalTokens+=n.tokenUsage.totalTokens??0),t),{tokenUsage:{completionTokens:0,promptTokens:0,totalTokens:0}})}}const Cy=Object.freeze(Object.defineProperty({__proto__:null,ChatOpenAI:Sy},Symbol.toStringTag,{value:"Module"}));exports.DEFAULT_SETTINGS=Rn;exports.FileSelectModal=js;exports.default=zg;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
